{
  "$comment": "v1.183.0",
  "$id": "https://github.com/Microsoft/azure-pipelines-vscode/blob/main/service-schema.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "continuation_token": null,
  "definitions": {
    "any": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "items": {
            "$ref": "#/definitions/any"
          },
          "type": "array"
        },
        {
          "additionalProperties": true,
          "type": "object"
        }
      ]
    },
    "any_allowExpressions": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "items": {
            "$ref": "#/definitions/any"
          },
          "type": "array"
        },
        {
          "additionalProperties": true,
          "type": "object"
        }
      ]
    },
    "boolean": {
      "anyOf": [
        {
          "ignoreCase": "value",
          "pattern": "^true$",
          "type": "string"
        },
        {
          "ignoreCase": "value",
          "pattern": "^y$",
          "type": "string"
        },
        {
          "ignoreCase": "value",
          "pattern": "^yes$",
          "type": "string"
        },
        {
          "ignoreCase": "value",
          "pattern": "^on$",
          "type": "string"
        },
        {
          "ignoreCase": "value",
          "pattern": "^false$",
          "type": "string"
        },
        {
          "ignoreCase": "value",
          "pattern": "^n$",
          "type": "string"
        },
        {
          "ignoreCase": "value",
          "pattern": "^no$",
          "type": "string"
        },
        {
          "ignoreCase": "value",
          "pattern": "^off$",
          "type": "string"
        }
      ]
    },
    "branchFilter": {
      "description": "branch name or prefix filter",
      "pattern": "^[^\\/~\\^\\: \\[\\]\\\\]+(\\/[^\\/~\\^\\: \\[\\]\\\\]+)*$",
      "type": "string"
    },
    "branchFilterArray": {
      "items": {
        "$ref": "#/definitions/branchFilter"
      },
      "type": "array"
    },
    "buildResource": {
      "additionalProperties": false,
      "firstProperty": [
        "build"
      ],
      "properties": {
        "branch": {
          "$ref": "#/definitions/string_allowExpressions"
        },
        "build": {
          "$ref": "#/definitions/referenceName",
          "description": "Alias or name of build artifact"
        },
        "connection": {
          "$ref": "#/definitions/nonEmptyString",
          "description": "Name of the connection. This connection will be used for all the communication related to this artifact."
        },
        "source": {
          "$ref": "#/definitions/nonEmptyString",
          "description": "Name of the source definition/build/job"
        },
        "trigger": {
          "$ref": "#/definitions/buildResourceTrigger",
          "description": "When the artifact mentioned in this build resource completes a build, its allowed to trigger this pipeline."
        },
        "type": {
          "$ref": "#/definitions/nonEmptyString",
          "description": "Name of the artifact type"
        },
        "version": {
          "$ref": "#/definitions/string_allowExpressions"
        }
      },
      "required": [
        "build",
        "type",
        "connection",
        "source"
      ],
      "type": "object"
    },
    "buildResourceTrigger": {
      "anyOf": [
        {
          "pattern": "^none$",
          "type": "string"
        },
        {
          "pattern": "^true$",
          "type": "string"
        }
      ]
    },
    "buildResources": {
      "items": {
        "$ref": "#/definitions/buildResource"
      },
      "type": "array"
    },
    "canaryDeploymentIncrements": {
      "items": {
        "$ref": "#/definitions/nonEmptyString"
      },
      "type": "array"
    },
    "canaryDeploymentStrategy": {
      "additionalProperties": false,
      "properties": {
        "deploy": {
          "$ref": "#/definitions/deployHook",
          "description": "Deploy hook for canary deployment strategy"
        },
        "increments": {
          "$ref": "#/definitions/canaryDeploymentIncrements",
          "description": "Maximum batch size for deployment"
        },
        "on": {
          "$ref": "#/definitions/onSuccessOrFailureHook",
          "description": "On success or failure hook for canary deployment strategy"
        },
        "postRouteTraffic": {
          "$ref": "#/definitions/postRouteTrafficHook",
          "description": "Post route traffic hook for canary deployment strategy"
        },
        "preDeploy": {
          "$ref": "#/definitions/preDeployHook",
          "description": "Pre deploy hook for canary deployment strategy"
        },
        "routeTraffic": {
          "$ref": "#/definitions/routeTrafficHook",
          "description": "Route traffic hook for canary deployment strategy"
        }
      },
      "type": "object"
    },
    "containerArtifactType": {
      "anyOf": [
        {
          "ignoreCase": "value",
          "pattern": "^ACR$",
          "type": "string"
        },
        {
          "type": "string"
        }
      ]
    },
    "containerBase": {
      "additionalProperties": false,
      "properties": {
        "endpoint": {
          "$ref": "#/definitions/string_allowExpressions",
          "description": "ID of the service endpoint connecting to a private container registry"
        },
        "env": {
          "$ref": "#/definitions/mappingOfStringString",
          "description": "Variables to map into the container's environment"
        },
        "image": {
          "$ref": "#/definitions/string",
          "description": "Container image tag",
          "examples": [
            "ubuntu:16.04",
            "windows:1803"
          ]
        },
        "mapDockerSocket": {
          "$ref": "#/definitions/boolean",
          "description": "Set this flag to false to force the agent not to setup the /var/run/docker.sock volume on container jobs"
        },
        "mountReadOnly": {
          "$ref": "#/definitions/readOnlyMounts"
        },
        "options": {
          "$ref": "#/definitions/string_allowExpressions",
          "description": "Options to pass into container host"
        },
        "ports": {
          "$ref": "#/definitions/sequenceOfString_allowExpressions"
        },
        "volumes": {
          "$ref": "#/definitions/sequenceOfString_allowExpressions"
        }
      },
      "required": [
        "image"
      ],
      "type": "object"
    },
    "containerResource": {
      "additionalProperties": true,
      "firstProperty": [
        "container"
      ],
      "properties": {
        "container": {
          "$ref": "#/definitions/referenceName",
          "description": "ID for the container"
        },
        "endpoint": {
          "$ref": "#/definitions/string_allowExpressions",
          "description": "ID of the service endpoint connecting to a private container registry"
        },
        "env": {
          "$ref": "#/definitions/mappingOfStringString",
          "description": "Variables to map into the container's environment"
        },
        "image": {
          "$ref": "#/definitions/string",
          "description": "Container image tag",
          "examples": [
            "ubuntu:16.04",
            "windows:1803"
          ]
        },
        "mapDockerSocket": {
          "$ref": "#/definitions/boolean",
          "description": "Set this flag to false to force the agent not to setup the /var/run/docker.sock volume on container jobs"
        },
        "mountReadOnly": {
          "$ref": "#/definitions/readOnlyMounts"
        },
        "options": {
          "$ref": "#/definitions/string_allowExpressions",
          "description": "Options to pass into container host"
        },
        "ports": {
          "$ref": "#/definitions/sequenceOfString_allowExpressions"
        },
        "trigger": {
          "$ref": "#/definitions/containerResourceTrigger"
        },
        "type": {
          "$ref": "#/definitions/containerArtifactType"
        },
        "volumes": {
          "$ref": "#/definitions/sequenceOfString_allowExpressions"
        }
      },
      "required": [
        "container",
        "image"
      ],
      "type": "object"
    },
    "containerResourceTrigger": {
      "anyOf": [
        {
          "pattern": "^none$",
          "type": "string"
        },
        {
          "pattern": "^true$",
          "type": "string"
        },
        {
          "additionalProperties": false,
          "properties": {
            "enabled": {
              "$ref": "#/definitions/boolean"
            },
            "tags": {
              "$ref": "#/definitions/includeExcludeStringFilters"
            }
          },
          "type": "object"
        }
      ]
    },
    "containerResources": {
      "items": {
        "$ref": "#/definitions/containerResource"
      },
      "type": "array"
    },
    "deployHook": {
      "additionalProperties": false,
      "properties": {
        "pool": {
          "$ref": "#/definitions/pool",
          "description": "Pool where deploy steps will run"
        },
        "steps": {
          "$ref": "#/definitions/steps",
          "description": "A list of steps to run"
        }
      },
      "type": "object"
    },
    "deploymentEnvironment": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "additionalProperties": false,
          "properties": {
            "name": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Name of environment"
            },
            "resourceId": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Id of resource"
            },
            "resourceName": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Name of resource"
            },
            "resourceType": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Type of environment resource"
            },
            "tags": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "List of tag filters"
            }
          },
          "type": "object"
        }
      ],
      "description": "Environment details"
    },
    "deploymentStrategy": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "runOnce": {
              "$ref": "#/definitions/runOnceDeploymentStrategy",
              "description": "RunOnce Deployment strategy"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "rolling": {
              "$ref": "#/definitions/rollingDeploymentStrategy",
              "description": "Rolling Deployment strategy"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "canary": {
              "$ref": "#/definitions/canaryDeploymentStrategy",
              "description": "Canary Deployment strategy"
            }
          },
          "type": "object"
        }
      ]
    },
    "explicitResources": {
      "additionalProperties": false,
      "properties": {
        "pools": {
          "$ref": "#/definitions/sequenceOfNonEmptyString",
          "description": "Pool references"
        },
        "repositories": {
          "$ref": "#/definitions/sequenceOfNonEmptyString",
          "description": "Repository references"
        }
      },
      "type": "object"
    },
    "extends": {
      "additionalProperties": false,
      "properties": {
        "parameters": {
          "$ref": "#/definitions/mapping",
          "description": "Parameters used in the extend"
        },
        "template": {
          "$ref": "#/definitions/nonEmptyString"
        }
      },
      "type": "object"
    },
    "extendsParameters": {
      "items": {
        "$ref": "#/definitions/templateParameter"
      },
      "type": "array"
    },
    "extendsTemplate": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "parameters": {
              "$ref": "#/definitions/extendsParameters"
            },
            "resources": {
              "$ref": "#/definitions/resources"
            },
            "stages": {
              "$ref": "#/definitions/stages"
            },
            "trigger": {
              "$ref": "#/definitions/trigger"
            },
            "variables": {
              "$ref": "#/definitions/variables"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "jobs": {
              "$ref": "#/definitions/jobs"
            },
            "parameters": {
              "$ref": "#/definitions/extendsParameters"
            },
            "resources": {
              "$ref": "#/definitions/resources"
            },
            "trigger": {
              "$ref": "#/definitions/trigger"
            },
            "variables": {
              "$ref": "#/definitions/variables"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "parameters": {
              "$ref": "#/definitions/extendsParameters"
            },
            "resources": {
              "$ref": "#/definitions/resources"
            },
            "steps": {
              "$ref": "#/definitions/steps"
            },
            "trigger": {
              "$ref": "#/definitions/trigger"
            },
            "variables": {
              "$ref": "#/definitions/variables"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "extends": {
              "$ref": "#/definitions/extends"
            },
            "parameters": {
              "$ref": "#/definitions/extendsParameters"
            },
            "resources": {
              "$ref": "#/definitions/resources"
            },
            "trigger": {
              "$ref": "#/definitions/trigger"
            }
          },
          "type": "object"
        }
      ]
    },
    "extendsTemplateBase": {
      "additionalProperties": false,
      "properties": {
        "parameters": {
          "$ref": "#/definitions/extendsParameters"
        },
        "resources": {
          "$ref": "#/definitions/resources"
        },
        "trigger": {
          "$ref": "#/definitions/trigger"
        },
        "variables": {
          "$ref": "#/definitions/variables"
        }
      },
      "type": "object"
    },
    "includeExcludeFilters": {
      "additionalProperties": false,
      "properties": {
        "exclude": {
          "$ref": "#/definitions/branchFilterArray"
        },
        "include": {
          "$ref": "#/definitions/branchFilterArray"
        }
      },
      "type": "object"
    },
    "includeExcludeStringFilters": {
      "anyOf": [
        {
          "items": {
            "$ref": "#/definitions/nonEmptyString"
          },
          "type": "array"
        },
        {
          "additionalProperties": false,
          "properties": {
            "exclude": {
              "$ref": "#/definitions/sequenceOfNonEmptyString"
            },
            "include": {
              "$ref": "#/definitions/sequenceOfNonEmptyString"
            }
          },
          "type": "object"
        }
      ]
    },
    "job": {
      "anyOf": [
        {
          "additionalProperties": false,
          "firstProperty": [
            "job"
          ],
          "properties": {
            "cancelTimeoutInMinutes": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Time to wait for the job to cancel before forcibly terminating it"
            },
            "condition": {
              "$ref": "#/definitions/string",
              "description": "Evaluate this condition expression to determine whether to run this job"
            },
            "container": {
              "$ref": "#/definitions/jobContainer",
              "description": "Container resource name"
            },
            "continueOnError": {
              "$ref": "#/definitions/jobContinueOnError",
              "description": "Continue running even on failure?"
            },
            "dependsOn": {
              "$ref": "#/definitions/jobDependsOn",
              "description": "Any jobs which must complete before this one"
            },
            "displayName": {
              "$ref": "#/definitions/string",
              "description": "Human-readable name for the job"
            },
            "job": {
              "$ref": "#/definitions/referenceName",
              "description": "ID of the job"
            },
            "pool": {
              "$ref": "#/definitions/pool",
              "description": "Pool where this job will run"
            },
            "services": {
              "$ref": "#/definitions/jobServices"
            },
            "steps": {
              "$ref": "#/definitions/steps",
              "description": "A list of steps to run"
            },
            "strategy": {
              "$ref": "#/definitions/jobStrategy",
              "description": "Execution strategy for this job"
            },
            "templateContext": {
              "$ref": "#/definitions/templateContext"
            },
            "timeoutInMinutes": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Time to wait for this job to complete before the server kills it"
            },
            "uses": {
              "$ref": "#/definitions/explicitResources",
              "description": "Any resources required by this job that are not already referenced"
            },
            "variables": {
              "$ref": "#/definitions/variables",
              "description": "Job-specific variables"
            },
            "workspace": {
              "$ref": "#/definitions/jobWorkspace"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "firstProperty": [
            "deployment"
          ],
          "properties": {
            "cancelTimeoutInMinutes": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Time to wait for the job to cancel before forcibly terminating it"
            },
            "condition": {
              "$ref": "#/definitions/string",
              "description": "Evaluate this condition expression to determine whether to run this deployment"
            },
            "container": {
              "$ref": "#/definitions/jobContainer",
              "description": "Container resource name"
            },
            "continueOnError": {
              "$ref": "#/definitions/jobContinueOnError",
              "description": "Continue running even on failure?"
            },
            "dependsOn": {
              "$ref": "#/definitions/jobDependsOn",
              "description": "Any jobs which must complete before this one"
            },
            "deployment": {
              "$ref": "#/definitions/string"
            },
            "displayName": {
              "$ref": "#/definitions/string",
              "description": "Human-readable name for the deployment"
            },
            "environment": {
              "$ref": "#/definitions/deploymentEnvironment"
            },
            "pool": {
              "$ref": "#/definitions/pool",
              "description": "Pool where this job will run"
            },
            "services": {
              "$ref": "#/definitions/jobServices",
              "description": "Container resources to run as a service container"
            },
            "strategy": {
              "$ref": "#/definitions/deploymentStrategy",
              "description": "Execution strategy for this deployment"
            },
            "templateContext": {
              "$ref": "#/definitions/templateContext"
            },
            "timeoutInMinutes": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Time to wait for this job to complete before the server kills it"
            },
            "uses": {
              "$ref": "#/definitions/explicitResources",
              "description": "Any resources required by this job that are not already referenced"
            },
            "variables": {
              "$ref": "#/definitions/variables",
              "description": "Deployment-specific variables"
            },
            "workspace": {
              "$ref": "#/definitions/jobWorkspace",
              "description": "What to clean up before the job runs"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "firstProperty": [
            "template"
          ],
          "properties": {
            "parameters": {
              "$ref": "#/definitions/mapping",
              "description": "Parameters used in a deployment template"
            },
            "template": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Reference to a template for this deployment"
            }
          },
          "type": "object"
        }
      ]
    },
    "jobContainer": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "additionalProperties": false,
          "properties": {
            "alias": {
              "$ref": "#/definitions/string",
              "description": "The alias of the container resource"
            }
          },
          "type": "object"
        },
        {
          "properties": {
            "endpoint": {
              "$ref": "#/definitions/string_allowExpressions",
              "description": "ID of the service endpoint connecting to a private container registry"
            },
            "env": {
              "$ref": "#/definitions/mappingOfStringString",
              "description": "Variables to map into the container's environment"
            },
            "image": {
              "$ref": "#/definitions/string",
              "description": "Container image tag",
              "examples": [
                "ubuntu:16.04",
                "windows:1803"
              ]
            },
            "mapDockerSocket": {
              "$ref": "#/definitions/boolean",
              "description": "Set this flag to false to force the agent not to setup the /var/run/docker.sock volume on container jobs"
            },
            "mountReadOnly": {
              "$ref": "#/definitions/readOnlyMounts"
            },
            "options": {
              "$ref": "#/definitions/string_allowExpressions",
              "description": "Options to pass into container host"
            },
            "ports": {
              "$ref": "#/definitions/sequenceOfString_allowExpressions"
            },
            "volumes": {
              "$ref": "#/definitions/sequenceOfString_allowExpressions"
            }
          },
          "required": [
            "image"
          ],
          "type": "object"
        }
      ]
    },
    "jobContinueOnError": {
      "type": "string"
    },
    "jobDecoratorSteps": {
      "additionalProperties": false,
      "properties": {
        "steps": {
          "$ref": "#/definitions/tasks",
          "description": "A list of steps to run in this job"
        }
      },
      "type": "object"
    },
    "jobDependsOn": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "items": {
            "$ref": "#/definitions/string"
          },
          "type": "array"
        }
      ]
    },
    "jobMatrix": {
      "anyOf": [
        {
          "additionalProperties": true,
          "minProperties": 1,
          "patternProperties": {
            "^[A-Za-z0-9_]+$": {
              "$ref": "#/definitions/matrixProperties"
            }
          },
          "type": "object"
        },
        {
          "type": "string"
        }
      ]
    },
    "jobServices": {
      "additionalProperties": true,
      "type": "object"
    },
    "jobStrategy": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "matrix": {
              "$ref": "#/definitions/jobMatrix"
            },
            "maxParallel": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Maximum number of jobs running in parallel"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "parallel": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Run the job this many times"
            }
          },
          "type": "object"
        }
      ]
    },
    "jobWorkspace": {
      "additionalProperties": false,
      "properties": {
        "clean": {
          "$ref": "#/definitions/string",
          "description": "Which parts of the workspace should be scorched before fetching",
          "enum": [
            "outputs",
            "resources",
            "all"
          ]
        }
      },
      "type": "object"
    },
    "jobs": {
      "items": {
        "$ref": "#/definitions/job"
      },
      "type": "array"
    },
    "jobsTemplate": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "jobs": {
              "$ref": "#/definitions/jobs",
              "description": "Jobs which make up the pipeline"
            },
            "parameters": {
              "$ref": "#/definitions/templateParameters",
              "description": "Parameters used in a job template"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "parameters": {
              "$ref": "#/definitions/templateParameters",
              "description": "Parameters used in a phase template"
            },
            "phases": {
              "$ref": "#/definitions/phases",
              "deprecationMessage": "This option is deprecated, use `jobs` instead",
              "description": "Phases which make up the pipeline",
              "doNotSuggest": true
            }
          },
          "type": "object"
        }
      ]
    },
    "legacyRepoResourceAlias": {
      "pattern": "^self$",
      "type": "string"
    },
    "legacyResource": {
      "additionalProperties": false,
      "firstProperty": [
        "repo"
      ],
      "properties": {
        "clean": {
          "$ref": "#/definitions/string",
          "description": "Scorch the repo before fetching?",
          "enum": [
            "true",
            "false"
          ]
        },
        "fetchDepth": {
          "$ref": "#/definitions/string",
          "description": "Depth of Git graph to fetch"
        },
        "lfs": {
          "$ref": "#/definitions/string",
          "description": "Fetch and checkout Git LFS objects?"
        },
        "repo": {
          "$ref": "#/definitions/legacyRepoResourceAlias"
        }
      },
      "type": "object"
    },
    "lockBehavior": {
      "anyOf": [
        {
          "pattern": "^sequential$",
          "type": "string"
        },
        {
          "pattern": "^runLatest$",
          "type": "string"
        }
      ]
    },
    "mapping": {
      "additionalProperties": true,
      "type": "object"
    },
    "mappingOfStringString": {
      "additionalProperties": true,
      "type": "object"
    },
    "matrixProperties": {
      "additionalProperties": true,
      "description": "Variable-value pair to pass in this matrix instance",
      "type": "object"
    },
    "nonEmptyString": {
      "type": "string"
    },
    "onFailureHook": {
      "additionalProperties": false,
      "properties": {
        "pool": {
          "$ref": "#/definitions/pool",
          "description": "Pool where post on failure steps will run"
        },
        "steps": {
          "$ref": "#/definitions/steps",
          "description": "A list of steps to run"
        }
      },
      "type": "object"
    },
    "onSuccessHook": {
      "additionalProperties": false,
      "properties": {
        "pool": {
          "$ref": "#/definitions/pool",
          "description": "Pool where on success steps will run"
        },
        "steps": {
          "$ref": "#/definitions/steps",
          "description": "A list of steps to run"
        }
      },
      "type": "object"
    },
    "onSuccessOrFailureHook": {
      "additionalProperties": false,
      "properties": {
        "failure": {
          "$ref": "#/definitions/onFailureHook",
          "description": "Runs on failure of any step"
        },
        "success": {
          "$ref": "#/definitions/onSuccessHook",
          "description": "Runs on success of all of the steps"
        }
      },
      "type": "object"
    },
    "packageResource": {
      "additionalProperties": false,
      "firstProperty": [
        "package"
      ],
      "properties": {
        "connection": {
          "$ref": "#/definitions/nonEmptyString",
          "description": "Name of the connection. This connection will be used for all the communication related to this artifact."
        },
        "name": {
          "$ref": "#/definitions/nonEmptyString",
          "description": "Name of the package"
        },
        "package": {
          "$ref": "#/definitions/referenceName",
          "description": "Alias of package artifact"
        },
        "tag": {
          "$ref": "#/definitions/string_allowExpressions"
        },
        "trigger": {
          "$ref": "#/definitions/packageResourceTrigger",
          "description": "Trigger a new pipeline run when a new version of this package is available."
        },
        "type": {
          "$ref": "#/definitions/nonEmptyString",
          "description": "Type of the package. Ex - NuGet, NPM etc."
        },
        "version": {
          "$ref": "#/definitions/string_allowExpressions"
        }
      },
      "required": [
        "package",
        "type",
        "connection",
        "name"
      ],
      "type": "object"
    },
    "packageResourceTrigger": {
      "anyOf": [
        {
          "pattern": "^none$",
          "type": "string"
        },
        {
          "pattern": "^true$",
          "type": "string"
        }
      ]
    },
    "packageResources": {
      "items": {
        "$ref": "#/definitions/packageResource"
      },
      "type": "array"
    },
    "parametersTemplate": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "parameters": {
              "$ref": "#/definitions/templateParameters",
              "description": "Step-specific parameters"
            },
            "steps": {
              "$ref": "#/definitions/steps",
              "description": "A list of steps to run"
            }
          },
          "required": [
            "steps"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "jobs": {
              "$ref": "#/definitions/jobs",
              "description": "Jobs which make up the pipeline"
            },
            "parameters": {
              "$ref": "#/definitions/templateParameters",
              "description": "Parameters used in a job template"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "parameters": {
              "$ref": "#/definitions/templateParameters"
            },
            "stages": {
              "$ref": "#/definitions/stages"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "extends": {
              "$ref": "#/definitions/extends",
              "description": "Extends a template"
            },
            "parameters": {
              "$ref": "#/definitions/templateParameters"
            },
            "resources": {
              "$ref": "#/definitions/resources"
            }
          },
          "required": [
            "extends"
          ],
          "type": "object"
        }
      ]
    },
    "phase": {
      "anyOf": [
        {
          "additionalProperties": false,
          "firstProperty": [
            "phase"
          ],
          "properties": {
            "condition": {
              "$ref": "#/definitions/string",
              "description": "Evaluate this condition expression to determine whether to run this phase"
            },
            "continueOnError": {
              "$ref": "#/definitions/jobContinueOnError",
              "description": "Continue running even on failure?"
            },
            "dependsOn": {
              "$ref": "#/definitions/jobDependsOn",
              "description": "Any phases which must complete before this one"
            },
            "displayName": {
              "$ref": "#/definitions/string",
              "description": "Human-readable name of the phase"
            },
            "phase": {
              "$ref": "#/definitions/referenceName",
              "description": "ID of the phase"
            },
            "queue": {
              "$ref": "#/definitions/phaseQueueTarget",
              "deprecationMessage": "This option is deprecated, use pool instead",
              "description": "Queue where this phase will run",
              "doNotSuggest": true
            },
            "steps": {
              "$ref": "#/definitions/steps",
              "description": "A list of steps to run in this phase"
            },
            "variables": {
              "$ref": "#/definitions/variables",
              "description": "Phase-specific variables"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "firstProperty": [
            "phase"
          ],
          "properties": {
            "condition": {
              "$ref": "#/definitions/string",
              "description": "Evaluate this condition expression to determine whether to run this phase"
            },
            "continueOnError": {
              "$ref": "#/definitions/jobContinueOnError",
              "description": "Continue running even on failure?"
            },
            "dependsOn": {
              "$ref": "#/definitions/jobDependsOn",
              "description": "Any phases which must complete before this one"
            },
            "displayName": {
              "$ref": "#/definitions/string",
              "description": "Human-readable name of the phase"
            },
            "phase": {
              "$ref": "#/definitions/referenceName",
              "description": "ID of the phase"
            },
            "server": {
              "$ref": "#/definitions/phaseServerTarget",
              "deprecationMessage": "This option is deprecated, use pool:server instead",
              "description": "True if this is an agent-less phase (runs on server)",
              "doNotSuggest": true
            },
            "steps": {
              "$ref": "#/definitions/steps",
              "description": "A list of steps to run in this phase"
            },
            "variables": {
              "$ref": "#/definitions/variables",
              "description": "Phase-specific variables"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "firstProperty": [
            "template"
          ],
          "properties": {
            "parameters": {
              "$ref": "#/definitions/mapping",
              "description": "Parameters used in a phase template"
            },
            "template": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Reference to a template for this phase"
            }
          },
          "type": "object"
        }
      ],
      "deprecationMessage": "This option is deprecated, use `job` (inside `jobs`) instead"
    },
    "phaseQueueTarget": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "additionalProperties": false,
          "properties": {
            "cancelTimeoutInMinutes": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Time to wait for the phase to cancel before forcibly terminating it"
            },
            "container": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Container resource name"
            },
            "demands": {
              "$ref": "#/definitions/phaseTargetDemands",
              "description": "List of demands (for a private queue)"
            },
            "matrix": {
              "$ref": "#/definitions/phaseTargetMatrix"
            },
            "name": {
              "$ref": "#/definitions/string",
              "description": "Name of a queue"
            },
            "parallel": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Maximum number of parallel agent executions"
            },
            "timeoutInMinutes": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Time to wait before cancelling the phase"
            },
            "workspace": {
              "$ref": "#/definitions/phaseTargetWorkspace"
            }
          },
          "type": "object"
        }
      ],
      "deprecationMessage": "This option is deprecated, use `pool` under `jobs` instead",
      "description": "Queue details"
    },
    "phaseServerTarget": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "additionalProperties": false,
          "properties": {
            "cancelTimeoutInMinutes": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Time to wait for the job to cancel before forcibly terminating it"
            },
            "matrix": {
              "$ref": "#/definitions/phaseTargetMatrix"
            },
            "parallel": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Maximum number of parallel agent executions"
            },
            "timeoutInMinutes": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Time to wait before cancelling the job"
            }
          },
          "type": "object"
        }
      ]
    },
    "phaseTargetDemands": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "items": {
            "$ref": "#/definitions/nonEmptyString"
          },
          "type": "array"
        }
      ]
    },
    "phaseTargetMatrix": {
      "anyOf": [
        {
          "additionalProperties": true,
          "type": "object"
        },
        {
          "type": "string"
        }
      ],
      "description": "List of permutations of variable values to run",
      "minProperties": 1,
      "patternProperties": {
        "^[A-Za-z0-9_]+$": {
          "$ref": "#/definitions/matrixProperties"
        }
      }
    },
    "phaseTargetWorkspace": {
      "additionalProperties": false,
      "properties": {
        "clean": {
          "$ref": "#/definitions/string",
          "description": "Scorch the repo before fetching?",
          "enum": [
            "outputs",
            "resources",
            "all"
          ]
        }
      },
      "type": "object"
    },
    "phases": {
      "deprecationMessage": "This option is deprecated, use `jobs` instead",
      "items": {
        "$ref": "#/definitions/phase"
      },
      "type": "array"
    },
    "pipeline": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "appendCommitMessageToRunName": {
              "$ref": "#/definitions/boolean",
              "description": "Append the commit message to the build number"
            },
            "lockBehavior": {
              "$ref": "#/definitions/lockBehavior",
              "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests"
            },
            "name": {
              "$ref": "#/definitions/string_allowExpressions",
              "description": "Pipeline name"
            },
            "parameters": {
              "$ref": "#/definitions/pipelineTemplateParameters",
              "description": "Pipeline template parameters"
            },
            "pool": {
              "$ref": "#/definitions/pool",
              "description": "Pool where jobs in this pipeline will run unless otherwise specified"
            },
            "pr": {
              "$ref": "#/definitions/pr",
              "description": "Pull request triggers"
            },
            "resources": {
              "$ref": "#/definitions/resources",
              "description": "Containers and repositories used in the build"
            },
            "schedules": {
              "$ref": "#/definitions/schedules"
            },
            "stages": {
              "$ref": "#/definitions/stages",
              "description": "Stages are groups of jobs that can run without human intervention"
            },
            "trigger": {
              "$ref": "#/definitions/trigger",
              "description": "Continuous integration triggers"
            },
            "variables": {
              "$ref": "#/definitions/variables",
              "description": "Variables for this pipeline"
            }
          },
          "required": [
            "stages"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "appendCommitMessageToRunName": {
              "$ref": "#/definitions/boolean",
              "description": "Append the commit message to the build number"
            },
            "extends": {
              "$ref": "#/definitions/extends",
              "description": "Extends a template"
            },
            "lockBehavior": {
              "$ref": "#/definitions/lockBehavior",
              "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests"
            },
            "name": {
              "$ref": "#/definitions/string_allowExpressions",
              "description": "Pipeline name"
            },
            "parameters": {
              "$ref": "#/definitions/pipelineTemplateParameters",
              "description": "Pipeline template parameters"
            },
            "pool": {
              "$ref": "#/definitions/pool",
              "description": "Pool where jobs in this pipeline will run unless otherwise specified"
            },
            "pr": {
              "$ref": "#/definitions/pr",
              "description": "Pull request triggers"
            },
            "resources": {
              "$ref": "#/definitions/resources",
              "description": "Containers and repositories used in the build"
            },
            "schedules": {
              "$ref": "#/definitions/schedules"
            },
            "trigger": {
              "$ref": "#/definitions/trigger",
              "description": "Continuous integration triggers"
            },
            "variables": {
              "$ref": "#/definitions/variables",
              "description": "Variables for this pipeline"
            }
          },
          "required": [
            "extends"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "appendCommitMessageToRunName": {
              "$ref": "#/definitions/boolean",
              "description": "Append the commit message to the build number"
            },
            "jobs": {
              "$ref": "#/definitions/jobs",
              "description": "Jobs represent units of work which can be assigned to a single agent or server"
            },
            "lockBehavior": {
              "$ref": "#/definitions/lockBehavior",
              "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests"
            },
            "name": {
              "$ref": "#/definitions/string_allowExpressions",
              "description": "Pipeline name"
            },
            "parameters": {
              "$ref": "#/definitions/pipelineTemplateParameters",
              "description": "Pipeline template parameters"
            },
            "pool": {
              "$ref": "#/definitions/pool",
              "description": "Pool where jobs in this pipeline will run unless otherwise specified"
            },
            "pr": {
              "$ref": "#/definitions/pr",
              "description": "Pull request triggers"
            },
            "resources": {
              "$ref": "#/definitions/resources",
              "description": "Containers and repositories used in the build"
            },
            "schedules": {
              "$ref": "#/definitions/schedules"
            },
            "trigger": {
              "$ref": "#/definitions/trigger",
              "description": "Continuous integration triggers"
            },
            "variables": {
              "$ref": "#/definitions/variables",
              "description": "Variables for this pipeline"
            }
          },
          "required": [
            "jobs"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "appendCommitMessageToRunName": {
              "$ref": "#/definitions/boolean",
              "description": "Append the commit message to the build number"
            },
            "lockBehavior": {
              "$ref": "#/definitions/lockBehavior",
              "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests"
            },
            "name": {
              "$ref": "#/definitions/string_allowExpressions",
              "description": "Pipeline name"
            },
            "parameters": {
              "$ref": "#/definitions/pipelineTemplateParameters",
              "description": "Pipeline template parameters"
            },
            "phases": {
              "$ref": "#/definitions/phases",
              "deprecationMessage": "This option is deprecated, use `jobs` instead",
              "description": "Phases which make up the pipeline",
              "doNotSuggest": true
            },
            "pr": {
              "$ref": "#/definitions/pr",
              "description": "Pull request triggers"
            },
            "resources": {
              "$ref": "#/definitions/resources",
              "description": "Containers and repositories used in the build"
            },
            "schedules": {
              "$ref": "#/definitions/schedules"
            },
            "trigger": {
              "$ref": "#/definitions/trigger",
              "description": "Continuous integration triggers"
            },
            "variables": {
              "$ref": "#/definitions/variables",
              "description": "Variables for this pipeline"
            }
          },
          "required": [
            "phases"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "appendCommitMessageToRunName": {
              "$ref": "#/definitions/boolean",
              "description": "Append the commit message to the build number"
            },
            "container": {
              "$ref": "#/definitions/jobContainer",
              "description": "Container resource name"
            },
            "continueOnError": {
              "$ref": "#/definitions/jobContinueOnError",
              "description": "Continue running even on failure?"
            },
            "lockBehavior": {
              "$ref": "#/definitions/lockBehavior",
              "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests"
            },
            "name": {
              "$ref": "#/definitions/string_allowExpressions",
              "description": "Pipeline name"
            },
            "parameters": {
              "$ref": "#/definitions/pipelineTemplateParameters",
              "description": "Pipeline template parameters"
            },
            "pool": {
              "$ref": "#/definitions/pool",
              "description": "Pool where this job will run"
            },
            "pr": {
              "$ref": "#/definitions/pr",
              "description": "Pull request triggers"
            },
            "resources": {
              "$ref": "#/definitions/resources",
              "description": "Containers and repositories used in the build"
            },
            "schedules": {
              "$ref": "#/definitions/schedules"
            },
            "services": {
              "$ref": "#/definitions/jobServices"
            },
            "steps": {
              "$ref": "#/definitions/steps",
              "description": "A list of steps to run in this job"
            },
            "strategy": {
              "$ref": "#/definitions/jobStrategy",
              "description": "Execution strategy for this job"
            },
            "trigger": {
              "$ref": "#/definitions/trigger",
              "description": "Continuous integration triggers"
            },
            "variables": {
              "$ref": "#/definitions/variables",
              "description": "Variables for this pipeline"
            },
            "workspace": {
              "$ref": "#/definitions/jobWorkspace"
            }
          },
          "required": [
            "steps"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "deprecationMessage": "This option is deprecated, use `job` (inside `jobs`) instead",
          "properties": {
            "appendCommitMessageToRunName": {
              "$ref": "#/definitions/boolean",
              "description": "Append the commit message to the build number"
            },
            "continueOnError": {
              "$ref": "#/definitions/jobContinueOnError",
              "description": "Continue running even on failure?"
            },
            "lockBehavior": {
              "$ref": "#/definitions/lockBehavior",
              "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests"
            },
            "name": {
              "$ref": "#/definitions/string_allowExpressions",
              "description": "Pipeline name"
            },
            "parameters": {
              "$ref": "#/definitions/pipelineTemplateParameters",
              "description": "Pipeline template parameters"
            },
            "pr": {
              "$ref": "#/definitions/pr",
              "description": "Pull request triggers"
            },
            "queue": {
              "$ref": "#/definitions/phaseQueueTarget",
              "deprecationMessage": "This option is deprecated, use pool instead",
              "description": "Queue where this phase will run",
              "doNotSuggest": true
            },
            "resources": {
              "$ref": "#/definitions/resources",
              "description": "Containers and repositories used in the build"
            },
            "schedules": {
              "$ref": "#/definitions/schedules"
            },
            "steps": {
              "$ref": "#/definitions/steps",
              "description": "A list of steps to run in this phase"
            },
            "trigger": {
              "$ref": "#/definitions/trigger",
              "description": "Continuous integration triggers"
            },
            "variables": {
              "$ref": "#/definitions/variables",
              "description": "Variables for this pipeline"
            }
          },
          "required": [
            "steps"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "deprecationMessage": "This option is deprecated, use `job` (inside `jobs`) instead",
          "properties": {
            "appendCommitMessageToRunName": {
              "$ref": "#/definitions/boolean",
              "description": "Append the commit message to the build number"
            },
            "continueOnError": {
              "$ref": "#/definitions/jobContinueOnError",
              "description": "Continue running even on failure?"
            },
            "lockBehavior": {
              "$ref": "#/definitions/lockBehavior",
              "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests"
            },
            "name": {
              "$ref": "#/definitions/string_allowExpressions",
              "description": "Pipeline name"
            },
            "parameters": {
              "$ref": "#/definitions/pipelineTemplateParameters",
              "description": "Pipeline template parameters"
            },
            "pr": {
              "$ref": "#/definitions/pr",
              "description": "Pull request triggers"
            },
            "resources": {
              "$ref": "#/definitions/resources",
              "description": "Containers and repositories used in the build"
            },
            "schedules": {
              "$ref": "#/definitions/schedules"
            },
            "server": {
              "$ref": "#/definitions/phaseServerTarget",
              "deprecationMessage": "This option is deprecated, use pool:server instead",
              "description": "True if this is an agent-less phase (runs on server)",
              "doNotSuggest": true
            },
            "steps": {
              "$ref": "#/definitions/steps",
              "description": "A list of steps to run in this phase"
            },
            "trigger": {
              "$ref": "#/definitions/trigger",
              "description": "Continuous integration triggers"
            },
            "variables": {
              "$ref": "#/definitions/variables",
              "description": "Variables for this pipeline"
            }
          },
          "required": [
            "steps"
          ],
          "type": "object"
        }
      ]
    },
    "pipelineAnyBase": {
      "additionalProperties": false,
      "properties": {
        "appendCommitMessageToRunName": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Append the commit message to the build number"
        },
        "container": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Container resource name"
        },
        "continueOnError": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Continue running even on failure?"
        },
        "extends": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Extends a template"
        },
        "jobs": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Jobs which make up the pipeline"
        },
        "lockBehavior": {
          "$ref": "#/definitions/lockBehavior",
          "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests"
        },
        "name": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Pipeline name"
        },
        "parameters": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Pipeline template parameters"
        },
        "phases": {
          "$ref": "#/definitions/any_allowExpressions",
          "deprecationMessage": "This option is deprecated, use `jobs` instead",
          "description": "Phases which make up the pipeline",
          "doNotSuggest": true
        },
        "pool": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Pool where this job will run"
        },
        "pr": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Pull request triggers"
        },
        "queue": {
          "$ref": "#/definitions/any_allowExpressions",
          "deprecationMessage": "This option is deprecated, use pool instead",
          "description": "Queue where this phase will run",
          "doNotSuggest": true
        },
        "resources": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Containers and repositories used in the build"
        },
        "schedules": {
          "$ref": "#/definitions/any_allowExpressions"
        },
        "server": {
          "$ref": "#/definitions/any_allowExpressions",
          "deprecationMessage": "This option is deprecated, use pool:server instead",
          "description": "True if this is an agent-less phase (runs on server)",
          "doNotSuggest": true
        },
        "services": {
          "$ref": "#/definitions/any_allowExpressions"
        },
        "stages": {
          "$ref": "#/definitions/any_allowExpressions"
        },
        "steps": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "A list of steps to run"
        },
        "strategy": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Execution strategy for the job"
        },
        "trigger": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Continuous integration triggers"
        },
        "variables": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Variables for the entire pipeline"
        },
        "workspace": {
          "$ref": "#/definitions/any_allowExpressions"
        }
      },
      "type": "object"
    },
    "pipelineBase": {
      "additionalProperties": false,
      "properties": {
        "appendCommitMessageToRunName": {
          "$ref": "#/definitions/boolean",
          "description": "Append the commit message to the build number"
        },
        "lockBehavior": {
          "$ref": "#/definitions/lockBehavior",
          "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests"
        },
        "name": {
          "$ref": "#/definitions/string_allowExpressions",
          "description": "Pipeline name"
        },
        "parameters": {
          "$ref": "#/definitions/pipelineTemplateParameters",
          "description": "Pipeline template parameters"
        },
        "pr": {
          "$ref": "#/definitions/pr",
          "description": "Pull request triggers"
        },
        "resources": {
          "$ref": "#/definitions/resources",
          "description": "Containers and repositories used in the build"
        },
        "schedules": {
          "$ref": "#/definitions/schedules"
        },
        "trigger": {
          "$ref": "#/definitions/trigger",
          "description": "Continuous integration triggers"
        },
        "variables": {
          "$ref": "#/definitions/variables",
          "description": "Variables for this pipeline"
        }
      },
      "type": "object"
    },
    "pipelinePR": {
      "additionalProperties": false,
      "properties": {
        "appendCommitMessageToRunName": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Append the commit message to the build number"
        },
        "container": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Container resource name"
        },
        "continueOnError": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Continue running even on failure?"
        },
        "extends": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Extends a template"
        },
        "jobs": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Jobs which make up the pipeline"
        },
        "lockBehavior": {
          "$ref": "#/definitions/lockBehavior",
          "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests"
        },
        "name": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Pipeline name"
        },
        "parameters": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Pipeline template parameters"
        },
        "phases": {
          "$ref": "#/definitions/any_allowExpressions",
          "deprecationMessage": "This option is deprecated, use `jobs` instead",
          "description": "Phases which make up the pipeline",
          "doNotSuggest": true
        },
        "pool": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Pool where this job will run"
        },
        "pr": {
          "$ref": "#/definitions/pr",
          "description": "Pull request triggers"
        },
        "queue": {
          "$ref": "#/definitions/any_allowExpressions",
          "deprecationMessage": "This option is deprecated, use pool instead",
          "description": "Queue where this phase will run",
          "doNotSuggest": true
        },
        "resources": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Containers and repositories used in the build"
        },
        "schedules": {
          "$ref": "#/definitions/any_allowExpressions"
        },
        "server": {
          "$ref": "#/definitions/any_allowExpressions",
          "deprecationMessage": "This option is deprecated, use pool:server instead",
          "description": "True if this is an agent-less phase (runs on server)",
          "doNotSuggest": true
        },
        "services": {
          "$ref": "#/definitions/any_allowExpressions"
        },
        "stages": {
          "$ref": "#/definitions/any_allowExpressions"
        },
        "steps": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "A list of steps to run"
        },
        "strategy": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Execution strategy for the job"
        },
        "trigger": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Continuous integration triggers"
        },
        "variables": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Variables for the entire pipeline"
        },
        "workspace": {
          "$ref": "#/definitions/any_allowExpressions"
        }
      },
      "type": "object"
    },
    "pipelineParameters": {
      "additionalProperties": false,
      "properties": {
        "appendCommitMessageToRunName": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Append the commit message to the build number"
        },
        "container": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Container resource name"
        },
        "continueOnError": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Continue running even on failure?"
        },
        "extends": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Extends a template"
        },
        "jobs": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Jobs which make up the pipeline"
        },
        "lockBehavior": {
          "$ref": "#/definitions/lockBehavior",
          "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests"
        },
        "name": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Pipeline name"
        },
        "parameters": {
          "$ref": "#/definitions/pipelineTemplateParameters",
          "description": "Pipeline template parameters"
        },
        "phases": {
          "$ref": "#/definitions/any_allowExpressions",
          "deprecationMessage": "This option is deprecated, use `jobs` instead",
          "description": "Phases which make up the pipeline",
          "doNotSuggest": true
        },
        "pool": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Pool where this job will run"
        },
        "pr": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Pull request triggers"
        },
        "queue": {
          "$ref": "#/definitions/any_allowExpressions",
          "deprecationMessage": "This option is deprecated, use pool instead",
          "description": "Queue where this phase will run",
          "doNotSuggest": true
        },
        "resources": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Containers and repositories used in the build"
        },
        "schedules": {
          "$ref": "#/definitions/any_allowExpressions"
        },
        "server": {
          "$ref": "#/definitions/any_allowExpressions",
          "deprecationMessage": "This option is deprecated, use pool:server instead",
          "description": "True if this is an agent-less phase (runs on server)",
          "doNotSuggest": true
        },
        "services": {
          "$ref": "#/definitions/any_allowExpressions"
        },
        "stages": {
          "$ref": "#/definitions/any_allowExpressions"
        },
        "steps": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "A list of steps to run"
        },
        "strategy": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Execution strategy for the job"
        },
        "trigger": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Continuous integration triggers"
        },
        "variables": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Variables for the entire pipeline"
        },
        "workspace": {
          "$ref": "#/definitions/any_allowExpressions"
        }
      },
      "type": "object"
    },
    "pipelineResource": {
      "additionalProperties": false,
      "firstProperty": [
        "pipeline"
      ],
      "properties": {
        "branch": {
          "$ref": "#/definitions/string_allowExpressions"
        },
        "pipeline": {
          "$ref": "#/definitions/referenceName",
          "description": "ID of the pipeline resource"
        },
        "project": {
          "$ref": "#/definitions/nonEmptyString"
        },
        "source": {
          "$ref": "#/definitions/nonEmptyString"
        },
        "tags": {
          "$ref": "#/definitions/sequenceOfNonEmptyString"
        },
        "trigger": {
          "$ref": "#/definitions/pipelineResourceTrigger"
        },
        "version": {
          "$ref": "#/definitions/string_allowExpressions"
        }
      },
      "required": [
        "pipeline"
      ],
      "type": "object"
    },
    "pipelineResourceTrigger": {
      "anyOf": [
        {
          "pattern": "^none$",
          "type": "string"
        },
        {
          "pattern": "^true$",
          "type": "string"
        },
        {
          "additionalProperties": false,
          "properties": {
            "branches": {
              "$ref": "#/definitions/triggerBranchFilter"
            },
            "enabled": {
              "$ref": "#/definitions/boolean"
            },
            "stages": {
              "$ref": "#/definitions/sequenceOfNonEmptyString"
            },
            "tags": {
              "$ref": "#/definitions/sequenceOfNonEmptyString"
            }
          },
          "type": "object"
        }
      ]
    },
    "pipelineResources": {
      "items": {
        "$ref": "#/definitions/pipelineResource"
      },
      "type": "array"
    },
    "pipelineSchedules": {
      "additionalProperties": false,
      "properties": {
        "appendCommitMessageToRunName": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Append the commit message to the build number"
        },
        "container": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Container resource name"
        },
        "continueOnError": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Continue running even on failure?"
        },
        "extends": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Extends a template"
        },
        "jobs": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Jobs which make up the pipeline"
        },
        "lockBehavior": {
          "$ref": "#/definitions/lockBehavior",
          "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests"
        },
        "name": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Pipeline name"
        },
        "parameters": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Pipeline template parameters"
        },
        "phases": {
          "$ref": "#/definitions/any_allowExpressions",
          "deprecationMessage": "This option is deprecated, use `jobs` instead",
          "description": "Phases which make up the pipeline",
          "doNotSuggest": true
        },
        "pool": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Pool where this job will run"
        },
        "pr": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Pull request triggers"
        },
        "queue": {
          "$ref": "#/definitions/any_allowExpressions",
          "deprecationMessage": "This option is deprecated, use pool instead",
          "description": "Queue where this phase will run",
          "doNotSuggest": true
        },
        "resources": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Containers and repositories used in the build"
        },
        "schedules": {
          "$ref": "#/definitions/schedules"
        },
        "server": {
          "$ref": "#/definitions/any_allowExpressions",
          "deprecationMessage": "This option is deprecated, use pool:server instead",
          "description": "True if this is an agent-less phase (runs on server)",
          "doNotSuggest": true
        },
        "services": {
          "$ref": "#/definitions/any_allowExpressions"
        },
        "stages": {
          "$ref": "#/definitions/any_allowExpressions"
        },
        "steps": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "A list of steps to run"
        },
        "strategy": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Execution strategy for the job"
        },
        "trigger": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Continuous integration triggers"
        },
        "variables": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Variables for the entire pipeline"
        },
        "workspace": {
          "$ref": "#/definitions/any_allowExpressions"
        }
      },
      "type": "object"
    },
    "pipelineTemplateParameter": {
      "additionalProperties": false,
      "firstProperty": [
        "name"
      ],
      "properties": {
        "default": {
          "$ref": "#/definitions/any"
        },
        "displayName": {
          "$ref": "#/definitions/string",
          "description": "Human-readable name for the parameter"
        },
        "name": {
          "$ref": "#/definitions/nonEmptyString"
        },
        "type": {
          "$ref": "#/definitions/pipelineTemplateParameterType"
        },
        "values": {
          "$ref": "#/definitions/sequenceOfNonEmptyString"
        }
      },
      "type": "object"
    },
    "pipelineTemplateParameterType": {
      "anyOf": [
        {
          "pattern": "^boolean$",
          "type": "string"
        },
        {
          "pattern": "^container$",
          "type": "string"
        },
        {
          "pattern": "^containerList$",
          "type": "string"
        },
        {
          "pattern": "^deployment$",
          "type": "string"
        },
        {
          "pattern": "^deploymentList$",
          "type": "string"
        },
        {
          "pattern": "^environment$",
          "type": "string"
        },
        {
          "pattern": "^filePath$",
          "type": "string"
        },
        {
          "pattern": "^job$",
          "type": "string"
        },
        {
          "pattern": "^jobList$",
          "type": "string"
        },
        {
          "pattern": "^number$",
          "type": "string"
        },
        {
          "pattern": "^object$",
          "type": "string"
        },
        {
          "pattern": "^pool$",
          "type": "string"
        },
        {
          "pattern": "^secureFile$",
          "type": "string"
        },
        {
          "pattern": "^serviceConnection$",
          "type": "string"
        },
        {
          "pattern": "^stage$",
          "type": "string"
        },
        {
          "pattern": "^stageList$",
          "type": "string"
        },
        {
          "pattern": "^step$",
          "type": "string"
        },
        {
          "pattern": "^stepList$",
          "type": "string"
        },
        {
          "pattern": "^string$",
          "type": "string"
        }
      ]
    },
    "pipelineTemplateParameters": {
      "items": {
        "$ref": "#/definitions/pipelineTemplateParameter"
      },
      "type": "array"
    },
    "pipelineTrigger": {
      "additionalProperties": false,
      "properties": {
        "appendCommitMessageToRunName": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Append the commit message to the build number"
        },
        "container": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Container resource name"
        },
        "continueOnError": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Continue running even on failure?"
        },
        "extends": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Extends a template"
        },
        "jobs": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Jobs which make up the pipeline"
        },
        "lockBehavior": {
          "$ref": "#/definitions/lockBehavior",
          "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests"
        },
        "name": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Pipeline name"
        },
        "parameters": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Pipeline template parameters"
        },
        "phases": {
          "$ref": "#/definitions/any_allowExpressions",
          "deprecationMessage": "This option is deprecated, use `jobs` instead",
          "description": "Phases which make up the pipeline",
          "doNotSuggest": true
        },
        "pool": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Pool where this job will run"
        },
        "pr": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Pull request triggers"
        },
        "queue": {
          "$ref": "#/definitions/any_allowExpressions",
          "deprecationMessage": "This option is deprecated, use pool instead",
          "description": "Queue where this phase will run",
          "doNotSuggest": true
        },
        "resources": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Containers and repositories used in the build"
        },
        "schedules": {
          "$ref": "#/definitions/any_allowExpressions"
        },
        "server": {
          "$ref": "#/definitions/any_allowExpressions",
          "deprecationMessage": "This option is deprecated, use pool:server instead",
          "description": "True if this is an agent-less phase (runs on server)",
          "doNotSuggest": true
        },
        "services": {
          "$ref": "#/definitions/any_allowExpressions"
        },
        "stages": {
          "$ref": "#/definitions/any_allowExpressions"
        },
        "steps": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "A list of steps to run"
        },
        "strategy": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Execution strategy for the job"
        },
        "trigger": {
          "$ref": "#/definitions/trigger",
          "description": "Continuous integration triggers"
        },
        "variables": {
          "$ref": "#/definitions/any_allowExpressions",
          "description": "Variables for the entire pipeline"
        },
        "workspace": {
          "$ref": "#/definitions/any_allowExpressions"
        }
      },
      "type": "object"
    },
    "pool": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "additionalProperties": true,
          "properties": {
            "demands": {
              "$ref": "#/definitions/poolDemands",
              "description": "List of demands (for a private pool)"
            },
            "name": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Name of a pool"
            }
          },
          "type": "object"
        }
      ],
      "description": "Pool details"
    },
    "poolDemands": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "items": {
            "$ref": "#/definitions/nonEmptyString"
          },
          "type": "array"
        }
      ]
    },
    "postRouteTrafficHook": {
      "additionalProperties": false,
      "properties": {
        "pool": {
          "$ref": "#/definitions/pool",
          "description": "Pool where post route traffic steps will run"
        },
        "steps": {
          "$ref": "#/definitions/steps",
          "description": "A list of steps to run"
        }
      },
      "type": "object"
    },
    "pr": {
      "anyOf": [
        {
          "pattern": "^none$",
          "type": "string"
        },
        {
          "items": {
            "$ref": "#/definitions/branchFilter"
          },
          "type": "array"
        },
        {
          "additionalProperties": false,
          "properties": {
            "autoCancel": {
              "$ref": "#/definitions/boolean",
              "description": "Whether to cancel running PR builds when a new commit lands in the branch"
            },
            "branches": {
              "$ref": "#/definitions/includeExcludeFilters"
            },
            "drafts": {
              "$ref": "#/definitions/boolean",
              "description": "Whether to start a run when a draft PR is created"
            },
            "paths": {
              "$ref": "#/definitions/includeExcludeFilters"
            }
          },
          "type": "object"
        }
      ]
    },
    "preDeployHook": {
      "additionalProperties": false,
      "properties": {
        "pool": {
          "$ref": "#/definitions/pool",
          "description": "Pool where pre deploy steps will run"
        },
        "steps": {
          "$ref": "#/definitions/steps",
          "description": "A list of steps to run"
        }
      },
      "type": "object"
    },
    "readOnlyMounts": {
      "additionalProperties": false,
      "properties": {
        "externals": {
          "$ref": "#/definitions/boolean",
          "description": "Mount the externals directory as readonly"
        },
        "tasks": {
          "$ref": "#/definitions/boolean",
          "description": "Mount the tasks directory as readonly"
        },
        "tools": {
          "$ref": "#/definitions/boolean",
          "description": "Mount the tools directory as readonly"
        },
        "work": {
          "$ref": "#/definitions/boolean",
          "description": "Mount the work directory as readonly"
        }
      },
      "type": "object"
    },
    "referenceName": {
      "pattern": "^[-_A-Za-z0-9]*$",
      "type": "string"
    },
    "repositoryCheckoutOptions": {
      "additionalProperties": false,
      "properties": {
        "clean": {
          "$ref": "#/definitions/string",
          "description": "Scorch the repo before fetching?",
          "enum": [
            "true",
            "false"
          ]
        },
        "fetchDepth": {
          "$ref": "#/definitions/string",
          "description": "Depth of Git graph to fetch"
        },
        "fetchTags": {
          "$ref": "#/definitions/string",
          "description": "Fetch tags?"
        },
        "lfs": {
          "$ref": "#/definitions/string",
          "description": "Fetch and checkout Git LFS objects?"
        },
        "persistCredentials": {
          "$ref": "#/definitions/string",
          "description": "Keep credentials available for later use?"
        },
        "submodules": {
          "$ref": "#/definitions/string",
          "description": "Fetch and checkout submodules?"
        }
      },
      "type": "object"
    },
    "repositoryResource": {
      "additionalProperties": true,
      "firstProperty": [
        "repository"
      ],
      "properties": {
        "checkoutOptions": {
          "$ref": "#/definitions/repositoryCheckoutOptions",
          "deprecationMessage": "This location is deprecated, `checkoutOptions` should be a peer of the `repository` keyword.",
          "doNotSuggest": true
        },
        "endpoint": {
          "$ref": "#/definitions/nonEmptyString",
          "description": "ID of the service endpoint connecting to this repository"
        },
        "ref": {
          "$ref": "#/definitions/string_allowExpressions"
        },
        "repository": {
          "$ref": "#/definitions/referenceName",
          "description": "ID of the external repository"
        },
        "trigger": {
          "$ref": "#/definitions/trigger"
        }
      },
      "required": [
        "repository"
      ],
      "type": "object"
    },
    "repositoryResources": {
      "items": {
        "$ref": "#/definitions/repositoryResource"
      },
      "type": "array"
    },
    "resources": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "builds": {
              "$ref": "#/definitions/buildResources",
              "description": "List of external build resources"
            },
            "containers": {
              "$ref": "#/definitions/containerResources",
              "description": "List of container images"
            },
            "packages": {
              "$ref": "#/definitions/packageResources",
              "description": "List of external packages"
            },
            "pipelines": {
              "$ref": "#/definitions/pipelineResources"
            },
            "repositories": {
              "$ref": "#/definitions/repositoryResources",
              "description": "List of external repositories"
            },
            "webhooks": {
              "$ref": "#/definitions/webhookResources",
              "description": "List of webhooks"
            }
          },
          "type": "object"
        },
        {
          "items": {
            "$ref": "#/definitions/legacyResource"
          },
          "type": "array"
        }
      ]
    },
    "rollingDeploymentStrategy": {
      "additionalProperties": false,
      "properties": {
        "deploy": {
          "$ref": "#/definitions/deployHook",
          "description": "Deploy hook for rolling deployment strategy"
        },
        "maxParallel": {
          "$ref": "#/definitions/nonEmptyString",
          "description": "Maximum number of jobs running in parallel"
        },
        "on": {
          "$ref": "#/definitions/onSuccessOrFailureHook",
          "description": "On success or failure hook for rolling deployment strategy"
        },
        "postRouteTraffic": {
          "$ref": "#/definitions/postRouteTrafficHook",
          "description": "Post route traffic hook for rolling deployment strategy"
        },
        "preDeploy": {
          "$ref": "#/definitions/preDeployHook",
          "description": "Pre deploy hook for rolling deployment strategy"
        },
        "routeTraffic": {
          "$ref": "#/definitions/routeTrafficHook",
          "description": "Route traffic hook for rolling deployment strategy"
        }
      },
      "type": "object"
    },
    "routeTrafficHook": {
      "additionalProperties": false,
      "properties": {
        "pool": {
          "$ref": "#/definitions/pool",
          "description": "Pool where route traffic steps will run"
        },
        "steps": {
          "$ref": "#/definitions/steps",
          "description": "A list of steps to run"
        }
      },
      "type": "object"
    },
    "runOnceDeploymentStrategy": {
      "additionalProperties": false,
      "properties": {
        "deploy": {
          "$ref": "#/definitions/deployHook",
          "description": "Deploy hook for runOnce deployment strategy"
        },
        "on": {
          "$ref": "#/definitions/onSuccessOrFailureHook",
          "description": "On success or failure hook for runOnce deployment strategy"
        },
        "postRouteTraffic": {
          "$ref": "#/definitions/postRouteTrafficHook",
          "description": "Post route traffic hook for runOnce deployment strategy"
        },
        "preDeploy": {
          "$ref": "#/definitions/preDeployHook",
          "description": "Pre deploy hook for runOnce deployment strategy"
        },
        "routeTraffic": {
          "$ref": "#/definitions/routeTrafficHook",
          "description": "Route traffic hook for runOnce deployment strategy"
        }
      },
      "type": "object"
    },
    "schedule": {
      "additionalProperties": false,
      "firstProperty": [
        "cron"
      ],
      "properties": {
        "always": {
          "$ref": "#/definitions/boolean"
        },
        "batch": {
          "$ref": "#/definitions/boolean"
        },
        "branches": {
          "$ref": "#/definitions/includeExcludeFilters"
        },
        "cron": {
          "$ref": "#/definitions/nonEmptyString"
        },
        "displayName": {
          "$ref": "#/definitions/string"
        }
      },
      "type": "object"
    },
    "schedules": {
      "items": {
        "$ref": "#/definitions/schedule"
      },
      "type": "array"
    },
    "sequence": {
      "items": {
        "$ref": "#/definitions/any"
      },
      "type": "array"
    },
    "sequenceOfNonEmptyString": {
      "items": {
        "$ref": "#/definitions/nonEmptyString"
      },
      "type": "array"
    },
    "sequenceOfString_allowExpressions": {
      "items": {
        "$ref": "#/definitions/string_allowExpressions"
      },
      "type": "array"
    },
    "stage": {
      "anyOf": [
        {
          "additionalProperties": false,
          "firstProperty": [
            "stage"
          ],
          "properties": {
            "condition": {
              "$ref": "#/definitions/string",
              "description": "Evaluate this condition expression to determine whether to run this stage"
            },
            "dependsOn": {
              "$ref": "#/definitions/jobDependsOn",
              "description": "Any stages which must complete before this one"
            },
            "displayName": {
              "$ref": "#/definitions/string",
              "description": "Human-readable name for the stage"
            },
            "jobs": {
              "$ref": "#/definitions/jobs",
              "description": "Jobs which make up the stage"
            },
            "lockBehavior": {
              "$ref": "#/definitions/lockBehavior",
              "description": "Behavior lock requests from this stage should exhibit in relation to other exclusive lock requests"
            },
            "pool": {
              "$ref": "#/definitions/pool",
              "description": "Pool where jobs in this stage will run unless otherwise specified"
            },
            "stage": {
              "$ref": "#/definitions/string",
              "description": "ID of the stage"
            },
            "templateContext": {
              "$ref": "#/definitions/templateContext"
            },
            "variables": {
              "$ref": "#/definitions/variables",
              "description": "Stage-specific variables"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "firstProperty": [
            "template"
          ],
          "properties": {
            "parameters": {
              "$ref": "#/definitions/mapping",
              "description": "Parameters used in a stage template"
            },
            "template": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Reference to a template for this stage"
            }
          },
          "type": "object"
        }
      ]
    },
    "stages": {
      "items": {
        "$ref": "#/definitions/stage"
      },
      "type": "array"
    },
    "stagesTemplate": {
      "additionalProperties": false,
      "properties": {
        "parameters": {
          "$ref": "#/definitions/templateParameters"
        },
        "stages": {
          "$ref": "#/definitions/stages"
        }
      },
      "type": "object"
    },
    "step": {
      "anyOf": [
        {
          "$ref": "#/definitions/task",
          "type": "object"
        },
        {
          "additionalProperties": false,
          "firstProperty": [
            "script"
          ],
          "properties": {
            "condition": {
              "$ref": "#/definitions/string",
              "description": "Evaluate this condition expression to determine whether to run this task"
            },
            "continueOnError": {
              "$ref": "#/definitions/boolean",
              "description": "Continue running even on failure?"
            },
            "displayName": {
              "$ref": "#/definitions/string",
              "description": "Human-readable name for the task"
            },
            "enabled": {
              "$ref": "#/definitions/boolean",
              "description": "Run this task when the job runs?"
            },
            "env": {
              "$ref": "#/definitions/mappingOfStringString",
              "description": "Variables to map into the process's environment"
            },
            "failOnStderr": {
              "$ref": "#/definitions/string",
              "description": "Fail the task if output is sent to Stderr?"
            },
            "name": {
              "$ref": "#/definitions/referenceName",
              "description": "ID of the step"
            },
            "retryCountOnTaskFailure": {
              "$ref": "#/definitions/string",
              "description": "Number of retries if the task fails"
            },
            "script": {
              "$ref": "#/definitions/string",
              "description": "An inline script"
            },
            "target": {
              "$ref": "#/definitions/stepTarget",
              "description": "Environment in which to run this task"
            },
            "timeoutInMinutes": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Time to wait for this task to complete before the server kills it"
            },
            "workingDirectory": {
              "$ref": "#/definitions/string",
              "description": "Start the script with this working directory"
            }
          },
          "required": [
            "script"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "firstProperty": [
            "powershell"
          ],
          "properties": {
            "condition": {
              "$ref": "#/definitions/string",
              "description": "Evaluate this condition expression to determine whether to run this task"
            },
            "continueOnError": {
              "$ref": "#/definitions/boolean",
              "description": "Continue running even on failure?"
            },
            "displayName": {
              "$ref": "#/definitions/string",
              "description": "Human-readable name for the task"
            },
            "enabled": {
              "$ref": "#/definitions/boolean",
              "description": "Run this task when the job runs?"
            },
            "env": {
              "$ref": "#/definitions/mappingOfStringString",
              "description": "Variables to map into the process's environment"
            },
            "errorActionPreference": {
              "$ref": "#/definitions/string"
            },
            "failOnStderr": {
              "$ref": "#/definitions/string",
              "description": "Fail the task if output is sent to Stderr?"
            },
            "ignoreLASTEXITCODE": {
              "$ref": "#/definitions/string",
              "description": "Check the final exit code of the script to determine whether the step succeeded?"
            },
            "name": {
              "$ref": "#/definitions/referenceName",
              "description": "ID of the step"
            },
            "powershell": {
              "$ref": "#/definitions/string",
              "description": "Inline PowerShell or reference to a PowerShell file"
            },
            "retryCountOnTaskFailure": {
              "$ref": "#/definitions/string",
              "description": "Number of retries if the task fails"
            },
            "target": {
              "$ref": "#/definitions/stepTarget",
              "description": "Environment in which to run this task"
            },
            "timeoutInMinutes": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Time to wait for this task to complete before the server kills it"
            },
            "workingDirectory": {
              "$ref": "#/definitions/string",
              "description": "Start the script with this working directory"
            }
          },
          "required": [
            "powershell"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "firstProperty": [
            "pwsh"
          ],
          "properties": {
            "condition": {
              "$ref": "#/definitions/string",
              "description": "Evaluate this condition expression to determine whether to run this task"
            },
            "continueOnError": {
              "$ref": "#/definitions/boolean",
              "description": "Continue running even on failure?"
            },
            "displayName": {
              "$ref": "#/definitions/string",
              "description": "Human-readable name for the task"
            },
            "enabled": {
              "$ref": "#/definitions/boolean",
              "description": "Run this task when the job runs?"
            },
            "env": {
              "$ref": "#/definitions/mappingOfStringString",
              "description": "Variables to map into the process's environment"
            },
            "errorActionPreference": {
              "$ref": "#/definitions/string"
            },
            "failOnStderr": {
              "$ref": "#/definitions/string",
              "description": "Fail the task if output is sent to Stderr?"
            },
            "ignoreLASTEXITCODE": {
              "$ref": "#/definitions/string",
              "description": "Check the final exit code of the script to determine whether the step succeeded?"
            },
            "name": {
              "$ref": "#/definitions/referenceName",
              "description": "ID of the step"
            },
            "pwsh": {
              "$ref": "#/definitions/string",
              "description": "Inline PowerShell or reference to a PowerShell file"
            },
            "retryCountOnTaskFailure": {
              "$ref": "#/definitions/string",
              "description": "Number of retries if the task fails"
            },
            "target": {
              "$ref": "#/definitions/stepTarget",
              "description": "Environment in which to run this task"
            },
            "timeoutInMinutes": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Time to wait for this task to complete before the server kills it"
            },
            "workingDirectory": {
              "$ref": "#/definitions/string",
              "description": "Start the script with this working directory"
            }
          },
          "required": [
            "pwsh"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "firstProperty": [
            "bash"
          ],
          "properties": {
            "bash": {
              "$ref": "#/definitions/string",
              "description": "An inline script"
            },
            "condition": {
              "$ref": "#/definitions/string",
              "description": "Evaluate this condition expression to determine whether to run this task"
            },
            "continueOnError": {
              "$ref": "#/definitions/boolean",
              "description": "Continue running even on failure?"
            },
            "displayName": {
              "$ref": "#/definitions/string",
              "description": "Human-readable name for the task"
            },
            "enabled": {
              "$ref": "#/definitions/boolean",
              "description": "Run this task when the job runs?"
            },
            "env": {
              "$ref": "#/definitions/mappingOfStringString",
              "description": "Variables to map into the process's environment"
            },
            "failOnStderr": {
              "$ref": "#/definitions/string",
              "description": "Fail the task if output is sent to Stderr?"
            },
            "name": {
              "$ref": "#/definitions/referenceName",
              "description": "ID of the step"
            },
            "retryCountOnTaskFailure": {
              "$ref": "#/definitions/string",
              "description": "Number of retries if the task fails"
            },
            "target": {
              "$ref": "#/definitions/stepTarget",
              "description": "Environment in which to run this task"
            },
            "timeoutInMinutes": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Time to wait for this task to complete before the server kills it"
            },
            "workingDirectory": {
              "$ref": "#/definitions/string",
              "description": "Start the script with this working directory"
            }
          },
          "required": [
            "bash"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "firstProperty": [
            "checkout"
          ],
          "properties": {
            "checkout": {
              "$ref": "#/definitions/string",
              "description": "Alias of the repository resource to check out or 'none'"
            },
            "clean": {
              "$ref": "#/definitions/string",
              "description": "Scorch the repo before fetching?",
              "enum": [
                "true",
                "false"
              ]
            },
            "condition": {
              "$ref": "#/definitions/string",
              "description": "Evaluate this condition expression to determine whether to run this task"
            },
            "continueOnError": {
              "$ref": "#/definitions/boolean",
              "description": "Continue running even on failure?"
            },
            "displayName": {
              "$ref": "#/definitions/string",
              "description": "Human-readable name for the task"
            },
            "enabled": {
              "$ref": "#/definitions/boolean",
              "description": "Run this task when the job runs?"
            },
            "env": {
              "$ref": "#/definitions/mappingOfStringString",
              "description": "Variables to map into the process's environment"
            },
            "fetchDepth": {
              "$ref": "#/definitions/string",
              "description": "Depth of Git graph to fetch"
            },
            "fetchTags": {
              "$ref": "#/definitions/string",
              "description": "Fetch tags?"
            },
            "lfs": {
              "$ref": "#/definitions/string",
              "description": "Fetch Git-LFS objects?"
            },
            "name": {
              "$ref": "#/definitions/referenceName",
              "description": "ID of the step"
            },
            "path": {
              "$ref": "#/definitions/string",
              "description": "Path of the repository to check out"
            },
            "persistCredentials": {
              "$ref": "#/definitions/string",
              "description": "Keep credentials available for later use?"
            },
            "retryCountOnTaskFailure": {
              "$ref": "#/definitions/string",
              "description": "Number of retries if the task fails"
            },
            "submodules": {
              "$ref": "#/definitions/string",
              "description": "Check out Git submodules?"
            },
            "target": {
              "$ref": "#/definitions/stepTarget",
              "description": "Environment in which to run this task"
            },
            "timeoutInMinutes": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Time to wait for this task to complete before the server kills it"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "firstProperty": [
            "download"
          ],
          "properties": {
            "artifact": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Name of the artifact to download"
            },
            "condition": {
              "$ref": "#/definitions/string",
              "description": "Evaluate this condition expression to determine whether to run this task"
            },
            "continueOnError": {
              "$ref": "#/definitions/boolean",
              "description": "Continue running even on failure?"
            },
            "displayName": {
              "$ref": "#/definitions/string",
              "description": "Human-readable name for the task"
            },
            "download": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Reference to the pipeline"
            },
            "enabled": {
              "$ref": "#/definitions/boolean",
              "description": "Run this task when the job runs?"
            },
            "env": {
              "$ref": "#/definitions/mappingOfStringString",
              "description": "Variables to map into the process's environment"
            },
            "name": {
              "$ref": "#/definitions/referenceName",
              "description": "ID of the step"
            },
            "patterns": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Pattern to download files from artifact"
            },
            "retryCountOnTaskFailure": {
              "$ref": "#/definitions/string",
              "description": "Number of retries if the task fails"
            },
            "target": {
              "$ref": "#/definitions/stepTarget",
              "description": "Environment in which to run this task"
            },
            "timeoutInMinutes": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Time to wait for this task to complete before the server kills it"
            }
          },
          "required": [
            "download"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "firstProperty": [
            "downloadBuild"
          ],
          "properties": {
            "artifact": {
              "$ref": "#/definitions/string",
              "description": "Name of the artifact to download"
            },
            "condition": {
              "$ref": "#/definitions/string",
              "description": "Evaluate this condition expression to determine whether to run this task"
            },
            "continueOnError": {
              "$ref": "#/definitions/boolean",
              "description": "Continue running even on failure?"
            },
            "displayName": {
              "$ref": "#/definitions/string",
              "description": "Human-readable name for the task"
            },
            "downloadBuild": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "ID for the build resource"
            },
            "enabled": {
              "$ref": "#/definitions/boolean",
              "description": "Run this task when the job runs?"
            },
            "env": {
              "$ref": "#/definitions/mappingOfStringString",
              "description": "Variables to map into the process's environment"
            },
            "name": {
              "$ref": "#/definitions/referenceName",
              "description": "ID of the step"
            },
            "path": {
              "$ref": "#/definitions/string",
              "description": "Path to download the artifact into"
            },
            "patterns": {
              "$ref": "#/definitions/string",
              "description": "Downloads the files which matches the patterns"
            },
            "retryCountOnTaskFailure": {
              "$ref": "#/definitions/string",
              "description": "Number of retries if the task fails"
            },
            "target": {
              "$ref": "#/definitions/stepTarget",
              "description": "Environment in which to run this task"
            },
            "timeoutInMinutes": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Time to wait for this task to complete before the server kills it"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "firstProperty": [
            "getPackage"
          ],
          "properties": {
            "condition": {
              "$ref": "#/definitions/string",
              "description": "Evaluate this condition expression to determine whether to run this task"
            },
            "continueOnError": {
              "$ref": "#/definitions/boolean",
              "description": "Continue running even on failure?"
            },
            "displayName": {
              "$ref": "#/definitions/string",
              "description": "Human-readable name for the task"
            },
            "enabled": {
              "$ref": "#/definitions/boolean",
              "description": "Run this task when the job runs?"
            },
            "env": {
              "$ref": "#/definitions/mappingOfStringString",
              "description": "Variables to map into the process's environment"
            },
            "getPackage": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "ID for the package resource"
            },
            "name": {
              "$ref": "#/definitions/referenceName",
              "description": "ID of the step"
            },
            "path": {
              "$ref": "#/definitions/string",
              "description": "Path to download the package into"
            },
            "retryCountOnTaskFailure": {
              "$ref": "#/definitions/string",
              "description": "Number of retries if the task fails"
            },
            "target": {
              "$ref": "#/definitions/stepTarget",
              "description": "Environment in which to run this task"
            },
            "timeoutInMinutes": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Time to wait for this task to complete before the server kills it"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "firstProperty": [
            "upload"
          ],
          "properties": {
            "artifact": {
              "$ref": "#/definitions/string"
            },
            "condition": {
              "$ref": "#/definitions/string",
              "description": "Evaluate this condition expression to determine whether to run this task"
            },
            "continueOnError": {
              "$ref": "#/definitions/boolean",
              "description": "Continue running even on failure?"
            },
            "displayName": {
              "$ref": "#/definitions/string",
              "description": "Human-readable name for the task"
            },
            "enabled": {
              "$ref": "#/definitions/boolean",
              "description": "Run this task when the job runs?"
            },
            "env": {
              "$ref": "#/definitions/mappingOfStringString",
              "description": "Variables to map into the process's environment"
            },
            "name": {
              "$ref": "#/definitions/referenceName",
              "description": "ID of the step"
            },
            "retryCountOnTaskFailure": {
              "$ref": "#/definitions/string",
              "description": "Number of retries if the task fails"
            },
            "target": {
              "$ref": "#/definitions/stepTarget",
              "description": "Environment in which to run this task"
            },
            "timeoutInMinutes": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Time to wait for this task to complete before the server kills it"
            },
            "upload": {
              "$ref": "#/definitions/string",
              "deprecationMessage": "This option is deprecated, use `publish` instead",
              "doNotSuggest": true
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "firstProperty": [
            "publish"
          ],
          "properties": {
            "artifact": {
              "$ref": "#/definitions/string"
            },
            "condition": {
              "$ref": "#/definitions/string",
              "description": "Evaluate this condition expression to determine whether to run this task"
            },
            "continueOnError": {
              "$ref": "#/definitions/boolean",
              "description": "Continue running even on failure?"
            },
            "displayName": {
              "$ref": "#/definitions/string",
              "description": "Human-readable name for the task"
            },
            "enabled": {
              "$ref": "#/definitions/boolean",
              "description": "Run this task when the job runs?"
            },
            "env": {
              "$ref": "#/definitions/mappingOfStringString",
              "description": "Variables to map into the process's environment"
            },
            "name": {
              "$ref": "#/definitions/referenceName",
              "description": "ID of the step"
            },
            "publish": {
              "$ref": "#/definitions/string"
            },
            "retryCountOnTaskFailure": {
              "$ref": "#/definitions/string",
              "description": "Number of retries if the task fails"
            },
            "target": {
              "$ref": "#/definitions/stepTarget",
              "description": "Environment in which to run this task"
            },
            "timeoutInMinutes": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Time to wait for this task to complete before the server kills it"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "firstProperty": [
            "template"
          ],
          "properties": {
            "parameters": {
              "$ref": "#/definitions/mapping",
              "description": "Parameters used in a step template"
            },
            "template": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Reference to a template for this step"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "firstProperty": [
            "restoreCache"
          ],
          "properties": {
            "condition": {
              "$ref": "#/definitions/string",
              "description": "Evaluate this condition expression to determine whether to run this task"
            },
            "continueOnError": {
              "$ref": "#/definitions/boolean",
              "description": "Continue running even on failure?"
            },
            "displayName": {
              "$ref": "#/definitions/string",
              "description": "Human-readable name for the task"
            },
            "enabled": {
              "$ref": "#/definitions/boolean",
              "description": "Run this task when the job runs?"
            },
            "env": {
              "$ref": "#/definitions/mappingOfStringString",
              "description": "Variables to map into the process's environment"
            },
            "name": {
              "$ref": "#/definitions/referenceName",
              "description": "ID of the step"
            },
            "path": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "The folder path to download the cache to. This can be a fully-qualified path or a path relative to the root of the repository. Wildcards are not supported."
            },
            "restoreCache": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "The name of the key"
            },
            "retryCountOnTaskFailure": {
              "$ref": "#/definitions/string",
              "description": "Number of retries if the task fails"
            },
            "target": {
              "$ref": "#/definitions/stepTarget",
              "description": "Environment in which to run this task"
            },
            "timeoutInMinutes": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Time to wait for this task to complete before the server kills it"
            }
          },
          "required": [
            "restoreCache",
            "path"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "firstProperty": [
            "saveCache"
          ],
          "properties": {
            "condition": {
              "$ref": "#/definitions/string",
              "description": "Evaluate this condition expression to determine whether to run this task"
            },
            "continueOnError": {
              "$ref": "#/definitions/boolean",
              "description": "Continue running even on failure?"
            },
            "displayName": {
              "$ref": "#/definitions/string",
              "description": "Human-readable name for the task"
            },
            "enabled": {
              "$ref": "#/definitions/boolean",
              "description": "Run this task when the job runs?"
            },
            "env": {
              "$ref": "#/definitions/mappingOfStringString",
              "description": "Variables to map into the process's environment"
            },
            "name": {
              "$ref": "#/definitions/referenceName",
              "description": "ID of the step"
            },
            "path": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "The folder or file path to publish. This can be a fully-qualified path or a path relative to the root of the repository. Wildcards are not supported."
            },
            "retryCountOnTaskFailure": {
              "$ref": "#/definitions/string",
              "description": "Number of retries if the task fails"
            },
            "saveCache": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "The name of the key"
            },
            "target": {
              "$ref": "#/definitions/stepTarget",
              "description": "Environment in which to run this task"
            },
            "timeoutInMinutes": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Time to wait for this task to complete before the server kills it"
            }
          },
          "required": [
            "saveCache",
            "path"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "firstProperty": [
            "reviewApp"
          ],
          "properties": {
            "condition": {
              "$ref": "#/definitions/string",
              "description": "Evaluate this condition expression to determine whether to run this task"
            },
            "continueOnError": {
              "$ref": "#/definitions/boolean",
              "description": "Continue running even on failure?"
            },
            "displayName": {
              "$ref": "#/definitions/string",
              "description": "Human-readable name for the task"
            },
            "enabled": {
              "$ref": "#/definitions/boolean",
              "description": "Run this task when the job runs?"
            },
            "env": {
              "$ref": "#/definitions/mappingOfStringString",
              "description": "Variables to map into the process's environment"
            },
            "name": {
              "$ref": "#/definitions/referenceName",
              "description": "ID of the step"
            },
            "retryCountOnTaskFailure": {
              "$ref": "#/definitions/string",
              "description": "Number of retries if the task fails"
            },
            "reviewApp": {
              "$ref": "#/definitions/string"
            },
            "target": {
              "$ref": "#/definitions/stepTarget",
              "description": "Environment in which to run this task"
            },
            "timeoutInMinutes": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Time to wait for this task to complete before the server kills it"
            }
          },
          "type": "object"
        }
      ]
    },
    "stepTarget": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "additionalProperties": false,
          "properties": {
            "commands": {
              "$ref": "#/definitions/string",
              "description": "Set of allowed logging commands ('any' or 'restricted')",
              "enum": [
                "any",
                "restricted"
              ]
            },
            "container": {
              "$ref": "#/definitions/nonEmptyString",
              "description": "Container to target (or 'host' for host machine)"
            },
            "settableVariables": {
              "$ref": "#/definitions/variableRestrictions",
              "description": "Restrictions on which variables that can be set"
            }
          },
          "type": "object"
        }
      ],
      "description": "Step target"
    },
    "steps": {
      "items": {
        "$ref": "#/definitions/step"
      },
      "type": "array"
    },
    "stepsTemplate": {
      "additionalProperties": false,
      "properties": {
        "parameters": {
          "$ref": "#/definitions/templateParameters",
          "description": "Step-specific parameters"
        },
        "steps": {
          "$ref": "#/definitions/steps",
          "description": "A list of steps to run"
        }
      },
      "type": "object"
    },
    "string": {
      "type": "string"
    },
    "string_allowExpressions": {
      "type": "string"
    },
    "task": {
      "additionalProperties": false,
      "anyOf": [
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Power Platform Import Solution inputs",
              "properties": {
                "ActivatePlugins": {
                  "description": "Activate Plugins",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "AsyncOperation": {
                  "description": "Import solution as asynchronous operation",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "ConvertToManaged": {
                  "description": "Import as a Managed solution",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "DeploymentSettingsFile": {
                  "description": "Deployment Settings File",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Environment": {
                  "description": "Environment Url",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "HoldingSolution": {
                  "description": "Import as a holding solution",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "MaxAsyncWaitTime": {
                  "description": "Maximum wait time in minutes for asynchronous operation",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "OverwriteUnmanagedCustomizations": {
                  "description": "Overwrite unmanaged customizations",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "PowerPlatformEnvironment": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerPlatformSPN": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PublishCustomizationChanges": {
                  "description": "Publish customization changes",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "PublishWorkflows": {
                  "description": "(DEPRECATED, use 'Activate Plugins' instead) Activate processes (workflows) after import",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "SkipProductUpdateDependencies": {
                  "description": "Skip product update dependencies",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "SolutionInputFile": {
                  "description": "Solution Input File",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "UseDeploymentSettingsFile": {
                  "description": "Use deployment settings file",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "authenticationType": {
                  "description": "Authentication type",
                  "enum": [
                    "PowerPlatformEnvironment",
                    "PowerPlatformSPN"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": [
                "SolutionInputFile"
              ]
            },
            "task": {
              "description": "Power Platform Import Solution\n\nPower Platform Import Solution",
              "ignoreCase": "value",
              "pattern": "^PowerPlatformImportSolution@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "PowerShell inputs",
              "properties": {
                "arguments": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "failOnStandardError": {
                  "description": "Fail on Standard Error",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "inlineScript": {
                  "description": "Inline Script",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "scriptName": {
                  "description": "Script Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "scriptType": {
                  "description": "Type",
                  "enum": [
                    "inlineScript",
                    "filePath"
                  ],
                  "ignoreCase": "all"
                },
                "workingFolder": {
                  "description": "Working folder",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "PowerShell\n\nRun a PowerShell script",
              "ignoreCase": "value",
              "pattern": "^PowerShell@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "PowerShell inputs",
              "properties": {
                "arguments": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "debugPreference": {
                  "description": "DebugPreference",
                  "enum": [
                    "default",
                    "stop",
                    "continue",
                    "silentlyContinue"
                  ],
                  "ignoreCase": "all"
                },
                "errorActionPreference": {
                  "description": "ErrorActionPreference",
                  "enum": [
                    "default",
                    "stop",
                    "continue",
                    "silentlyContinue"
                  ],
                  "ignoreCase": "all"
                },
                "failOnStderr": {
                  "description": "Fail on Standard Error",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "filePath": {
                  "description": "Script Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ignoreLASTEXITCODE": {
                  "description": "Ignore $LASTEXITCODE",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "informationPreference": {
                  "description": "InformationPreference",
                  "enum": [
                    "default",
                    "stop",
                    "continue",
                    "silentlyContinue"
                  ],
                  "ignoreCase": "all"
                },
                "progressPreference": {
                  "description": "ProgressPreference",
                  "enum": [
                    "default",
                    "stop",
                    "continue",
                    "silentlyContinue"
                  ],
                  "ignoreCase": "all"
                },
                "pwsh": {
                  "description": "Use PowerShell Core",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "runScriptInSeparateScope": {
                  "description": "Run script in the separate scope",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "script": {
                  "description": "Script",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "showWarnings": {
                  "description": "Show warnings as Azure DevOps warnings",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "targetType": {
                  "description": "Type",
                  "enum": [
                    "filePath",
                    "inline"
                  ],
                  "ignoreCase": "all"
                },
                "verbosePreference": {
                  "description": "VerbosePreference",
                  "enum": [
                    "default",
                    "stop",
                    "continue",
                    "silentlyContinue"
                  ],
                  "ignoreCase": "all"
                },
                "warningPreference": {
                  "description": "WarningPreference",
                  "enum": [
                    "default",
                    "stop",
                    "continue",
                    "silentlyContinue"
                  ],
                  "ignoreCase": "all"
                },
                "workingDirectory": {
                  "description": "Working Directory",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "PowerShell\n\nRun a PowerShell script on Linux, macOS, or Windows",
              "ignoreCase": "value",
              "pattern": "^PowerShell@2$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Power Platform Tool Installer inputs",
              "properties": {
                "CrmSdkCoreToolsVersion": {
                  "description": "CrmSdk Core Tools Version (PowerShell module no longer used)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "DefaultVersion": {
                  "description": "IGNORED: Use default versions",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "MicrosoftPowerAppsCheckerVersion": {
                  "description": "Microsoft PowerApps Checker Version (PowerShell module no longer used)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerAppsAdminVersion": {
                  "description": "Microsoft PowerApps Administration PowerShell (PowerShell module no longer used)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "XrmOnlineManagementApiVersion": {
                  "description": "Xrm Online Management Api Version (PowerShell module no longer used)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "XrmToolingPackageDeploymentVersion": {
                  "description": "Xrm Tooling PackageDeployment Version (PowerShell module no longer used)",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Power Platform Tool Installer\n\nPower Platform Tool Installer; this task is required before any other PowerPlatform.BuildTools tasks in the job",
              "ignoreCase": "value",
              "pattern": "^PowerPlatformToolInstaller@2$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Power Platform Backup Environment inputs",
              "properties": {
                "BackupLabel": {
                  "description": "Backup Label",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Environment": {
                  "description": "Environment Url",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Notes": {
                  "description": "Notes",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerPlatformEnvironment": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerPlatformSPN": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "authenticationType": {
                  "description": "Authentication type",
                  "enum": [
                    "PowerPlatformEnvironment",
                    "PowerPlatformSPN"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": []
            },
            "task": {
              "description": "Power Platform Backup Environment\n\nPower Platform Backup Environment",
              "ignoreCase": "value",
              "pattern": "^PowerPlatformBackupEnvironment@2$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Azure PowerShell inputs",
              "properties": {
                "FailOnStandardError": {
                  "description": "Fail on Standard Error",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "Inline": {
                  "description": "Inline Script",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "RestrictContextToCurrentTask": {
                  "description": "Restrict scope of context to current task",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "ScriptArguments": {
                  "description": "Script Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ScriptPath": {
                  "description": "Script Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ScriptType": {
                  "description": "Script Type",
                  "enum": [
                    "FilePath",
                    "InlineScript"
                  ],
                  "ignoreCase": "all"
                },
                "azurePowerShellVersion": {
                  "aliases": [
                    "TargetAzurePs"
                  ],
                  "description": "Azure PowerShell Version",
                  "enum": [
                    "LatestVersion",
                    "OtherVersion"
                  ],
                  "ignoreCase": "all"
                },
                "azureSubscription": {
                  "aliases": [
                    "ConnectedServiceNameARM"
                  ],
                  "description": "Azure Subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "errorActionPreference": {
                  "description": "ErrorActionPreference",
                  "enum": [
                    "stop",
                    "continue",
                    "silentlyContinue"
                  ],
                  "ignoreCase": "all"
                },
                "preferredAzurePowerShellVersion": {
                  "aliases": [
                    "CustomTargetAzurePs"
                  ],
                  "description": "Preferred Azure PowerShell Version",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "pwsh": {
                  "description": "Use PowerShell Core",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "validateScriptSignature": {
                  "description": "Validate script signature",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "workingDirectory": {
                  "description": "Working Directory",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "azureSubscription"
              ]
            },
            "task": {
              "description": "Azure PowerShell\n\nRun a PowerShell script within an Azure environment",
              "ignoreCase": "value",
              "pattern": "^AzurePowerShell@4$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Azure PowerShell inputs",
              "properties": {
                "Inline": {
                  "description": "Inline Script",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ScriptArguments": {
                  "description": "Script Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ScriptPath": {
                  "description": "Script Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ScriptType": {
                  "description": "Script Type",
                  "enum": [
                    "FilePath",
                    "InlineScript"
                  ],
                  "ignoreCase": "all"
                },
                "azureClassicSubscription": {
                  "aliases": [
                    "ConnectedServiceName"
                  ],
                  "description": "Azure Classic Subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureConnectionType": {
                  "aliases": [
                    "ConnectedServiceNameSelector"
                  ],
                  "description": "Azure Connection Type",
                  "enum": [
                    "ConnectedServiceName",
                    "ConnectedServiceNameARM"
                  ],
                  "ignoreCase": "all"
                },
                "azurePowerShellVersion": {
                  "aliases": [
                    "TargetAzurePs"
                  ],
                  "description": "Azure PowerShell Version",
                  "enum": [
                    "LatestVersion",
                    "OtherVersion"
                  ],
                  "ignoreCase": "all"
                },
                "azureSubscription": {
                  "aliases": [
                    "ConnectedServiceNameARM"
                  ],
                  "description": "Azure Subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "preferredAzurePowerShellVersion": {
                  "aliases": [
                    "CustomTargetAzurePs"
                  ],
                  "description": "Preferred Azure PowerShell Version",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Azure PowerShell\n\nRun a PowerShell script within an Azure environment",
              "ignoreCase": "value",
              "pattern": "^AzurePowerShell@2$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Azure PowerShell inputs",
              "properties": {
                "FailOnStandardError": {
                  "description": "Fail on Standard Error",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "Inline": {
                  "description": "Inline Script",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ScriptArguments": {
                  "description": "Script Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ScriptPath": {
                  "description": "Script Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ScriptType": {
                  "description": "Script Type",
                  "enum": [
                    "FilePath",
                    "InlineScript"
                  ],
                  "ignoreCase": "all"
                },
                "azurePowerShellVersion": {
                  "aliases": [
                    "TargetAzurePs"
                  ],
                  "description": "Azure PowerShell Version",
                  "enum": [
                    "LatestVersion",
                    "OtherVersion"
                  ],
                  "ignoreCase": "all"
                },
                "azureSubscription": {
                  "aliases": [
                    "ConnectedServiceNameARM"
                  ],
                  "description": "Azure Subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "errorActionPreference": {
                  "description": "ErrorActionPreference",
                  "enum": [
                    "stop",
                    "continue",
                    "silentlyContinue"
                  ],
                  "ignoreCase": "all"
                },
                "preferredAzurePowerShellVersion": {
                  "aliases": [
                    "CustomTargetAzurePs"
                  ],
                  "description": "Preferred Azure PowerShell Version",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "pwsh": {
                  "description": "Use PowerShell Core",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "validateScriptSignature": {
                  "description": "Validate script signature",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "workingDirectory": {
                  "description": "Working Directory",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "azureSubscription"
              ]
            },
            "task": {
              "description": "Azure PowerShell\n\nRun a PowerShell script within an Azure environment",
              "ignoreCase": "value",
              "pattern": "^AzurePowerShell@5$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Azure PowerShell inputs",
              "properties": {
                "FailOnStandardError": {
                  "description": "Fail on Standard Error",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "Inline": {
                  "description": "Inline Script",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ScriptArguments": {
                  "description": "Script Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ScriptPath": {
                  "description": "Script Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ScriptType": {
                  "description": "Script Type",
                  "enum": [
                    "FilePath",
                    "InlineScript"
                  ],
                  "ignoreCase": "all"
                },
                "azureClassicSubscription": {
                  "aliases": [
                    "ConnectedServiceName"
                  ],
                  "description": "Azure Classic Subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureConnectionType": {
                  "aliases": [
                    "ConnectedServiceNameSelector"
                  ],
                  "description": "Azure Connection Type",
                  "enum": [
                    "ConnectedServiceName",
                    "ConnectedServiceNameARM"
                  ],
                  "ignoreCase": "all"
                },
                "azurePowerShellVersion": {
                  "aliases": [
                    "TargetAzurePs"
                  ],
                  "description": "Azure PowerShell Version",
                  "enum": [
                    "LatestVersion",
                    "OtherVersion"
                  ],
                  "ignoreCase": "all"
                },
                "azureSubscription": {
                  "aliases": [
                    "ConnectedServiceNameARM"
                  ],
                  "description": "Azure Subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "errorActionPreference": {
                  "description": "ErrorActionPreference",
                  "enum": [
                    "stop",
                    "continue",
                    "silentlyContinue"
                  ],
                  "ignoreCase": "all"
                },
                "preferredAzurePowerShellVersion": {
                  "aliases": [
                    "CustomTargetAzurePs"
                  ],
                  "description": "Preferred Azure PowerShell Version",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "validateScriptSignature": {
                  "description": "Validate script signature",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": []
            },
            "task": {
              "description": "Azure PowerShell\n\nRun a PowerShell script within an Azure environment",
              "ignoreCase": "value",
              "pattern": "^AzurePowerShell@3$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Azure PowerShell inputs",
              "properties": {
                "ConnectedServiceName": {
                  "description": "Azure Classic Subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ConnectedServiceNameARM": {
                  "description": "Azure Subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ConnectedServiceNameSelector": {
                  "description": "Azure Connection Type",
                  "enum": [
                    "ConnectedServiceName",
                    "ConnectedServiceNameARM"
                  ],
                  "ignoreCase": "all"
                },
                "Inline": {
                  "description": "Inline Script",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ScriptArguments": {
                  "description": "Script Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ScriptPath": {
                  "description": "Script Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ScriptType": {
                  "description": "Script Type",
                  "enum": [
                    "FilePath",
                    "InlineScript"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": []
            },
            "task": {
              "description": "Azure PowerShell\n\nRun a PowerShell script within an Azure environment",
              "ignoreCase": "value",
              "pattern": "^AzurePowerShell@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "MySQL database deploy inputs",
              "properties": {
                "DatabaseName": {
                  "description": "Database Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ServerName": {
                  "description": "Host Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SqlAdditionalArguments": {
                  "description": "Additional Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SqlFile": {
                  "description": "MySQL Script",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SqlInline": {
                  "description": "Inline MySQL Script",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SqlPassword": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SqlUsername": {
                  "description": "Mysql User Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "TaskNameSelector": {
                  "description": "Deploy MySql Using",
                  "enum": [
                    "SqlTaskFile",
                    "InlineSqlTask"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": [
                "SqlUsername",
                "SqlPassword"
              ]
            },
            "task": {
              "description": "MySQL database deploy\n\nRun scripts and make changes to a MySQL Database",
              "ignoreCase": "value",
              "pattern": "^MysqlDeploymentOnMachineGroup@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Python pip authenticate inputs",
              "properties": {
                "artifactFeeds": {
                  "aliases": [
                    "artifactFeeds"
                  ],
                  "description": "My feeds (select below)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "onlyAddExtraIndex": {
                  "description": "Don't set primary index URL",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "pythonDownloadServiceConnections": {
                  "aliases": [
                    "pythonDownloadServiceConnections"
                  ],
                  "description": "Feeds from external organizations",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Python pip authenticate\n\nAuthentication task for the pip client used for installing Python distributions",
              "ignoreCase": "value",
              "pattern": "^PipAuthenticate@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Python pip authenticate inputs",
              "properties": {
                "artifactFeeds": {
                  "aliases": [
                    "feedList"
                  ],
                  "description": "My feeds (select below)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "externalFeeds": {
                  "aliases": [
                    "externalSources"
                  ],
                  "description": "Feeds from external organizations",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Python pip authenticate\n\nAuthentication task for the pip client used for installing Python distributions",
              "ignoreCase": "value",
              "pattern": "^PipAuthenticate@0$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Maven inputs",
              "properties": {
                "allowBrokenSymlinks": {
                  "aliases": [
                    "allowBrokenSymbolicLinks"
                  ],
                  "description": "Allow broken symbolic links",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "checkStyleRunAnalysis": {
                  "aliases": [
                    "checkstyleAnalysisEnabled"
                  ],
                  "description": "Run Checkstyle",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "codeCoverageClassFilesDirectories": {
                  "aliases": [
                    "classFilesDirectories"
                  ],
                  "description": "Class files directories",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "codeCoverageClassFilter": {
                  "aliases": [
                    "classFilter"
                  ],
                  "description": "Class inclusion/exclusion filters",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "codeCoverageFailIfEmpty": {
                  "aliases": [
                    "failIfCoverageEmpty"
                  ],
                  "description": "Fail when code coverage results are missing",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "codeCoverageRestoreOriginalPomXml": {
                  "aliases": [
                    "restoreOriginalPomXml"
                  ],
                  "description": "Restore original pom.xml after task execution",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "codeCoverageSourceDirectories": {
                  "aliases": [
                    "srcDirectories"
                  ],
                  "description": "Source files directories",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "codeCoverageToolOption": {
                  "aliases": [
                    "codeCoverageTool"
                  ],
                  "description": "Code coverage tool",
                  "enum": [
                    "None",
                    "Cobertura",
                    "JaCoCo"
                  ],
                  "ignoreCase": "all"
                },
                "effectivePomSkip": {
                  "aliases": [
                    "skipEffectivePom"
                  ],
                  "description": "Skip generating effective POM while authenticating built-in feeds",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "failWhenBugsFound": {
                  "aliases": [
                    "spotBugsFailWhenBugsFound",
                    "sbFailWhenBugsFound"
                  ],
                  "description": "Fail when bugs are found with spotbugs:check",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "findBugsRunAnalysis": {
                  "aliases": [
                    "findbugsAnalysisEnabled"
                  ],
                  "description": "Run FindBugs",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "goals": {
                  "description": "Goal(s)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "isJacocoCoverageReportXML": {
                  "description": "Use XML Jacoco reports for SonarQube analysis",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "javaHomeOption": {
                  "aliases": [
                    "javaHomeSelection"
                  ],
                  "description": "Set JAVA_HOME by",
                  "enum": [
                    "JDKVersion",
                    "Path"
                  ],
                  "ignoreCase": "all"
                },
                "jdkArchitectureOption": {
                  "aliases": [
                    "jdkArchitecture"
                  ],
                  "description": "JDK architecture",
                  "enum": [
                    "x86",
                    "x64"
                  ],
                  "ignoreCase": "all"
                },
                "jdkDirectory": {
                  "aliases": [
                    "jdkUserInputPath"
                  ],
                  "description": "JDK path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "jdkVersionOption": {
                  "aliases": [
                    "jdkVersion"
                  ],
                  "description": "JDK version",
                  "enum": [
                    "default",
                    "1.17",
                    "1.11",
                    "1.10",
                    "1.9",
                    "1.8",
                    "1.7",
                    "1.6"
                  ],
                  "ignoreCase": "all"
                },
                "mavenAuthenticateFeed": {
                  "aliases": [
                    "mavenFeedAuthenticate"
                  ],
                  "description": "Authenticate built-in Maven feeds",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "mavenDirectory": {
                  "aliases": [
                    "mavenPath"
                  ],
                  "description": "Maven path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "mavenOptions": {
                  "aliases": [
                    "mavenOpts"
                  ],
                  "description": "Set MAVEN_OPTS to",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "mavenPomFile": {
                  "aliases": [
                    "mavenPOMFile"
                  ],
                  "description": "Maven POM file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "mavenSetM2Home": {
                  "description": "Set M2_HOME variable",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "mavenVersionOption": {
                  "aliases": [
                    "mavenVersionSelection"
                  ],
                  "description": "Maven version",
                  "enum": [
                    "Default",
                    "Path"
                  ],
                  "ignoreCase": "all"
                },
                "options": {
                  "description": "Options",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "pmdRunAnalysis": {
                  "aliases": [
                    "pmdAnalysisEnabled"
                  ],
                  "description": "Run PMD",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "publishJUnitResults": {
                  "description": "Publish to Azure Pipelines",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "sonarQubeRunAnalysis": {
                  "aliases": [
                    "sqAnalysisEnabled"
                  ],
                  "description": "Run SonarQube or SonarCloud analysis",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "spotBugsGoal": {
                  "description": "The goal for the spotbugs plugin",
                  "enum": [
                    "spotbugs",
                    "check"
                  ],
                  "ignoreCase": "all"
                },
                "spotBugsRunAnalysis": {
                  "aliases": [
                    "spotBugsAnalysisEnabled"
                  ],
                  "description": "Run SpotBugs analysis",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "spotBugsVersion": {
                  "aliases": [
                    "spotBugsMavenPluginVersion"
                  ],
                  "description": "Version number",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sqMavenPluginVersionChoice": {
                  "description": "SonarQube scanner for Maven version",
                  "enum": [
                    "latest",
                    "pom"
                  ],
                  "ignoreCase": "all"
                },
                "testResultsFiles": {
                  "description": "Test results files",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testRunTitle": {
                  "description": "Test run title",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Maven\n\nBuild, test, and deploy with Apache Maven",
              "ignoreCase": "value",
              "pattern": "^Maven@4$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Maven inputs",
              "properties": {
                "allowBrokenSymlinks": {
                  "aliases": [
                    "allowBrokenSymbolicLinks"
                  ],
                  "description": "Allow broken symbolic links",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "checkStyleRunAnalysis": {
                  "aliases": [
                    "checkstyleAnalysisEnabled"
                  ],
                  "description": "Run Checkstyle",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "codeCoverageClassFilesDirectories": {
                  "aliases": [
                    "classFilesDirectories"
                  ],
                  "description": "Class files directories",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "codeCoverageClassFilter": {
                  "aliases": [
                    "classFilter"
                  ],
                  "description": "Class inclusion/exclusion filters",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "codeCoverageFailIfEmpty": {
                  "aliases": [
                    "failIfCoverageEmpty"
                  ],
                  "description": "Fail when code coverage results are missing",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "codeCoverageRestoreOriginalPomXml": {
                  "aliases": [
                    "restoreOriginalPomXml"
                  ],
                  "description": "Restore original pom.xml after task execution",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "codeCoverageSourceDirectories": {
                  "aliases": [
                    "srcDirectories"
                  ],
                  "description": "Source files directories",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "codeCoverageToolOption": {
                  "aliases": [
                    "codeCoverageTool"
                  ],
                  "description": "Code coverage tool",
                  "enum": [
                    "None",
                    "Cobertura",
                    "JaCoCo"
                  ],
                  "ignoreCase": "all"
                },
                "findBugsRunAnalysis": {
                  "aliases": [
                    "findbugsAnalysisEnabled"
                  ],
                  "description": "Run FindBugs",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "goals": {
                  "description": "Goal(s)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "isJacocoCoverageReportXML": {
                  "description": "Use XML Jacoco reports for SonarQube analysis",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "javaHomeOption": {
                  "aliases": [
                    "javaHomeSelection"
                  ],
                  "description": "Set JAVA_HOME by",
                  "enum": [
                    "JDKVersion",
                    "Path"
                  ],
                  "ignoreCase": "all"
                },
                "jdkArchitectureOption": {
                  "aliases": [
                    "jdkArchitecture"
                  ],
                  "description": "JDK architecture",
                  "enum": [
                    "x86",
                    "x64"
                  ],
                  "ignoreCase": "all"
                },
                "jdkDirectory": {
                  "aliases": [
                    "jdkUserInputPath"
                  ],
                  "description": "JDK path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "jdkVersionOption": {
                  "aliases": [
                    "jdkVersion"
                  ],
                  "description": "JDK version",
                  "enum": [
                    "default",
                    "1.17",
                    "1.11",
                    "1.10",
                    "1.9",
                    "1.8",
                    "1.7",
                    "1.6"
                  ],
                  "ignoreCase": "all"
                },
                "mavenAuthenticateFeed": {
                  "aliases": [
                    "mavenFeedAuthenticate"
                  ],
                  "description": "Authenticate built-in Maven feeds",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "mavenDirectory": {
                  "aliases": [
                    "mavenPath"
                  ],
                  "description": "Maven path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "mavenOptions": {
                  "aliases": [
                    "mavenOpts"
                  ],
                  "description": "Set MAVEN_OPTS to",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "mavenPomFile": {
                  "aliases": [
                    "mavenPOMFile"
                  ],
                  "description": "Maven POM file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "mavenSetM2Home": {
                  "description": "Set M2_HOME variable",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "mavenVersionOption": {
                  "aliases": [
                    "mavenVersionSelection"
                  ],
                  "description": "Maven version",
                  "enum": [
                    "Default",
                    "Path"
                  ],
                  "ignoreCase": "all"
                },
                "options": {
                  "description": "Options",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "pmdRunAnalysis": {
                  "aliases": [
                    "pmdAnalysisEnabled"
                  ],
                  "description": "Run PMD",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "publishJUnitResults": {
                  "description": "Publish to Azure Pipelines",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "sonarQubeRunAnalysis": {
                  "aliases": [
                    "sqAnalysisEnabled"
                  ],
                  "description": "Run SonarQube or SonarCloud analysis",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "sqMavenPluginVersionChoice": {
                  "description": "SonarQube scanner for Maven version",
                  "enum": [
                    "latest",
                    "pom"
                  ],
                  "ignoreCase": "all"
                },
                "testResultsFiles": {
                  "description": "Test results files",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testRunTitle": {
                  "description": "Test run title",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Maven\n\nBuild, test, and deploy with Apache Maven",
              "ignoreCase": "value",
              "pattern": "^Maven@2$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Maven inputs",
              "properties": {
                "allowBrokenSymlinks": {
                  "aliases": [
                    "allowBrokenSymbolicLinks"
                  ],
                  "description": "Allow broken symbolic links",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "checkStyleRunAnalysis": {
                  "aliases": [
                    "checkstyleAnalysisEnabled"
                  ],
                  "description": "Run Checkstyle",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "codeCoverageClassFilesDirectories": {
                  "aliases": [
                    "classFilesDirectories"
                  ],
                  "description": "Class files directories",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "codeCoverageClassFilter": {
                  "aliases": [
                    "classFilter"
                  ],
                  "description": "Class inclusion/exclusion filters",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "codeCoverageFailIfEmpty": {
                  "aliases": [
                    "failIfCoverageEmpty"
                  ],
                  "description": "Fail when code coverage results are missing",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "codeCoverageRestoreOriginalPomXml": {
                  "aliases": [
                    "restoreOriginalPomXml"
                  ],
                  "description": "Restore original pom.xml after task execution",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "codeCoverageSourceDirectories": {
                  "aliases": [
                    "srcDirectories"
                  ],
                  "description": "Source files directories",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "codeCoverageToolOption": {
                  "aliases": [
                    "codeCoverageTool"
                  ],
                  "description": "Code coverage tool",
                  "enum": [
                    "None",
                    "Cobertura",
                    "JaCoCo"
                  ],
                  "ignoreCase": "all"
                },
                "effectivePomSkip": {
                  "aliases": [
                    "skipEffectivePom"
                  ],
                  "description": "Skip generating effective POM while authenticating built-in feeds",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "failWhenBugsFound": {
                  "aliases": [
                    "spotBugsFailWhenBugsFound",
                    "sbFailWhenBugsFound"
                  ],
                  "description": "Fail when bugs are found with spotbugs:check",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "findBugsRunAnalysis": {
                  "aliases": [
                    "findbugsAnalysisEnabled"
                  ],
                  "description": "Run FindBugs",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "goals": {
                  "description": "Goal(s)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "isJacocoCoverageReportXML": {
                  "description": "Use XML Jacoco reports for SonarQube analysis",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "javaHomeOption": {
                  "aliases": [
                    "javaHomeSelection"
                  ],
                  "description": "Set JAVA_HOME by",
                  "enum": [
                    "JDKVersion",
                    "Path"
                  ],
                  "ignoreCase": "all"
                },
                "jdkArchitectureOption": {
                  "aliases": [
                    "jdkArchitecture"
                  ],
                  "description": "JDK architecture",
                  "enum": [
                    "x86",
                    "x64"
                  ],
                  "ignoreCase": "all"
                },
                "jdkDirectory": {
                  "aliases": [
                    "jdkUserInputPath"
                  ],
                  "description": "JDK path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "jdkVersionOption": {
                  "aliases": [
                    "jdkVersion"
                  ],
                  "description": "JDK version",
                  "enum": [
                    "default",
                    "1.17",
                    "1.11",
                    "1.10",
                    "1.9",
                    "1.8",
                    "1.7",
                    "1.6"
                  ],
                  "ignoreCase": "all"
                },
                "mavenAuthenticateFeed": {
                  "aliases": [
                    "mavenFeedAuthenticate"
                  ],
                  "description": "Authenticate built-in Maven feeds",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "mavenDirectory": {
                  "aliases": [
                    "mavenPath"
                  ],
                  "description": "Maven path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "mavenOptions": {
                  "aliases": [
                    "mavenOpts"
                  ],
                  "description": "Set MAVEN_OPTS to",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "mavenPomFile": {
                  "aliases": [
                    "mavenPOMFile"
                  ],
                  "description": "Maven POM file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "mavenSetM2Home": {
                  "description": "Set M2_HOME variable",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "mavenVersionOption": {
                  "aliases": [
                    "mavenVersionSelection"
                  ],
                  "description": "Maven version",
                  "enum": [
                    "Default",
                    "Path"
                  ],
                  "ignoreCase": "all"
                },
                "options": {
                  "description": "Options",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "pmdRunAnalysis": {
                  "aliases": [
                    "pmdAnalysisEnabled"
                  ],
                  "description": "Run PMD",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "publishJUnitResults": {
                  "description": "Publish to Azure Pipelines",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "sonarQubeRunAnalysis": {
                  "aliases": [
                    "sqAnalysisEnabled"
                  ],
                  "description": "Run SonarQube or SonarCloud analysis",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "spotBugsGoal": {
                  "description": "The goal for the spotbugs plugin",
                  "enum": [
                    "spotbugs",
                    "check"
                  ],
                  "ignoreCase": "all"
                },
                "spotBugsRunAnalysis": {
                  "aliases": [
                    "spotBugsAnalysisEnabled"
                  ],
                  "description": "Run SpotBugs analysis",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "spotBugsVersion": {
                  "aliases": [
                    "spotBugsMavenPluginVersion"
                  ],
                  "description": "Version number",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sqMavenPluginVersionChoice": {
                  "description": "SonarQube scanner for Maven version",
                  "enum": [
                    "latest",
                    "pom"
                  ],
                  "ignoreCase": "all"
                },
                "testResultsFiles": {
                  "description": "Test results files",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testRunTitle": {
                  "description": "Test run title",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Maven\n\nBuild, test, and deploy with Apache Maven",
              "ignoreCase": "value",
              "pattern": "^Maven@3$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Maven inputs",
              "properties": {
                "checkStyleRunAnalysis": {
                  "aliases": [
                    "checkstyleAnalysisEnabled"
                  ],
                  "description": "Run Checkstyle",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "codeCoverageClassFilesDirectories": {
                  "aliases": [
                    "classFilesDirectories"
                  ],
                  "description": "Class Files Directories",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "codeCoverageClassFilter": {
                  "aliases": [
                    "classFilter"
                  ],
                  "description": "Class Inclusion/Exclusion Filters",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "codeCoverageFailIfEmpty": {
                  "aliases": [
                    "failIfCoverageEmpty"
                  ],
                  "description": "Fail When Code Coverage Results Are Missing",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "codeCoverageSourceDirectories": {
                  "aliases": [
                    "srcDirectories"
                  ],
                  "description": "Source Files Directories",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "codeCoverageToolOption": {
                  "aliases": [
                    "codeCoverageTool"
                  ],
                  "description": "Code Coverage Tool",
                  "enum": [
                    "None",
                    "Cobertura",
                    "JaCoCo"
                  ],
                  "ignoreCase": "all"
                },
                "findBugsRunAnalysis": {
                  "aliases": [
                    "findbugsAnalysisEnabled"
                  ],
                  "description": "Run FindBugs",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "goals": {
                  "description": "Goal(s)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "javaHomeOption": {
                  "aliases": [
                    "javaHomeSelection"
                  ],
                  "description": "Set JAVA_HOME by",
                  "enum": [
                    "JDKVersion",
                    "Path"
                  ],
                  "ignoreCase": "all"
                },
                "jdkArchitectureOption": {
                  "aliases": [
                    "jdkArchitecture"
                  ],
                  "description": "JDK Architecture",
                  "enum": [
                    "x86",
                    "x64"
                  ],
                  "ignoreCase": "all"
                },
                "jdkDirectory": {
                  "aliases": [
                    "jdkUserInputPath"
                  ],
                  "description": "JDK Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "jdkVersionOption": {
                  "aliases": [
                    "jdkVersion"
                  ],
                  "description": "JDK Version",
                  "enum": [
                    "default",
                    "1.9",
                    "1.8",
                    "1.7",
                    "1.6"
                  ],
                  "ignoreCase": "all"
                },
                "mavenAuthenticateFeed": {
                  "aliases": [
                    "mavenFeedAuthenticate"
                  ],
                  "description": "Authenticate built-in Maven feeds",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "mavenDirectory": {
                  "aliases": [
                    "mavenPath"
                  ],
                  "description": "Maven Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "mavenOptions": {
                  "aliases": [
                    "mavenOpts"
                  ],
                  "description": "Set MAVEN_OPTS to",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "mavenPomFile": {
                  "aliases": [
                    "mavenPOMFile"
                  ],
                  "description": "Maven POM file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "mavenSetM2Home": {
                  "description": "Set M2_HOME variable",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "mavenVersionOption": {
                  "aliases": [
                    "mavenVersionSelection"
                  ],
                  "description": "Maven Version",
                  "enum": [
                    "Default",
                    "Path"
                  ],
                  "ignoreCase": "all"
                },
                "options": {
                  "description": "Options",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "pmdRunAnalysis": {
                  "aliases": [
                    "pmdAnalysisEnabled"
                  ],
                  "description": "Run PMD",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "publishJUnitResults": {
                  "description": "Publish to TFS/Team Services",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "sonarQubeDBPassword": {
                  "aliases": [
                    "sqDbPassword"
                  ],
                  "description": "Db User Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sonarQubeDBUrl": {
                  "aliases": [
                    "sqDbUrl"
                  ],
                  "description": "Db Connection String",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sonarQubeDBUsername": {
                  "aliases": [
                    "sqDbUsername"
                  ],
                  "description": "Db Username",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sonarQubeFailWhenQualityGateFails": {
                  "aliases": [
                    "sqAnalysisBreakBuildIfQualityGateFailed"
                  ],
                  "description": "Fail the build on quality gate failure (SQ 5.3+)",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "sonarQubeIncludeFullReport": {
                  "aliases": [
                    "sqAnalysisIncludeFullReport"
                  ],
                  "description": "Include full analysis report in the build summary (SQ 5.3+)",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "sonarQubeProjectKey": {
                  "aliases": [
                    "sqProjectKey"
                  ],
                  "description": "SonarQube Project Key",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sonarQubeProjectName": {
                  "aliases": [
                    "sqProjectName"
                  ],
                  "description": "SonarQube Project Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sonarQubeProjectVersion": {
                  "aliases": [
                    "sqProjectVersion"
                  ],
                  "description": "SonarQube Project Version",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sonarQubeRunAnalysis": {
                  "aliases": [
                    "sqAnalysisEnabled"
                  ],
                  "description": "Run SonarQube Analysis",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "sonarQubeServiceEndpoint": {
                  "aliases": [
                    "sqConnectedServiceName"
                  ],
                  "description": "SonarQube Endpoint",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sonarQubeSpecifyDB": {
                  "aliases": [
                    "sqDbDetailsRequired"
                  ],
                  "description": "The SonarQube server version is lower than 5.2",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "testResultsFiles": {
                  "description": "Test Results Files",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testRunTitle": {
                  "description": "Test Run Title",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Maven\n\nBuild with Apache Maven",
              "ignoreCase": "value",
              "pattern": "^Maven@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Run SQL Stored Procedure inputs",
              "properties": {
                "databaseName": {
                  "description": "Database Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "queryTimeout": {
                  "description": "Query Timeout",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "serverName": {
                  "description": "Server Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sprocName": {
                  "description": "Stored Procedure",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sprocParameters": {
                  "description": "Parameters",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "userName": {
                  "description": "SQL Server Login",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "userPassword": {
                  "description": "SQL Server Authentication password",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "serverName",
                "databaseName",
                "sprocName"
              ]
            },
            "task": {
              "description": "Run SQL Stored Procedure\n\nAllows you to run a SQL Stored Procedure",
              "ignoreCase": "value",
              "pattern": "^RunStoredSqlScript@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "deprecationMessage": "DotNetCoreCLI is deprecated - Build, test and publish using dotnet core command-line.",
          "doNotSuggest": true,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": ".NET Core (PREVIEW) inputs",
              "properties": {
                "arguments": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "command": {
                  "description": "Command",
                  "enum": [
                    "build",
                    "publish",
                    "restore",
                    "test",
                    "run"
                  ],
                  "ignoreCase": "all"
                },
                "projects": {
                  "description": "Project(s)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "publishWebProjects": {
                  "description": "Publish Web Projects",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "zipAfterPublish": {
                  "description": "Zip Published Projects",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": []
            },
            "task": {
              "description": ".NET Core (PREVIEW)\n\nBuild, test and publish using dotnet core command-line.",
              "ignoreCase": "value",
              "pattern": "^DotNetCoreCLI@0$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": ".NET Core inputs",
              "properties": {
                "arguments": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "buildProperties": {
                  "description": "Additional build properties",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "command": {
                  "description": "Command",
                  "enum": [
                    "build",
                    "push",
                    "pack",
                    "publish",
                    "restore",
                    "run",
                    "test",
                    "custom"
                  ],
                  "ignoreCase": "all"
                },
                "configuration": {
                  "aliases": [
                    "configurationToPack"
                  ],
                  "description": "Configuration to Package",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "custom": {
                  "description": "Custom command",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "externalFeedCredentials": {
                  "aliases": [
                    "externalEndpoints"
                  ],
                  "description": "Credentials for feeds outside this organization/collection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "feedsToUse": {
                  "aliases": [
                    "selectOrConfig"
                  ],
                  "description": "Feeds to use",
                  "enum": [
                    "select",
                    "config"
                  ],
                  "ignoreCase": "all"
                },
                "includeNuGetOrg": {
                  "description": "Use packages from NuGet.org",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "includesource": {
                  "description": "Include Source",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "includesymbols": {
                  "description": "Include Symbols",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "majorVersion": {
                  "aliases": [
                    "requestedMajorVersion"
                  ],
                  "description": "Major",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "minorVersion": {
                  "aliases": [
                    "requestedMinorVersion"
                  ],
                  "description": "Minor",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "modifyOutputPath": {
                  "description": "Add project's folder name to publish path",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "noCache": {
                  "description": "Disable local cache",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "nobuild": {
                  "description": "Do not build",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "nuGetFeedType": {
                  "description": "Target feed location",
                  "enum": [
                    "internal",
                    "external"
                  ],
                  "ignoreCase": "all"
                },
                "nugetConfigPath": {
                  "description": "Path to NuGet.config",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "packDirectory": {
                  "aliases": [
                    "outputDir"
                  ],
                  "description": "Package Folder",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "packagesToPack": {
                  "aliases": [
                    "searchPatternPack"
                  ],
                  "description": "Path to csproj or nuspec file(s) to pack",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "packagesToPush": {
                  "aliases": [
                    "searchPatternPush"
                  ],
                  "description": "Path to NuGet package(s) to publish",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "patchVersion": {
                  "aliases": [
                    "requestedPatchVersion"
                  ],
                  "description": "Patch",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "projects": {
                  "description": "Path to project(s)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "publishFeedCredentials": {
                  "aliases": [
                    "externalEndpoint"
                  ],
                  "description": "NuGet server",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "publishPackageMetadata": {
                  "description": "Publish pipeline metadata",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "publishTestResults": {
                  "description": "Publish test results and code coverage",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "publishVstsFeed": {
                  "aliases": [
                    "feedPublish"
                  ],
                  "description": "Target feed",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "publishWebProjects": {
                  "description": "Publish web projects",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "restoreArguments": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "restoreDirectory": {
                  "aliases": [
                    "packagesDirectory"
                  ],
                  "description": "Destination directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testRunTitle": {
                  "description": "Test run title",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "verbosityPack": {
                  "description": "Verbosity",
                  "enum": [
                    "-",
                    "Quiet",
                    "Minimal",
                    "Normal",
                    "Detailed",
                    "Diagnostic"
                  ],
                  "ignoreCase": "all"
                },
                "verbosityRestore": {
                  "description": "Verbosity",
                  "enum": [
                    "-",
                    "Quiet",
                    "Minimal",
                    "Normal",
                    "Detailed",
                    "Diagnostic"
                  ],
                  "ignoreCase": "all"
                },
                "versionEnvVar": {
                  "description": "Environment variable",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "versioningScheme": {
                  "description": "Automatic package versioning",
                  "enum": [
                    "off",
                    "byPrereleaseNumber",
                    "byEnvVar",
                    "byBuildNumber"
                  ],
                  "ignoreCase": "all"
                },
                "vstsFeed": {
                  "aliases": [
                    "feedRestore"
                  ],
                  "description": "Use packages from this Azure Artifacts feed",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "workingDirectory": {
                  "description": "Working directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "zipAfterPublish": {
                  "description": "Zip published projects",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": []
            },
            "task": {
              "description": ".NET Core\n\nBuild, test, package, or publish a dotnet application, or run a custom dotnet command",
              "ignoreCase": "value",
              "pattern": "^DotNetCoreCLI@2$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": ".NET Core inputs",
              "properties": {
                "arguments": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "command": {
                  "description": "Command",
                  "enum": [
                    "build",
                    "publish",
                    "restore",
                    "test",
                    "run"
                  ],
                  "ignoreCase": "all"
                },
                "projects": {
                  "description": "Project(s)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "publishWebProjects": {
                  "description": "Publish Web Projects",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "zipAfterPublish": {
                  "description": "Zip Published Projects",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": []
            },
            "task": {
              "description": ".NET Core\n\nBuild, test and publish using dotnet core command-line.",
              "ignoreCase": "value",
              "pattern": "^DotNetCoreCLI@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Install Topshelf Service inputs",
              "properties": {
                "AdminPassword": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AdminUserName": {
                  "description": "Admin Login",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Description": {
                  "description": "Service Description",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "DisplayName": {
                  "description": "Display Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "EnvironmentName": {
                  "description": "Machines",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "InstanceName": {
                  "description": "Instance Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "KillMmcTaskManager": {
                  "description": "Before uninstall kill all mmc\\taskmgr",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "RunPowershellInParallel": {
                  "description": "Run PowerShell in Parallel",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "ServiceName": {
                  "description": "Service Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ServicePassword": {
                  "description": "Service Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ServiceUsername": {
                  "description": "Service Username",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "StartupType": {
                  "description": "Service Startup Type",
                  "enum": [
                    "default",
                    "manual",
                    "autostart",
                    "delayed",
                    "disabled"
                  ],
                  "ignoreCase": "all"
                },
                "TestCertificate": {
                  "description": "Test Certificate",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "TopshelfExePaths": {
                  "description": "Topshelf Exe Paths",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "UninstallFirst": {
                  "description": "UnInstall service first",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "deploymentGroup": {
                  "description": "Target is Deployment Group",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "protocol": {
                  "description": "Protocol",
                  "enum": [
                    "Http",
                    "Https"
                  ],
                  "ignoreCase": "all"
                },
                "specialUser": {
                  "description": "Special User",
                  "enum": [
                    "custom",
                    "localsystem",
                    "localservice",
                    "networkservice"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": [
                "TopshelfExePaths"
              ]
            },
            "task": {
              "description": "Install Topshelf Service\n\nInstalls a TopShelf service using the standard command line options for Topshelf 4.0.",
              "ignoreCase": "value",
              "pattern": "^InstallTopshelfService@8$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "deprecationMessage": "XamarinComponentRestore is deprecated - This task is deprecated. Use 'NuGet' instead.",
          "doNotSuggest": true,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Xamarin Component Restore inputs",
              "properties": {
                "email": {
                  "description": "Email",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "password": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "solutionFile": {
                  "aliases": [
                    "solution"
                  ],
                  "description": "Path to solution",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "email",
                "password"
              ]
            },
            "task": {
              "description": "Xamarin Component Restore\n\nThis task is deprecated. Use 'NuGet' instead.",
              "ignoreCase": "value",
              "pattern": "^XamarinComponentRestore@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Azure App Service deploy inputs",
              "properties": {
                "AdditionalArguments": {
                  "description": "Additional arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AppSettings": {
                  "description": "App settings",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ConfigurationSettings": {
                  "description": "Configuration settings",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ConnectionType": {
                  "description": "Connection type",
                  "enum": [
                    "AzureRM",
                    "PublishProfile"
                  ],
                  "ignoreCase": "all"
                },
                "DeploymentType": {
                  "description": "Deployment method",
                  "enum": [
                    "webDeploy",
                    "zipDeploy",
                    "runFromZip"
                  ],
                  "ignoreCase": "all"
                },
                "DockerImageTag": {
                  "description": "Tag",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "DockerNamespace": {
                  "description": "Registry or Namespace",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "DockerRepository": {
                  "description": "Image",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ExcludeFilesFromAppDataFlag": {
                  "description": "Exclude files from the App_Data folder",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "InlineScript": {
                  "description": "Inline Script",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "JSONFiles": {
                  "description": "JSON variable substitution",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PublishProfilePassword": {
                  "description": "Publish profile password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PublishProfilePath": {
                  "description": "Publish profile path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "RemoveAdditionalFilesFlag": {
                  "description": "Remove additional files at destination",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "RenameFilesFlag": {
                  "description": "Rename locked files",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "ResourceGroupName": {
                  "description": "Resource group",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "RuntimeStack": {
                  "description": "Runtime Stack",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "RuntimeStackFunction": {
                  "description": "Runtime Stack",
                  "enum": [
                    "DOTNET|2.2",
                    "DOTNET|3.1",
                    "JAVA|8",
                    "JAVA|11",
                    "NODE|8",
                    "NODE|10",
                    "NODE|12",
                    "NODE|14",
                    "PYTHON|3.6",
                    "PYTHON|3.7",
                    "PYTHON|3.8"
                  ],
                  "ignoreCase": "all"
                },
                "ScriptPath": {
                  "description": "Deployment script path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ScriptType": {
                  "description": "Deployment script type",
                  "enum": [
                    "",
                    "Inline Script",
                    "File Path"
                  ],
                  "ignoreCase": "all"
                },
                "SetParametersFile": {
                  "description": "SetParameters file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SlotName": {
                  "description": "Slot",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "StartupCommand": {
                  "description": "Startup command ",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "TakeAppOfflineFlag": {
                  "description": "Take App Offline",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "VirtualApplication": {
                  "description": "Virtual application",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "WebAppName": {
                  "description": "App Service name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "WebConfigParameters": {
                  "description": "Generate web.config parameters for Python, Node.js, Go and Java apps",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "appType": {
                  "aliases": [
                    "WebAppKind"
                  ],
                  "description": "App Service type",
                  "enum": [
                    "webApp",
                    "webAppLinux",
                    "webAppContainer",
                    "webAppHyperVContainer",
                    "functionApp",
                    "functionAppLinux",
                    "functionAppContainer",
                    "apiApp",
                    "mobileApp"
                  ],
                  "ignoreCase": "all"
                },
                "azureSubscription": {
                  "aliases": [
                    "ConnectedServiceName"
                  ],
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "deployToSlotOrASE": {
                  "aliases": [
                    "DeployToSlotOrASEFlag"
                  ],
                  "description": "Deploy to Slot or App Service Environment",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "enableCustomDeployment": {
                  "aliases": [
                    "UseWebDeploy"
                  ],
                  "description": "Select deployment method",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "enableXmlTransform": {
                  "aliases": [
                    "XmlTransformation"
                  ],
                  "description": "XML transformation",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "enableXmlVariableSubstitution": {
                  "aliases": [
                    "XmlVariableSubstitution"
                  ],
                  "description": "XML variable substitution",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "packageForLinux": {
                  "aliases": [
                    "Package"
                  ],
                  "description": "Package or folder",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Azure App Service deploy\n\nDeploy to Azure App Service a web, mobile, or API app using Docker, Java, .NET, .NET Core, Node.js, PHP, Python, or Ruby",
              "ignoreCase": "value",
              "pattern": "^AzureRmWebAppDeployment@4$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Azure App Service Deploy inputs",
              "properties": {
                "AdditionalArguments": {
                  "description": "Additional Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ConnectedServiceName": {
                  "description": "Azure Subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "DeployToSlotFlag": {
                  "description": "Deploy to slot",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "ExcludeFilesFromAppDataFlag": {
                  "description": "Exclude Files from the App_Data Folder",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "Package": {
                  "description": "Package or Folder",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "RemoveAdditionalFilesFlag": {
                  "description": "Remove Additional Files at Destination",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "ResourceGroupName": {
                  "description": "Resource group",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SetParametersFile": {
                  "description": "SetParameters File",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SlotName": {
                  "description": "Slot",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "TakeAppOfflineFlag": {
                  "description": "Take App Offline",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "UseWebDeploy": {
                  "description": "Publish using Web Deploy",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "VirtualApplication": {
                  "description": "Virtual Application",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "WebAppName": {
                  "description": "App Service name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "WebAppUri": {
                  "description": "App Service URL",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "ConnectedServiceName",
                "WebAppName"
              ]
            },
            "task": {
              "description": "Azure App Service Deploy\n\nUpdate Azure App Service using Web Deploy / Kudu REST APIs",
              "ignoreCase": "value",
              "pattern": "^AzureRmWebAppDeployment@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Azure App Service deploy inputs",
              "properties": {
                "AdditionalArguments": {
                  "description": "Additional arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AppSettings": {
                  "description": "App settings",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AzureContainerRegistry": {
                  "description": "Registry",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AzureContainerRegistryImage": {
                  "description": "Image",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AzureContainerRegistryLoginServer": {
                  "description": "Registry Login Server Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AzureContainerRegistryTag": {
                  "description": "Tag",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ConfigurationSettings": {
                  "description": "Configuration settings",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "DeployToSlotFlag": {
                  "description": "Deploy to slot",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "DockerImageTag": {
                  "description": "Tag",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "DockerNamespace": {
                  "description": "Registry or Namespace",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "DockerRepository": {
                  "description": "Image",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "DockerRepositoryAccess": {
                  "description": "Repository Access",
                  "enum": [
                    "private",
                    "public"
                  ],
                  "ignoreCase": "all"
                },
                "ExcludeFilesFromAppDataFlag": {
                  "description": "Exclude files from the App_Data folder",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "GenerateWebConfig": {
                  "description": "Generate Web.config",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "ImageSource": {
                  "description": "Image Source",
                  "enum": [
                    "Registry",
                    "Builtin"
                  ],
                  "ignoreCase": "all"
                },
                "InlineScript": {
                  "description": "Inline Script",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "JSONFiles": {
                  "description": "JSON variable substitution",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Package": {
                  "description": "Package or folder",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PrivateRegistryImage": {
                  "description": "Image",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PrivateRegistryTag": {
                  "description": "Tag",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "RemoveAdditionalFilesFlag": {
                  "description": "Remove additional files at destination",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "RenameFilesFlag": {
                  "description": "Rename locked files",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "ResourceGroupName": {
                  "description": "Resource group",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "RuntimeStack": {
                  "description": "Runtime Stack",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ScriptPath": {
                  "description": "Deployment script path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ScriptType": {
                  "description": "Deployment script type",
                  "enum": [
                    "",
                    "Inline Script",
                    "File Path"
                  ],
                  "ignoreCase": "all"
                },
                "SetParametersFile": {
                  "description": "SetParameters file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SlotName": {
                  "description": "Slot",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "StartupCommand": {
                  "description": "Startup command ",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "TakeAppOfflineFlag": {
                  "description": "Take App Offline",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "UseWebDeploy": {
                  "description": "Publish using Web Deploy",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "VirtualApplication": {
                  "description": "Virtual application",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "WebAppName": {
                  "description": "App Service name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "WebAppUri": {
                  "description": "App Service URL",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "WebConfigParameters": {
                  "description": "Web.config parameters",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "appType": {
                  "aliases": [
                    "WebAppKind"
                  ],
                  "description": "App type",
                  "enum": [
                    "app",
                    "applinux",
                    "functionapp",
                    "api",
                    "mobileapp"
                  ],
                  "ignoreCase": "all"
                },
                "azureSubscription": {
                  "aliases": [
                    "ConnectedServiceName"
                  ],
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "dockerRegistryConnection": {
                  "aliases": [
                    "RegistryConnectedServiceName"
                  ],
                  "description": "Registry Connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "enableXmlTransform": {
                  "aliases": [
                    "XmlTransformation"
                  ],
                  "description": "XML transformation",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "enableXmlVariableSubstitution": {
                  "aliases": [
                    "XmlVariableSubstitution"
                  ],
                  "description": "XML variable substitution",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "packageForLinux": {
                  "aliases": [
                    "BuiltinLinuxPackage"
                  ],
                  "description": "Package or folder",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "azureSubscription",
                "WebAppName"
              ]
            },
            "task": {
              "description": "Azure App Service deploy\n\nDeploy to Azure App Service a web, mobile, or API app using Docker, Java, .NET, .NET Core, Node.js, PHP, Python, or Ruby",
              "ignoreCase": "value",
              "pattern": "^AzureRmWebAppDeployment@3$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "PowerShell on Target Machines inputs",
              "properties": {
                "AdminPassword": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AdminUserName": {
                  "description": "Admin Login",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "EnvironmentName": {
                  "description": "Machines",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "InitializationScriptPath": {
                  "description": "Initialization Script",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "MachineNames": {
                  "description": "Filter Criteria",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Protocol": {
                  "description": "Protocol",
                  "enum": [
                    "Http",
                    "Https"
                  ],
                  "ignoreCase": "all"
                },
                "ResourceFilteringMethod": {
                  "description": "Select Machines By",
                  "enum": [
                    "machineNames",
                    "tags"
                  ],
                  "ignoreCase": "all"
                },
                "RunPowershellInParallel": {
                  "description": "Run PowerShell in Parallel",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "ScriptArguments": {
                  "description": "Script Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ScriptPath": {
                  "description": "PowerShell Script",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SessionVariables": {
                  "description": "Session Variables",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "TestCertificate": {
                  "description": "Test Certificate",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": [
                "EnvironmentName",
                "ScriptPath"
              ]
            },
            "task": {
              "description": "PowerShell on Target Machines\n\nExecute PowerShell scripts on remote machine(s)",
              "ignoreCase": "value",
              "pattern": "^PowerShellOnTargetMachines@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "PowerShell on target machines inputs",
              "properties": {
                "AuthenticationMechanism": {
                  "description": "Authentication",
                  "enum": [
                    "Default",
                    "Credssp"
                  ],
                  "ignoreCase": "all"
                },
                "CommunicationProtocol": {
                  "description": "Protocol",
                  "enum": [
                    "Http",
                    "Https"
                  ],
                  "ignoreCase": "all"
                },
                "ErrorActionPreference": {
                  "description": "ErrorActionPreference",
                  "enum": [
                    "stop",
                    "continue",
                    "silentlyContinue"
                  ],
                  "ignoreCase": "all"
                },
                "InitializationScript": {
                  "description": "Initialization script",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "InlineScript": {
                  "description": "Script",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Machines": {
                  "description": "Machines",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "NewPsSessionOptionArguments": {
                  "description": "Session Option parameters",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "RunPowershellInParallel": {
                  "description": "Run PowerShell in Parallel",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "ScriptArguments": {
                  "description": "Script Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ScriptPath": {
                  "description": "Script File Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ScriptType": {
                  "description": "Script Type",
                  "enum": [
                    "FilePath",
                    "Inline"
                  ],
                  "ignoreCase": "all"
                },
                "SessionVariables": {
                  "description": "Session Variables",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "UserName": {
                  "description": "Username",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "UserPassword": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "WorkingDirectory": {
                  "description": "Working Directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "failOnStderr": {
                  "description": "Fail on Standard Error",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "ignoreLASTEXITCODE": {
                  "description": "Ignore $LASTEXITCODE",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": [
                "Machines"
              ]
            },
            "task": {
              "description": "PowerShell on target machines\n\nExecute PowerShell scripts on remote machines using PSSession and Invoke-Command for remoting",
              "ignoreCase": "value",
              "pattern": "^PowerShellOnTargetMachines@3$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "PowerShell on Target Machines inputs",
              "properties": {
                "AdminPassword": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AdminUserName": {
                  "description": "Admin Login",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "EnvironmentName": {
                  "description": "Machines",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "InitializationScriptPath": {
                  "description": "Initialization Script",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "MachineNames": {
                  "description": "Filter Criteria",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Protocol": {
                  "description": "Protocol",
                  "enum": [
                    "Http",
                    "Https"
                  ],
                  "ignoreCase": "all"
                },
                "ResourceFilteringMethod": {
                  "description": "Select Machines By",
                  "enum": [
                    "machineNames",
                    "tags"
                  ],
                  "ignoreCase": "all"
                },
                "RunPowershellInParallel": {
                  "description": "Run PowerShell in Parallel",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "ScriptArguments": {
                  "description": "Script Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ScriptPath": {
                  "description": "PowerShell Script",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SessionVariables": {
                  "description": "Session Variables",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "TestCertificate": {
                  "description": "Test Certificate",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": [
                "EnvironmentName",
                "ScriptPath"
              ]
            },
            "task": {
              "description": "PowerShell on Target Machines\n\nExecute PowerShell scripts on remote machine(s)",
              "ignoreCase": "value",
              "pattern": "^PowerShellOnTargetMachines@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Publish code coverage results v2 inputs",
              "properties": {
                "failIfCoverageEmpty": {
                  "description": "Fail if code coverage results are missing",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "pathToSources": {
                  "description": "Path to Source files",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "summaryFileLocation": {
                  "description": "Path to summary files",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "summaryFileLocation"
              ]
            },
            "task": {
              "description": "Publish code coverage results v2\n\nPublish any of the code coverage results from a build",
              "ignoreCase": "value",
              "pattern": "^PublishCodeCoverageResults@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Publish code coverage results inputs",
              "properties": {
                "additionalCodeCoverageFiles": {
                  "description": "Additional files",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "codeCoverageTool": {
                  "description": "Code coverage tool",
                  "enum": [
                    "Cobertura",
                    "JaCoCo"
                  ],
                  "ignoreCase": "all"
                },
                "failIfCoverageEmpty": {
                  "description": "Fail when code coverage results are missing",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "pathToSources": {
                  "description": "Path to Source files",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "reportDirectory": {
                  "description": "Report directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "summaryFileLocation": {
                  "description": "Summary file",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "summaryFileLocation"
              ]
            },
            "task": {
              "description": "Publish code coverage results\n\nPublish Cobertura or JaCoCo code coverage results from a build",
              "ignoreCase": "value",
              "pattern": "^PublishCodeCoverageResults@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "deprecationMessage": "RunVisualStudioTestsusingTestAgent is deprecated - Deprecated: This task and its companion task (Visual Studio Test Agent Deployment) are deprecated. Use the 'Visual Studio Test' task instead. The VSTest task can run unit as well as functional tests. Run tests on one or more agents using the multi-agent job setting. Use the 'Visual Studio Test Platform' task to run tests without needing Visual Studio on the agent. VSTest task also brings new capabilities such as automatically rerunning failed tests.",
          "doNotSuggest": true,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Run functional tests inputs",
              "properties": {
                "autMachineGroup": {
                  "description": "Application Under Test Machines",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "codeCoverageEnabled": {
                  "description": "Code Coverage Enabled",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "configuration": {
                  "description": "Configuration",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "customSlicingEnabled": {
                  "description": "Distribute tests by number of machines",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "dropLocation": {
                  "description": "Test Drop Location",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "overrideRunParams": {
                  "description": "Override Test Run Parameters",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "platform": {
                  "description": "Platform",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "runSettingsFile": {
                  "description": "Run Settings File",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sourcefilters": {
                  "description": "Test Assembly",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testConfiguration": {
                  "description": "Test Configuration",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testConfigurations": {
                  "description": "Test Configurations",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testFilterCriteria": {
                  "description": "Test Filter criteria",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testMachineGroup": {
                  "description": "Machines",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testPlan": {
                  "description": "Test Plan",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testRunTitle": {
                  "description": "Test Run Title",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testSelection": {
                  "description": "Test Selection",
                  "enum": [
                    "testAssembly",
                    "testPlan"
                  ],
                  "ignoreCase": "all"
                },
                "testSuite": {
                  "description": "Test Suite",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "testMachineGroup",
                "dropLocation"
              ]
            },
            "task": {
              "description": "Run functional tests\n\nDeprecated: This task and its companion task (Visual Studio Test Agent Deployment) are deprecated. Use the 'Visual Studio Test' task instead. The VSTest task can run unit as well as functional tests. Run tests on one or more agents using the multi-agent job setting. Use the 'Visual Studio Test Platform' task to run tests without needing Visual Studio on the agent. VSTest task also brings new capabilities such as automatically rerunning failed tests.",
              "ignoreCase": "value",
              "pattern": "^RunVisualStudioTestsusingTestAgent@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "SSIS Deploy inputs",
              "properties": {
                "authType": {
                  "description": "Authentication type",
                  "enum": [
                    "winAuth",
                    "sql",
                    "adPwd",
                    "adInt"
                  ],
                  "ignoreCase": "all"
                },
                "connectionStringSuffix": {
                  "description": "Connection string suffix",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "destinationPath": {
                  "description": "Destination path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "destinationServer": {
                  "description": "Destination server",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "destinationType": {
                  "description": "Destination type",
                  "enum": [
                    "file",
                    "ssisdb"
                  ],
                  "ignoreCase": "all"
                },
                "domainName": {
                  "description": "Domain name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "password": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sourcePath": {
                  "description": "Source path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "username": {
                  "description": "Username",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "whetherContinue": {
                  "description": "Continue deployment when error occurs",
                  "enum": [
                    "yes",
                    "no"
                  ],
                  "ignoreCase": "all"
                },
                "whetherOverwrite": {
                  "description": "Overwrite existing projects or SSISDeploymentManifest files of same names",
                  "enum": [
                    "yes",
                    "no"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": [
                "sourcePath",
                "destinationType",
                "destinationPath"
              ]
            },
            "task": {
              "description": "SSIS Deploy\n\nDeploy single or multiple ispac files to on-premise SSIS catalog and Azure-SSIS IR, or SSISDeploymentManifest files and their associated files to on-premise or Azure file share.",
              "ignoreCase": "value",
              "pattern": "^SSISDeploy@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "SSIS Deploy inputs",
              "properties": {
                "authType": {
                  "description": "Authentication type",
                  "enum": [
                    "win",
                    "sql",
                    "adPwd",
                    "adInt"
                  ],
                  "ignoreCase": "all"
                },
                "connectionStringSuffix": {
                  "description": "Connection string suffix",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "destinationPath": {
                  "description": "Destination path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "destinationServer": {
                  "description": "Destination server",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "destinationType": {
                  "description": "Destination type",
                  "enum": [
                    "file",
                    "ssisdb"
                  ],
                  "ignoreCase": "all"
                },
                "domainName": {
                  "description": "Domain name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "password": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "projectPassword": {
                  "description": "Project password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sourcePath": {
                  "description": "Source path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "username": {
                  "description": "Username",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "whetherContinue": {
                  "description": "Continue deployment when error occurs",
                  "enum": [
                    "yes",
                    "no"
                  ],
                  "ignoreCase": "all"
                },
                "whetherOverwrite": {
                  "description": "Overwrite existing projects or SSISDeploymentManifest files of same names",
                  "enum": [
                    "yes",
                    "no"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": [
                "sourcePath",
                "destinationType",
                "destinationPath"
              ]
            },
            "task": {
              "description": "SSIS Deploy\n\nDeploy single or multiple ispac files to on-premise SSIS catalog and Azure-SSIS IR, or SSISDeploymentManifest files and their associated files to on-premise or Azure file share.",
              "ignoreCase": "value",
              "pattern": "^SSISDeploy@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Manual intervention inputs",
              "properties": {
                "emailRecipients": {
                  "description": "Notify users",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "instructions": {
                  "description": "Instructions",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "onTimeout": {
                  "description": "On timeout",
                  "enum": [
                    "reject",
                    "resume"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": []
            },
            "task": {
              "description": "Manual intervention\n\nPause deployment and wait for manual intervention",
              "ignoreCase": "value",
              "pattern": "^ManualIntervention@8$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Power Platform Apply Solution Upgrade inputs",
              "properties": {
                "AsyncOperation": {
                  "description": "Apply Solution Upgrade as asynchronous operation",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "Environment": {
                  "description": "Environment Url",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "MaxAsyncWaitTime": {
                  "description": "Maximum wait time in minutes for asynchronous operation",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerPlatformEnvironment": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerPlatformSPN": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SolutionName": {
                  "description": "Solution Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "authenticationType": {
                  "description": "Authentication type",
                  "enum": [
                    "PowerPlatformEnvironment",
                    "PowerPlatformSPN"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": [
                "SolutionName"
              ]
            },
            "task": {
              "description": "Power Platform Apply Solution Upgrade\n\nPower Platform Apply Solution Upgrade",
              "ignoreCase": "value",
              "pattern": "^PowerPlatformApplySolutionUpgrade@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Install Apple Provisioning Profile inputs",
              "properties": {
                "provProfileSecureFile": {
                  "description": "Provisioning Profile",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "removeProfile": {
                  "description": "Remove Profile After Build",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": [
                "provProfileSecureFile"
              ]
            },
            "task": {
              "description": "Install Apple Provisioning Profile\n\nInstall an Apple provisioning profile required to build on a macOS agent",
              "ignoreCase": "value",
              "pattern": "^InstallAppleProvisioningProfile@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Install Apple provisioning profile inputs",
              "properties": {
                "provProfileSecureFile": {
                  "description": "Provisioning profile",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "provProfileSourceRepository": {
                  "description": "Provisioning profile",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "provisioningProfileLocation": {
                  "description": "Provisioning profile location",
                  "enum": [
                    "secureFiles",
                    "sourceRepository"
                  ],
                  "ignoreCase": "all"
                },
                "removeProfile": {
                  "description": "Remove profile after build",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": []
            },
            "task": {
              "description": "Install Apple provisioning profile\n\nInstall an Apple provisioning profile required to build on a macOS agent machine",
              "ignoreCase": "value",
              "pattern": "^InstallAppleProvisioningProfile@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "deprecationMessage": "SonarQubePostTest is deprecated - [DEPRECATED] Finish the analysis and upload the results to SonarQube",
          "doNotSuggest": true,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "SonarQube for MSBuild - End Analysis inputs",
              "properties": {},
              "required": []
            },
            "task": {
              "description": "SonarQube for MSBuild - End Analysis\n\n[DEPRECATED] Finish the analysis and upload the results to SonarQube",
              "ignoreCase": "value",
              "pattern": "^SonarQubePostTest@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Power Platform Copy Environment inputs",
              "properties": {
                "CopyType": {
                  "description": "Copy Type",
                  "enum": [
                    "FullCopy",
                    "MinimalCopy"
                  ],
                  "ignoreCase": "all"
                },
                "DisableAdminMode": {
                  "description": "Disable Admin Mode",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "Environment": {
                  "description": "Source Environment Url",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "FriendlyName": {
                  "description": "Friendly Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "OverrideFriendlyName": {
                  "description": "Override Friendly Name",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "PowerPlatformEnvironment": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerPlatformSPN": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "TargetEnvironmentUrl": {
                  "description": "Target environment url",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "authenticationType": {
                  "description": "Authentication type",
                  "enum": [
                    "PowerPlatformEnvironment",
                    "PowerPlatformSPN"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": [
                "TargetEnvironmentUrl"
              ]
            },
            "task": {
              "description": "Power Platform Copy Environment\n\nPower Platform Copy Environment",
              "ignoreCase": "value",
              "pattern": "^PowerPlatformCopyEnvironment@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "PyPI publisher inputs",
              "properties": {
                "alsoPublishWheel": {
                  "aliases": [
                    "wheel"
                  ],
                  "description": "Also publish a wheel",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "packageDirectory": {
                  "aliases": [
                    "wd"
                  ],
                  "description": "Python package directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "pypiConnection": {
                  "aliases": [
                    "serviceEndpoint"
                  ],
                  "description": "PyPI service connection",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "pypiConnection",
                "packageDirectory"
              ]
            },
            "task": {
              "description": "PyPI publisher\n\nCreate and upload an sdist or wheel to a PyPI-compatible index using Twine",
              "ignoreCase": "value",
              "pattern": "^PyPIPublisher@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Power Platform Create Environment inputs",
              "properties": {
                "AppsTemplate": {
                  "description": "Select Dynamics365 apps",
                  "enum": [
                    "D365_CDSSampleApp",
                    "D365_CustomerService",
                    "D365_CustomerServicePro",
                    "D365_DeveloperEdition",
                    "D365_FieldService",
                    "D365_Guides",
                    "D365_PowerFrameworkTemplate",
                    "D365_ProjectOperations",
                    "D365_RemoteAssist",
                    "D365_Sales",
                    "D365_SalesPro",
                    "D365_SmbMarketing"
                  ],
                  "ignoreCase": "all"
                },
                "CurrencyName": {
                  "description": "Currency",
                  "enum": [
                    "XDR",
                    "USD",
                    "XCD",
                    "AED",
                    "AFN",
                    "ALL",
                    "AMD",
                    "ARS",
                    "EUR",
                    "AUD",
                    "AZN",
                    "BAM",
                    "BDT",
                    "BGN",
                    "BHD",
                    "BND",
                    "BOB",
                    "BRL",
                    "BTN",
                    "BWP",
                    "BYN",
                    "BZD",
                    "CAD",
                    "CDF",
                    "CHF",
                    "XOF",
                    "CLP",
                    "XAF",
                    "CNY",
                    "COP",
                    "CRC",
                    "CUP",
                    "CZK",
                    "DJF",
                    "DKK",
                    "DOP",
                    "DZD",
                    "EGP",
                    "ERN",
                    "ETB",
                    "GBP",
                    "GEL",
                    "GTQ",
                    "HKD",
                    "HNL",
                    "HRK",
                    "HTG",
                    "HUF",
                    "IDR",
                    "ILS",
                    "INR",
                    "IQD",
                    "IRR",
                    "ISK",
                    "JMD",
                    "JOD",
                    "JPY",
                    "KES",
                    "KGS",
                    "KHR",
                    "KRW",
                    "KWD",
                    "KZT",
                    "LAK",
                    "LBP",
                    "LKR",
                    "LYD",
                    "MAD",
                    "MDL",
                    "MKD",
                    "MMK",
                    "MNT",
                    "MOP",
                    "MVR",
                    "MXN",
                    "MYR",
                    "NGN",
                    "NIO",
                    "NOK",
                    "NPR",
                    "NZD",
                    "OMR",
                    "PAB",
                    "PEN",
                    "PHP",
                    "PKR",
                    "PLN",
                    "PYG",
                    "QAR",
                    "RON",
                    "RSD",
                    "RUB",
                    "RWF",
                    "SAR",
                    "SEK",
                    "SGD",
                    "SOS",
                    "SYP",
                    "THB",
                    "TJS",
                    "TMT",
                    "TND",
                    "TRY",
                    "TTD",
                    "TWD",
                    "UAH",
                    "UYU",
                    "UZS",
                    "VES",
                    "VND",
                    "YER",
                    "ZAR"
                  ],
                  "ignoreCase": "all"
                },
                "DisplayName": {
                  "description": "Environment display name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "DomainName": {
                  "description": "Domain Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "EnvironmentSku": {
                  "description": "Environment type",
                  "enum": [
                    "Trial",
                    "Sandbox",
                    "Production",
                    "SubscriptionBasedTrial"
                  ],
                  "ignoreCase": "all"
                },
                "LanguageName": {
                  "description": "Language",
                  "enum": [
                    "English",
                    "Arabic",
                    "euskara (euskara)",
                    " ()",
                    "catal (catal)",
                    "Chinese (Hong Kong S.A.R.)",
                    "Chinese (PRC)",
                    "Chinese (Taiwan)",
                    "hrvatski (Hrvatska)",
                    "Czech",
                    "Danish",
                    "Dutch",
                    "eesti (Eesti)",
                    "Finnish",
                    "French",
                    "galego (galego)",
                    "German",
                    "Greek",
                    "Hebrew",
                    " ()",
                    "Hungarian",
                    "Italian",
                    "Japanese",
                    "  ()",
                    "Korean",
                    "latvieu (Latvija)",
                    "lietuvi (Lietuva)",
                    "Norwegian (Bokml)",
                    "Polish",
                    "Portuguese (Brazil)",
                    "Portuguese (Portugal)",
                    "romn (Romnia)",
                    "Russian",
                    "srpski (Srbija i Crna Gora (Biva))",
                    "slovenina (Slovensko)",
                    "slovenina (Slovenija)",
                    "Spanish",
                    "Swedish",
                    "Thai",
                    "Turkish",
                    " ()",
                    "Vietnamese",
                    "Serbian (Cyrillic)",
                    "Malay"
                  ],
                  "ignoreCase": "all"
                },
                "LocationName": {
                  "description": "Region",
                  "enum": [
                    "unitedstates",
                    "europe",
                    "asia",
                    "australia",
                    "india",
                    "japan",
                    "canada",
                    "unitedkingdom",
                    "unitedstatesfirstrelease",
                    "southamerica",
                    "france",
                    "switzerland",
                    "germany"
                  ],
                  "ignoreCase": "all"
                },
                "PowerPlatformEnvironment": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerPlatformSPN": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "TeamId": {
                  "description": "Team ID",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "authenticationType": {
                  "description": "Authentication type",
                  "enum": [
                    "PowerPlatformEnvironment",
                    "PowerPlatformSPN"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": [
                "DisplayName",
                "DomainName"
              ]
            },
            "task": {
              "description": "Power Platform Create Environment\n\nPower Platform Create Environment",
              "ignoreCase": "value",
              "pattern": "^PowerPlatformCreateEnvironment@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "deprecationMessage": "ChefKnife is deprecated - Run scripts with Knife commands on your Chef workstation",
          "doNotSuggest": true,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Chef Knife inputs",
              "properties": {
                "ConnectedServiceName": {
                  "description": "Chef Subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ScriptArguments": {
                  "description": "Script Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ScriptPath": {
                  "description": "Script Path",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "ConnectedServiceName",
                "ScriptPath"
              ]
            },
            "task": {
              "description": "Chef Knife\n\nRun scripts with Knife commands on your Chef workstation",
              "ignoreCase": "value",
              "pattern": "^ChefKnife@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Replace Tokens inputs",
              "properties": {
                "actionOnMissing": {
                  "description": "Action on missing variable",
                  "enum": [
                    "continue",
                    "warn",
                    "fail"
                  ],
                  "ignoreCase": "all"
                },
                "actionOnNoFiles": {
                  "description": "Action on no file processed",
                  "enum": [
                    "continue",
                    "warn",
                    "fail"
                  ],
                  "ignoreCase": "all"
                },
                "charsToEscape": {
                  "description": "Characters to escape",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "defaultValue": {
                  "description": "Default value",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "emptyValue": {
                  "description": "Empty value",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "enableRecursion": {
                  "description": "Enable recursion in values",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "enableTelemetry": {
                  "description": "Send anonymous usage telemetry",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "enableTransforms": {
                  "description": "Enable transformations",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "encoding": {
                  "description": "Files encoding",
                  "enum": [
                    "auto",
                    "ascii",
                    "utf-7",
                    "utf-8",
                    "utf-16le",
                    "utf-16be",
                    "win1252",
                    "iso88591"
                  ],
                  "ignoreCase": "all"
                },
                "escapeChar": {
                  "description": "Escape character",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "escapeType": {
                  "description": "Escape values type",
                  "enum": [
                    "auto",
                    "none",
                    "json",
                    "xml",
                    "custom"
                  ],
                  "ignoreCase": "all"
                },
                "inlineVariables": {
                  "description": "Inline variables (YAML syntax)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "keepToken": {
                  "description": "Keep token for missing variable",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "rootDirectory": {
                  "description": "Root directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "targetFiles": {
                  "description": "Target files",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "tokenPattern": {
                  "description": "Token pattern",
                  "enum": [
                    "default",
                    "rm",
                    "octopus",
                    "azpipelines",
                    "doublebraces",
                    "custom"
                  ],
                  "ignoreCase": "all"
                },
                "tokenPrefix": {
                  "description": "Token prefix",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "tokenSuffix": {
                  "description": "Token suffix",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "transformPrefix": {
                  "description": "Transform prefix",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "transformSuffix": {
                  "description": "Transform suffix",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "useDefaultValue": {
                  "description": "Use default value",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "useLegacyEmptyFeature": {
                  "description": "Use legacy empty/default feature",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "useLegacyPattern": {
                  "description": "Use legacy pattern",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "variableFiles": {
                  "description": "Files (JSON or YAML)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "variableSeparator": {
                  "description": "Separator",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "verbosity": {
                  "description": "Verbosity",
                  "enum": [
                    "normal",
                    "detailed",
                    "off"
                  ],
                  "ignoreCase": "all"
                },
                "writeBOM": {
                  "description": "Write unicode BOM",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": []
            },
            "task": {
              "description": "Replace Tokens\n\nReplace tokens in files",
              "ignoreCase": "value",
              "pattern": "^replacetokens@4$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Replace Tokens inputs",
              "properties": {
                "actionOnMissing": {
                  "description": "Action on missing variable",
                  "enum": [
                    "continue",
                    "warn",
                    "fail"
                  ],
                  "ignoreCase": "all"
                },
                "actionOnNoFiles": {
                  "description": "Action on no file found",
                  "enum": [
                    "continue",
                    "warn",
                    "fail"
                  ],
                  "ignoreCase": "all"
                },
                "charsToEscape": {
                  "description": "Characters to escape",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "defaultValue": {
                  "description": "Default value",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "emptyValue": {
                  "description": "Empty value",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "enableRecursion": {
                  "description": "Enable recursion in values",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "enableTelemetry": {
                  "description": "Send anonymous usage telemetry",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "enableTransforms": {
                  "description": "Enable transformations",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "encoding": {
                  "description": "Files encoding",
                  "enum": [
                    "auto",
                    "ascii",
                    "utf-7",
                    "utf-8",
                    "utf-16le",
                    "utf-16be",
                    "win1252",
                    "iso88591"
                  ],
                  "ignoreCase": "all"
                },
                "escapeChar": {
                  "description": "Escape character",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "escapeType": {
                  "description": "Escape values type",
                  "enum": [
                    "auto",
                    "none",
                    "json",
                    "xml",
                    "custom"
                  ],
                  "ignoreCase": "all"
                },
                "inlineVariables": {
                  "description": "Inline variables (YAML syntax)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "keepToken": {
                  "description": "Keep token for missing variable",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "rootDirectory": {
                  "description": "Root directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "targetFiles": {
                  "description": "Target files",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "tokenPrefix": {
                  "description": "Token prefix",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "tokenSuffix": {
                  "description": "Token suffix",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "transformPrefix": {
                  "description": "Transform prefix",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "transformSuffix": {
                  "description": "Transform suffix",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "useDefaultValue": {
                  "description": "Use default value",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "useLegacyEmptyFeature": {
                  "description": "Use legacy empty/default feature",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "useLegacyPattern": {
                  "description": "Use legacy pattern",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "variableFiles": {
                  "description": "Files (JSON or YAML)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "variableSeparator": {
                  "description": "Separator",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "verbosity": {
                  "description": "Verbosity",
                  "enum": [
                    "normal",
                    "detailed",
                    "off"
                  ],
                  "ignoreCase": "all"
                },
                "writeBOM": {
                  "description": "Write unicode BOM",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": []
            },
            "task": {
              "description": "Replace Tokens\n\nReplace tokens in files",
              "ignoreCase": "value",
              "pattern": "^replacetokens@3$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Replace Tokens inputs",
              "properties": {
                "actionOnMissing": {
                  "description": "Action on missing variable",
                  "enum": [
                    "continue",
                    "warn",
                    "fail"
                  ],
                  "ignoreCase": "all"
                },
                "actionOnNoFiles": {
                  "description": "Action on no file processed",
                  "enum": [
                    "continue",
                    "warn",
                    "fail"
                  ],
                  "ignoreCase": "all"
                },
                "charsToEscape": {
                  "description": "Characters to escape",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "defaultValue": {
                  "description": "Default value",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "emptyValue": {
                  "description": "Empty value",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "enableRecursion": {
                  "description": "Enable recursion in values",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "enableTelemetry": {
                  "description": "Send anonymous usage telemetry",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "enableTransforms": {
                  "description": "Enable transformations",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "encoding": {
                  "description": "Files encoding",
                  "enum": [
                    "auto",
                    "ascii",
                    "utf-7",
                    "utf-8",
                    "utf-16le",
                    "utf-16be",
                    "win1252",
                    "iso88591"
                  ],
                  "ignoreCase": "all"
                },
                "escapeChar": {
                  "description": "Escape character",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "escapeType": {
                  "description": "Escape values type",
                  "enum": [
                    "auto",
                    "none",
                    "json",
                    "xml",
                    "custom"
                  ],
                  "ignoreCase": "all"
                },
                "inlineVariables": {
                  "description": "Inline variables (YAML syntax)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "keepToken": {
                  "description": "Keep token for missing variable",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "rootDirectory": {
                  "description": "Root directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "targetFiles": {
                  "description": "Target files",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "tokenPattern": {
                  "description": "Token pattern",
                  "enum": [
                    "default",
                    "rm",
                    "octopus",
                    "azpipelines",
                    "doublebraces",
                    "custom"
                  ],
                  "ignoreCase": "all"
                },
                "tokenPrefix": {
                  "description": "Token prefix",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "tokenSuffix": {
                  "description": "Token suffix",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "transformPrefix": {
                  "description": "Transform prefix",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "transformSuffix": {
                  "description": "Transform suffix",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "useDefaultValue": {
                  "description": "Use default value",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "useLegacyEmptyFeature": {
                  "description": "Use legacy empty/default feature",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "useLegacyPattern": {
                  "description": "Use legacy pattern",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "variableFiles": {
                  "description": "Files (JSON or YAML)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "variableSeparator": {
                  "description": "Separator",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "verbosity": {
                  "description": "Verbosity",
                  "enum": [
                    "normal",
                    "detailed",
                    "off"
                  ],
                  "ignoreCase": "all"
                },
                "writeBOM": {
                  "description": "Write unicode BOM",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": []
            },
            "task": {
              "description": "Replace Tokens\n\nReplace tokens in files",
              "ignoreCase": "value",
              "pattern": "^replacetokens@5$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Go tool installer inputs",
              "properties": {
                "goBin": {
                  "description": "GOBIN",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "goPath": {
                  "description": "GOPATH",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "version": {
                  "description": "Version",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Go tool installer\n\nFind in cache or download a specific version of Go and add it to the PATH",
              "ignoreCase": "value",
              "pattern": "^GoTool@0$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "SSIS Catalog Configuration inputs",
              "properties": {
                "authType": {
                  "description": "Authentication type",
                  "enum": [
                    "win",
                    "sql",
                    "adpwd",
                    "adint"
                  ],
                  "ignoreCase": "all"
                },
                "configContent": {
                  "description": "Inline configuration JSON",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "configPath": {
                  "description": "Configuration JSON file path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "configSource": {
                  "description": "Configuration file source",
                  "enum": [
                    "filePath",
                    "inline"
                  ],
                  "ignoreCase": "all"
                },
                "connectionStringSuffix": {
                  "description": "Connection string suffix",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "password": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "rollBackOnError": {
                  "description": "Roll back configuration when error occurs",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "targetServer": {
                  "description": "Target server",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "username": {
                  "description": "Username",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "targetServer",
                "authType"
              ]
            },
            "task": {
              "description": "SSIS Catalog Configuration\n\nConfigure folders, projects and environments of SSIS catalog based on a JSON configuration file or inline string.",
              "ignoreCase": "value",
              "pattern": "^SSISCatalog@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "deprecationMessage": "XcodePackageiOS is deprecated - Generate an .ipa file from Xcode build output using xcrun (Xcode 7 or below)",
          "doNotSuggest": true,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Xcode Package iOS inputs",
              "properties": {
                "appName": {
                  "description": "Name of .app",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "appPath": {
                  "description": "Path to .app",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ipaName": {
                  "description": "Name of .ipa",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ipaPath": {
                  "description": "Path to place .ipa",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "provisioningProfile": {
                  "description": "Provisioning Profile Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sdk": {
                  "description": "SDK",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "provisioningProfile"
              ]
            },
            "task": {
              "description": "Xcode Package iOS\n\nGenerate an .ipa file from Xcode build output using xcrun (Xcode 7 or below)",
              "ignoreCase": "value",
              "pattern": "^XcodePackageiOS@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Go inputs",
              "properties": {
                "arguments": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "command": {
                  "description": "Command",
                  "enum": [
                    "get",
                    "build",
                    "test",
                    "custom"
                  ],
                  "ignoreCase": "all"
                },
                "customCommand": {
                  "description": "Custom command",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "workingDirectory": {
                  "description": "Working directory",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Go\n\nGet, build, or test a Go application, or run a custom Go command",
              "ignoreCase": "value",
              "pattern": "^Go@0$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Terraform inputs",
              "properties": {
                "backendAWSBucketName": {
                  "description": "Bucket",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendAWSKey": {
                  "description": "Key",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendAzureRmContainerName": {
                  "description": "Container",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendAzureRmKey": {
                  "description": "Key",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendAzureRmResourceGroupName": {
                  "description": "Resource group",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendAzureRmStorageAccountName": {
                  "description": "Storage account",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendGCPBucketName": {
                  "description": "Bucket",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendGCPPrefix": {
                  "description": "Prefix of state file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendServiceAWS": {
                  "description": "Amazon Web Services connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendServiceArm": {
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendServiceGCP": {
                  "description": "Google Cloud Platform connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "command": {
                  "description": "Command",
                  "enum": [
                    "init",
                    "validate",
                    "plan",
                    "apply",
                    "destroy"
                  ],
                  "ignoreCase": "all"
                },
                "commandOptions": {
                  "description": "Additional command arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "environmentServiceNameAWS": {
                  "description": "Amazon Web Services connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "environmentServiceNameAzureRM": {
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "environmentServiceNameGCP": {
                  "description": "Google Cloud Platform connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "provider": {
                  "description": "Provider",
                  "enum": [
                    "azurerm",
                    "aws",
                    "gcp"
                  ],
                  "ignoreCase": "all"
                },
                "workingDirectory": {
                  "description": "Configuration directory",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "backendServiceArm",
                "backendAzureRmResourceGroupName",
                "backendAzureRmStorageAccountName",
                "backendAzureRmContainerName",
                "backendAzureRmKey",
                "backendServiceAWS",
                "backendAWSBucketName",
                "backendAWSKey",
                "backendServiceGCP",
                "backendGCPBucketName"
              ]
            },
            "task": {
              "description": "Terraform\n\nExecute terraform commands to manage resources on AzureRM, Amazon Web Services(AWS) and Google Cloud Platform(GCP)",
              "ignoreCase": "value",
              "pattern": "^TerraformTaskV1@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Terraform inputs",
              "properties": {
                "backendAWSBucketName": {
                  "description": "Bucket",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendAWSKey": {
                  "description": "Key",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendAzureRmContainerName": {
                  "description": "Container",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendAzureRmKey": {
                  "description": "Key",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendAzureRmResourceGroupName": {
                  "description": "Resource group",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendAzureRmStorageAccountName": {
                  "description": "Storage account",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendGCPBucketName": {
                  "description": "Bucket",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendGCPPrefix": {
                  "description": "Prefix of state file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendServiceAWS": {
                  "description": "Amazon Web Services connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendServiceArm": {
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendServiceGCP": {
                  "description": "Google Cloud Platform connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "command": {
                  "description": "Command",
                  "enum": [
                    "init",
                    "validate",
                    "plan",
                    "show",
                    "apply",
                    "output",
                    "destroy",
                    "custom"
                  ],
                  "ignoreCase": "all"
                },
                "commandOptions": {
                  "description": "Additional command arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "customCommand": {
                  "description": "Custom command",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "environmentServiceNameAWS": {
                  "description": "Amazon Web Services connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "environmentServiceNameAzureRM": {
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "environmentServiceNameGCP": {
                  "description": "Google Cloud Platform connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "fileName": {
                  "description": "Filename",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "outputFormat": {
                  "description": "Output format",
                  "enum": [
                    "json",
                    "default"
                  ],
                  "ignoreCase": "all"
                },
                "outputTo": {
                  "description": "Output to",
                  "enum": [
                    "file",
                    "console"
                  ],
                  "ignoreCase": "all"
                },
                "provider": {
                  "description": "Provider",
                  "enum": [
                    "azurerm",
                    "aws",
                    "gcp"
                  ],
                  "ignoreCase": "all"
                },
                "workingDirectory": {
                  "description": "Configuration directory",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "backendServiceArm",
                "backendAzureRmResourceGroupName",
                "backendAzureRmStorageAccountName",
                "backendAzureRmContainerName",
                "backendAzureRmKey",
                "backendServiceAWS",
                "backendAWSBucketName",
                "backendAWSKey",
                "backendServiceGCP",
                "backendGCPBucketName"
              ]
            },
            "task": {
              "description": "Terraform\n\nExecute terraform commands to manage resources on AzureRM, Amazon Web Services(AWS) and Google Cloud Platform(GCP)",
              "ignoreCase": "value",
              "pattern": "^TerraformTaskV3@3$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Terraform inputs",
              "properties": {
                "backendAWSBucketName": {
                  "description": "Bucket",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendAWSKey": {
                  "description": "Key",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendAzureRmContainerName": {
                  "description": "Container",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendAzureRmKey": {
                  "description": "Key",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendAzureRmResourceGroupName": {
                  "description": "Resource group",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendAzureRmStorageAccountName": {
                  "description": "Storage account",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendGCPBucketName": {
                  "description": "Bucket",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendGCPPrefix": {
                  "description": "Prefix of state file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendServiceAWS": {
                  "description": "Amazon Web Services connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendServiceArm": {
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendServiceGCP": {
                  "description": "Google Cloud Platform connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "command": {
                  "description": "Command",
                  "enum": [
                    "init",
                    "validate",
                    "plan",
                    "apply",
                    "destroy"
                  ],
                  "ignoreCase": "all"
                },
                "commandOptions": {
                  "description": "Additional command arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "environmentServiceNameAWS": {
                  "description": "Amazon Web Services connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "environmentServiceNameAzureRM": {
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "environmentServiceNameGCP": {
                  "description": "Google Cloud Platform connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "provider": {
                  "description": "Provider",
                  "enum": [
                    "azurerm",
                    "aws",
                    "gcp"
                  ],
                  "ignoreCase": "all"
                },
                "workingDirectory": {
                  "description": "Configuration directory",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "backendServiceArm",
                "backendAzureRmResourceGroupName",
                "backendAzureRmStorageAccountName",
                "backendAzureRmContainerName",
                "backendAzureRmKey",
                "backendServiceAWS",
                "backendAWSBucketName",
                "backendAWSKey",
                "backendServiceGCP",
                "backendGCPBucketName"
              ]
            },
            "task": {
              "description": "Terraform\n\nExecute terraform commands to manage resources on AzureRM, Amazon Web Services(AWS) and Google Cloud Platform(GCP)",
              "ignoreCase": "value",
              "pattern": "^TerraformTaskV2@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Terraform inputs",
              "properties": {
                "backendAWSBucketName": {
                  "description": "Bucket",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendAWSKey": {
                  "description": "Key",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendAzureRmContainerName": {
                  "description": "Container",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendAzureRmKey": {
                  "description": "Key",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendAzureRmResourceGroupName": {
                  "description": "Resource group",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendAzureRmStorageAccountName": {
                  "description": "Storage account",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendGCPBucketName": {
                  "description": "Bucket",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendGCPPrefix": {
                  "description": "Prefix of state file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendServiceAWS": {
                  "description": "Amazon Web Services connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendServiceArm": {
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backendServiceGCP": {
                  "description": "Google Cloud Platform connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "command": {
                  "description": "Command",
                  "enum": [
                    "init",
                    "validate",
                    "plan",
                    "show",
                    "apply",
                    "output",
                    "destroy",
                    "custom"
                  ],
                  "ignoreCase": "all"
                },
                "commandOptions": {
                  "description": "Additional command arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "customCommand": {
                  "description": "Custom command",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "environmentServiceNameAWS": {
                  "description": "Amazon Web Services connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "environmentServiceNameAzureRM": {
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "environmentServiceNameGCP": {
                  "description": "Google Cloud Platform connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "fileName": {
                  "description": "Filename",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "outputFormat": {
                  "description": "Output format",
                  "enum": [
                    "json",
                    "default"
                  ],
                  "ignoreCase": "all"
                },
                "outputTo": {
                  "description": "Output to",
                  "enum": [
                    "file",
                    "console"
                  ],
                  "ignoreCase": "all"
                },
                "provider": {
                  "description": "Provider",
                  "enum": [
                    "azurerm",
                    "aws",
                    "gcp"
                  ],
                  "ignoreCase": "all"
                },
                "workingDirectory": {
                  "description": "Configuration directory",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "backendServiceArm",
                "backendAzureRmResourceGroupName",
                "backendAzureRmStorageAccountName",
                "backendAzureRmContainerName",
                "backendAzureRmKey",
                "backendServiceAWS",
                "backendAWSBucketName",
                "backendAWSKey",
                "backendServiceGCP",
                "backendGCPBucketName"
              ]
            },
            "task": {
              "description": "Terraform\n\nExecute terraform commands to manage resources on AzureRM, Amazon Web Services(AWS) and Google Cloud Platform(GCP)",
              "ignoreCase": "value",
              "pattern": "^TerraformTaskV4@4$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Publish Pipeline Metadata inputs",
              "properties": {},
              "required": []
            },
            "task": {
              "description": "Publish Pipeline Metadata\n\nPublish Pipeline Metadata to Evidence store",
              "ignoreCase": "value",
              "pattern": "^PublishPipelineMetadata@0$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Docker inputs",
              "properties": {
                "action": {
                  "description": "Action",
                  "enum": [
                    "Build an image",
                    "Tag images",
                    "Push an image",
                    "Push images",
                    "Run an image",
                    "Run a Docker command"
                  ],
                  "ignoreCase": "all"
                },
                "addBaseImageData": {
                  "description": "Add base image metadata to image(s)",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "additionalImageTags": {
                  "description": "Additional Image Tags",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureContainerRegistry": {
                  "description": "Azure Container Registry",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureSubscription": {
                  "aliases": [
                    "azureSubscriptionEndpoint"
                  ],
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "buildArguments": {
                  "description": "Build Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "containerCommand": {
                  "description": "Command",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "containerName": {
                  "description": "Container Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "containerregistrytype": {
                  "description": "Container Registry Type",
                  "enum": [
                    "Azure Container Registry",
                    "Container Registry"
                  ],
                  "ignoreCase": "all"
                },
                "context": {
                  "description": "Build Context",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "customCommand": {
                  "description": "Command",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "defaultContext": {
                  "description": "Use Default Build Context",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "detached": {
                  "description": "Run In Background",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "dockerFile": {
                  "description": "Docker File",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "dockerHostEndpoint": {
                  "description": "Docker Host Service Connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "dockerRegistryConnection": {
                  "aliases": [
                    "dockerRegistryEndpoint"
                  ],
                  "description": "Docker Registry Service Connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "enforceDockerNamingConvention": {
                  "description": "Force image name to follow Docker naming convention",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "entrypoint": {
                  "description": "Entry Point Override",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "envVars": {
                  "description": "Environment Variables",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "imageDigestFile": {
                  "description": "Image Digest File",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "imageName": {
                  "description": "Image Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "imageNamesPath": {
                  "description": "Image Names Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "includeLatestTag": {
                  "description": "Include Latest Tag",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "includeSourceTags": {
                  "description": "Include Source Tags",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "memory": {
                  "description": "Memory limit",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ports": {
                  "description": "Ports",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "qualifyImageName": {
                  "description": "Qualify Image Name",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "restartMaxRetries": {
                  "description": "Maximum Restart Retries",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "restartPolicy": {
                  "description": "Restart Policy",
                  "enum": [
                    "no",
                    "onFailure",
                    "always",
                    "unlessStopped"
                  ],
                  "ignoreCase": "all"
                },
                "volumes": {
                  "description": "Volumes",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "workDir": {
                  "description": "Working Directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "workingDirectory": {
                  "aliases": [
                    "cwd"
                  ],
                  "description": "Working Directory",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Docker\n\nBuild, tag, push, or run Docker images, or run a Docker command",
              "ignoreCase": "value",
              "pattern": "^Docker@0$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Docker inputs",
              "properties": {
                "Dockerfile": {
                  "description": "Dockerfile",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "addBaseImageData": {
                  "description": "Add base image metadata to image(s)",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "addPipelineData": {
                  "description": "Add Pipeline metadata to image(s)",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "arguments": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "buildContext": {
                  "description": "Build context",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "command": {
                  "description": "Command",
                  "enum": [
                    "buildAndPush",
                    "build",
                    "push",
                    "login",
                    "logout",
                    "start",
                    "stop"
                  ],
                  "ignoreCase": "all"
                },
                "container": {
                  "description": "Container",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "containerRegistry": {
                  "description": "Container registry",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "repository": {
                  "description": "Container repository",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "tags": {
                  "description": "Tags",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Docker\n\nBuild or push Docker images, login or logout, start or stop containers, or run a Docker command",
              "ignoreCase": "value",
              "pattern": "^Docker@2$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Docker inputs",
              "properties": {
                "addBaseImageData": {
                  "description": "Add base image metadata to image(s)",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "addDefaultLabels": {
                  "description": "Add default labels",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "arguments": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureContainerRegistry": {
                  "description": "Azure container registry",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureSubscriptionEndpoint": {
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "buildContext": {
                  "description": "Build context",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "command": {
                  "description": "Command",
                  "enum": [
                    "Build an image",
                    "Tag image",
                    "Push an image",
                    "Run an image",
                    "login",
                    "logout"
                  ],
                  "ignoreCase": "all"
                },
                "containerCommand": {
                  "description": "Container command",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "containerName": {
                  "description": "Container name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "containerregistrytype": {
                  "description": "Container registry type",
                  "enum": [
                    "Azure Container Registry",
                    "Container Registry"
                  ],
                  "ignoreCase": "all"
                },
                "dockerFile": {
                  "description": "Dockerfile",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "dockerHostEndpoint": {
                  "description": "Docker host service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "dockerRegistryEndpoint": {
                  "description": "Docker registry service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "enforceDockerNamingConvention": {
                  "description": "Force image name to follow Docker naming convention",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "entrypointOverride": {
                  "description": "Entry point override",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "envVars": {
                  "description": "Environment variables",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "imageDigestFile": {
                  "description": "Image digest file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "imageName": {
                  "description": "Image name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "imageNamesPath": {
                  "description": "Image names path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "includeLatestTag": {
                  "description": "Include latest tag",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "includeSourceTags": {
                  "description": "Include source tags",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "maxRestartRetries": {
                  "description": "Maximum restart retries",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "memoryLimit": {
                  "description": "Memory limit",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ports": {
                  "description": "Ports",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "pushMultipleImages": {
                  "description": "Push multiple images",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "qualifyImageName": {
                  "description": "Qualify image name",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "qualifySourceImageName": {
                  "description": "Qualify source image name",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "restartPolicy": {
                  "description": "Restart policy",
                  "enum": [
                    "no",
                    "onFailure",
                    "always",
                    "unlessStopped"
                  ],
                  "ignoreCase": "all"
                },
                "runInBackground": {
                  "description": "Run in background",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "tagMultipleImages": {
                  "description": "Tag multiple images",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "useDefaultContext": {
                  "description": "Use default build context",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "volumes": {
                  "description": "Volumes",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "workingDirectory": {
                  "description": "Working directory",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Docker\n\nBuild, tag, push, or run Docker images, or run a Docker command",
              "ignoreCase": "value",
              "pattern": "^Docker@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Jenkins Queue Job inputs",
              "properties": {
                "captureConsole": {
                  "description": "Capture console output and wait for completion",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "capturePipeline": {
                  "description": "Capture pipeline output and wait for pipeline completion",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "isMultibranchJob": {
                  "description": "Job is of Multibranch Pipeline type",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "jobName": {
                  "description": "Job name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "jobParameters": {
                  "description": "Job parameters",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "multibranchPipelineBranch": {
                  "description": "Multibranch Pipeline Branch",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "parameterizedJob": {
                  "description": "Parameterized job",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "serverEndpoint": {
                  "description": "Jenkins service endpoint",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "serverEndpoint",
                "jobName"
              ]
            },
            "task": {
              "description": "Jenkins Queue Job\n\nQueue a job on a Jenkins server",
              "ignoreCase": "value",
              "pattern": "^JenkinsQueueJob@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Jenkins queue job inputs",
              "properties": {
                "captureConsole": {
                  "description": "Capture console output and wait for completion",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "capturePipeline": {
                  "description": "Capture pipeline output and wait for pipeline completion",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "delayBetweenRetries": {
                  "description": "Time between retries",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "failOnUnstableResult": {
                  "description": "Fail on unstable result",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "isMultibranchJob": {
                  "description": "Job is of multibranch pipeline type",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "isParameterizedJob": {
                  "aliases": [
                    "parameterizedJob"
                  ],
                  "description": "Parameterized job",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "jobName": {
                  "description": "Job name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "jobParameters": {
                  "description": "Job parameters",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "multibranchPipelineBranch": {
                  "description": "Multibranch pipeline branch",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "retryCount": {
                  "description": "Number of retries for failed connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "serverEndpoint": {
                  "description": "Jenkins service connection",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "serverEndpoint",
                "jobName"
              ]
            },
            "task": {
              "description": "Jenkins queue job\n\nQueue a job on a Jenkins server",
              "ignoreCase": "value",
              "pattern": "^JenkinsQueueJob@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "FTP upload inputs",
              "properties": {
                "clean": {
                  "description": "Delete remote directory",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "cleanContents": {
                  "description": "Clear remote directory contents",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "credentialsOption": {
                  "aliases": [
                    "credsType"
                  ],
                  "description": "Authentication Method",
                  "enum": [
                    "serviceEndpoint",
                    "inputs"
                  ],
                  "ignoreCase": "all"
                },
                "customCmds": {
                  "description": "FTP Commands",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "enableUtf8": {
                  "description": "Enable UTF8 support",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "filePatterns": {
                  "description": "File patterns",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "password": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "preservePaths": {
                  "description": "Preserve file paths",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "remoteDirectory": {
                  "aliases": [
                    "remotePath"
                  ],
                  "description": "Remote directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "rootDirectory": {
                  "aliases": [
                    "rootFolder"
                  ],
                  "description": "Root folder",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "serverEndpoint": {
                  "description": "FTP Service Connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "serverUrl": {
                  "description": "Server URL",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "trustSSL": {
                  "description": "Trust server certificate",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "username": {
                  "description": "Username",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "rootDirectory"
              ]
            },
            "task": {
              "description": "FTP upload\n\nUpload files using FTP",
              "ignoreCase": "value",
              "pattern": "^FtpUpload@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "FTP upload inputs",
              "properties": {
                "clean": {
                  "description": "Delete remote directory",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "cleanContents": {
                  "description": "Clear remote directory contents",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "credentialsOption": {
                  "aliases": [
                    "credsType"
                  ],
                  "description": "Authentication Method",
                  "enum": [
                    "serviceEndpoint",
                    "inputs"
                  ],
                  "ignoreCase": "all"
                },
                "filePatterns": {
                  "description": "File patterns",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "overwrite": {
                  "description": "Overwrite",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "password": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "preservePaths": {
                  "description": "Preserve file paths",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "remoteDirectory": {
                  "aliases": [
                    "remotePath"
                  ],
                  "description": "Remote directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "rootDirectory": {
                  "aliases": [
                    "rootFolder"
                  ],
                  "description": "Root folder",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "serverEndpoint": {
                  "description": "FTP Service Connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "serverUrl": {
                  "description": "Server URL",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "trustSSL": {
                  "description": "Trust server certificate",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "username": {
                  "description": "Username",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "rootDirectory"
              ]
            },
            "task": {
              "description": "FTP upload\n\nUpload files using FTP",
              "ignoreCase": "value",
              "pattern": "^FtpUpload@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Windows machine file copy inputs",
              "properties": {
                "AdditionalArguments": {
                  "description": "Additional Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AdminPassword": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AdminUserName": {
                  "description": "Admin Login",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "CleanTargetBeforeCopy": {
                  "description": "Clean Target",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "CopyFilesInParallel": {
                  "description": "Copy Files in Parallel",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "EnvironmentName": {
                  "description": "Machines",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "MachineNames": {
                  "description": "Filter Criteria",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ResourceFilteringMethod": {
                  "description": "Select Machines By",
                  "enum": [
                    "machineNames",
                    "tags"
                  ],
                  "ignoreCase": "all"
                },
                "SourcePath": {
                  "description": "Source",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "TargetPath": {
                  "description": "Destination Folder",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "SourcePath",
                "TargetPath"
              ]
            },
            "task": {
              "description": "Windows machine file copy\n\nCopy files to remote Windows machines",
              "ignoreCase": "value",
              "pattern": "^WindowsMachineFileCopy@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Windows machine file copy inputs",
              "properties": {
                "AdditionalArguments": {
                  "description": "Additional Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AdminPassword": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AdminUserName": {
                  "description": "Admin Login",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "CleanTargetBeforeCopy": {
                  "description": "Clean Target",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "CopyFilesInParallel": {
                  "description": "Copy Files in Parallel",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "MachineNames": {
                  "description": "Machines",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SourcePath": {
                  "description": "Source",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "TargetPath": {
                  "description": "Destination Folder",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "SourcePath",
                "MachineNames",
                "AdminUserName",
                "AdminPassword",
                "TargetPath"
              ]
            },
            "task": {
              "description": "Windows machine file copy\n\nCopy files to remote Windows machines",
              "ignoreCase": "value",
              "pattern": "^WindowsMachineFileCopy@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Terraform tool installer inputs",
              "properties": {
                "terraformVersion": {
                  "description": "Version",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Terraform tool installer\n\nFind in cache or download a specific version of Terraform and prepend it to the PATH",
              "ignoreCase": "value",
              "pattern": "^TerraformInstaller@0$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Terraform tool installer inputs",
              "properties": {
                "terraformVersion": {
                  "description": "Version",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Terraform tool installer\n\nFind in cache or download a specific version of Terraform and prepend it to the PATH",
              "ignoreCase": "value",
              "pattern": "^TerraformInstaller@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "deprecationMessage": "AndroidBuild is deprecated - [Deprecated]  Use Gradle",
          "doNotSuggest": true,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Android Build inputs",
              "properties": {
                "avdAbi": {
                  "description": "AVD ABI",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "avdForce": {
                  "description": "Overwrite Existing AVD",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "avdName": {
                  "description": "Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "avdOptionalArgs": {
                  "description": "Create AVD Optional Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "createAvd": {
                  "description": "Create AVD",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "deleteAvd": {
                  "description": "Delete AVD",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "emulatorDevice": {
                  "description": "AVD Device",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "emulatorHeadless": {
                  "description": "Headless Display",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "emulatorOptionalArgs": {
                  "description": "Emulator Optional Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "emulatorTarget": {
                  "description": "AVD Target SDK",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "emulatorTimeout": {
                  "description": "Timeout in Seconds",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "gradleArguments": {
                  "description": "Gradle Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "gradleProj": {
                  "description": "Project Directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "gradleWrapper": {
                  "description": "Location of Gradle Wrapper",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "startEmulator": {
                  "description": "Start and Stop Android Emulator",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": []
            },
            "task": {
              "description": "Android Build\n\n[Deprecated]  Use Gradle",
              "ignoreCase": "value",
              "pattern": "^AndroidBuild@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Python twine upload authenticate inputs",
              "properties": {
                "artifactFeeds": {
                  "aliases": [
                    "feedList"
                  ],
                  "description": "My feeds (select below)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "externalFeeds": {
                  "aliases": [
                    "externalSources"
                  ],
                  "description": "Feeds from external organizations",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "publishPackageMetadata": {
                  "description": "Publish pipeline metadata",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": []
            },
            "task": {
              "description": "Python twine upload authenticate\n\nAuthenticate for uploading Python distributions using twine. Add '-r FeedName/EndpointName --config-file $(PYPIRC_PATH)' to your twine upload command. For feeds present in this organization, use the feed name as the repository (-r). Otherwise, use the endpoint name defined in the service connection.",
              "ignoreCase": "value",
              "pattern": "^TwineAuthenticate@0$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Python twine upload authenticate inputs",
              "properties": {
                "artifactFeed": {
                  "aliases": [
                    "artifactFeed"
                  ],
                  "description": "My feed name (select below)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "pythonUploadServiceConnection": {
                  "aliases": [
                    "pythonUploadServiceConnection"
                  ],
                  "description": "Feed from external organizations",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Python twine upload authenticate\n\nAuthenticate for uploading Python distributions using twine. Add '-r FeedName/EndpointName --config-file $(PYPIRC_PATH)' to your twine upload command. For feeds present in this organization, use the feed name as the repository (-r). Otherwise, use the endpoint name defined in the service connection.",
              "ignoreCase": "value",
              "pattern": "^TwineAuthenticate@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "IIS web app deploy inputs",
              "properties": {
                "AdditionalArguments": {
                  "description": "Additional Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ExcludeFilesFromAppDataFlag": {
                  "description": "Exclude Files from the App_Data Folder",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "JSONFiles": {
                  "description": "JSON variable substitution",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Package": {
                  "description": "Package or Folder",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "RemoveAdditionalFilesFlag": {
                  "description": "Remove Additional Files at Destination",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "SetParametersFile": {
                  "description": "SetParameters File",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "TakeAppOfflineFlag": {
                  "description": "Take App Offline",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "VirtualApplication": {
                  "description": "Virtual Application",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "WebSiteName": {
                  "description": "Website Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "XmlTransformation": {
                  "description": "XML transformation",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "XmlVariableSubstitution": {
                  "description": "XML variable substitution",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": [
                "WebSiteName"
              ]
            },
            "task": {
              "description": "IIS web app deploy\n\nDeploy a website or web application using Web Deploy",
              "ignoreCase": "value",
              "pattern": "^IISWebAppDeploymentOnMachineGroup@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Python script inputs",
              "properties": {
                "arguments": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "failOnStderr": {
                  "description": "Fail on standard error",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "pythonInterpreter": {
                  "description": "Python interpreter",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "script": {
                  "description": "Script",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "scriptPath": {
                  "description": "Script path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "scriptSource": {
                  "description": "Script source",
                  "enum": [
                    "filePath",
                    "inline"
                  ],
                  "ignoreCase": "all"
                },
                "workingDirectory": {
                  "description": "Working directory",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Python script\n\nRun a Python file or inline script",
              "ignoreCase": "value",
              "pattern": "^PythonScript@0$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Helm tool installer inputs",
              "properties": {
                "checkLatestHelmVersion": {
                  "description": "Check for latest version of Helm",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "checkLatestKubectl": {
                  "aliases": [
                    "checkLatestKubeCtl"
                  ],
                  "description": "Check for latest version of kubectl",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "helmVersion": {
                  "description": "Helm Version Spec",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "installKubectl": {
                  "aliases": [
                    "installKubeCtl"
                  ],
                  "description": "Install Kubectl",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "kubectlVersion": {
                  "description": "Kubectl Version Spec",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Helm tool installer\n\nInstall Helm and Kubernetes on an agent machine",
              "ignoreCase": "value",
              "pattern": "^HelmInstaller@0$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Helm tool installer inputs",
              "properties": {
                "helmVersionToInstall": {
                  "description": "Helm Version Spec",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Helm tool installer\n\nInstall Helm on an agent machine",
              "ignoreCase": "value",
              "pattern": "^HelmInstaller@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Power Platform Upload PAPortal inputs",
              "properties": {
                "DeploymentProfile": {
                  "description": "Name of deployment profile",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Environment": {
                  "description": "Environment Url",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerPlatformEnvironment": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerPlatformSPN": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "UploadPath": {
                  "description": "Upload path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "authenticationType": {
                  "description": "Authentication type",
                  "enum": [
                    "PowerPlatformEnvironment",
                    "PowerPlatformSPN"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": [
                "UploadPath"
              ]
            },
            "task": {
              "description": "Power Platform Upload PAPortal\n\nPower Platform Upload PowerPages web site (PAPortal)",
              "ignoreCase": "value",
              "pattern": "^PowerPlatformUploadPaportal@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "deprecationMessage": "XamarinLicense is deprecated - [Deprecated] Upgrade to free version of Xamarin: https://store.xamarin.com",
          "doNotSuggest": true,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Xamarin License inputs",
              "properties": {
                "action": {
                  "description": "Action",
                  "enum": [
                    "Activate",
                    "Deactivate"
                  ],
                  "ignoreCase": "all"
                },
                "email": {
                  "description": "Email",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "password": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "product": {
                  "description": "Xamarin Product",
                  "enum": [
                    "MA",
                    "MT",
                    "MM"
                  ],
                  "ignoreCase": "all"
                },
                "timeout": {
                  "description": "Timeout in Seconds",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "email",
                "password"
              ]
            },
            "task": {
              "description": "Xamarin License\n\n[Deprecated] Upgrade to free version of Xamarin: https://store.xamarin.com",
              "ignoreCase": "value",
              "pattern": "^XamarinLicense@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "deprecationMessage": "NuGetAuthenticate is deprecated - This version of the task is deprecated, use NuGetAuthenticateV1 instead. Configure NuGet tools to authenticate with Azure Artifacts and other NuGet repositories. Requires NuGet >= 4.8.5385, dotnet >= 2.1.400, or MSBuild >= 15.8.166.59604.",
          "doNotSuggest": true,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "NuGet authenticate inputs",
              "properties": {
                "forceReinstallCredentialProvider": {
                  "description": "Reinstall the credential provider even if already installed",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "nuGetServiceConnections": {
                  "description": "Service connection credentials for feeds outside this organization",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "NuGet authenticate\n\nThis version of the task is deprecated, use NuGetAuthenticateV1 instead. Configure NuGet tools to authenticate with Azure Artifacts and other NuGet repositories. Requires NuGet >= 4.8.5385, dotnet >= 2.1.400, or MSBuild >= 15.8.166.59604.",
              "ignoreCase": "value",
              "pattern": "^NuGetAuthenticate@0$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "NuGet authenticate inputs",
              "properties": {
                "forceReinstallCredentialProvider": {
                  "description": "Reinstall the credential provider even if already installed",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "nuGetServiceConnections": {
                  "description": "Service connection credentials for feeds outside this organization",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "NuGet authenticate\n\nConfigure NuGet tools to authenticate with Azure Artifacts and other NuGet repositories. Requires NuGet >= 4.8.5385, dotnet >= 6, or MSBuild >= 15.8.166.59604",
              "ignoreCase": "value",
              "pattern": "^NuGetAuthenticate@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Run SQL Command inputs",
              "properties": {
                "databaseName": {
                  "description": "Database Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "queryTimeout": {
                  "description": "Query Timeout",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "serverName": {
                  "description": "Server Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sqlCommand": {
                  "description": "SQL Command",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "userName": {
                  "description": "SQL Server Login",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "userPassword": {
                  "description": "SQL Server Authentication password",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "serverName",
                "databaseName",
                "sqlCommand"
              ]
            },
            "task": {
              "description": "Run SQL Command\n\nAllows you to run a SQL Command",
              "ignoreCase": "value",
              "pattern": "^RunSqlCommand@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Power Platform Set Solution Version inputs",
              "properties": {
                "PowerPlatformEnvironment": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerPlatformSPN": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SolutionName": {
                  "description": "Solution Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SolutionVersionNumber": {
                  "description": "Solution Version Number",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "authenticationType": {
                  "description": "Authentication type",
                  "enum": [
                    "PowerPlatformEnvironment",
                    "PowerPlatformSPN"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": [
                "SolutionName",
                "SolutionVersionNumber"
              ]
            },
            "task": {
              "description": "Power Platform Set Solution Version\n\nPower Platform Set Solution Version",
              "ignoreCase": "value",
              "pattern": "^PowerPlatformSetSolutionVersion@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Download GitHub Nuget Packages inputs",
              "properties": {
                "externalFeedCredentials": {
                  "aliases": [
                    "externalEndpoints"
                  ],
                  "description": "Credentials for feed from GitHub",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "packageName": {
                  "description": "Package Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "restoreDirectory": {
                  "aliases": [
                    "packagesDirectory"
                  ],
                  "description": "Destination directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "version": {
                  "description": "Package Version",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "packageName",
                "version"
              ]
            },
            "task": {
              "description": "Download GitHub Nuget Packages\n\nRestore your nuget packages using dotnet CLI",
              "ignoreCase": "value",
              "pattern": "^DownloadGitHubNugetPackage@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Power Platform Install Applications inputs",
              "properties": {
                "ApplicationList": {
                  "description": "JSON file with Application List",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Environment": {
                  "description": "Environment Url",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerPlatformEnvironment": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerPlatformSPN": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "authenticationType": {
                  "description": "Authentication type",
                  "enum": [
                    "PowerPlatformEnvironment",
                    "PowerPlatformSPN"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": [
                "ApplicationList"
              ]
            },
            "task": {
              "description": "Power Platform Install Applications\n\nInstall Power Platform Applications from AppSource",
              "ignoreCase": "value",
              "pattern": "^PowerPlatformInstallApplication@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Maven Authenticate inputs",
              "properties": {
                "artifactsFeeds": {
                  "description": "Feeds",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "mavenServiceConnections": {
                  "description": "Credentials for repositories outside this organization/collection",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Maven Authenticate\n\nProvides credentials for Azure Artifacts feeds and external maven repositories",
              "ignoreCase": "value",
              "pattern": "^MavenAuthenticate@0$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "SSIS Build inputs",
              "properties": {
                "configuration": {
                  "description": "Project configuration",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "outputPath": {
                  "description": "Output path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "projectPath": {
                  "description": "Project path",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "projectPath"
              ]
            },
            "task": {
              "description": "SSIS Build\n\nBuild single or multiple SSIS dtproj files in project deployment model or package deployment model.",
              "ignoreCase": "value",
              "pattern": "^SSISBuild@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "SSIS Build inputs",
              "properties": {
                "configuration": {
                  "description": "Project configuration",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "outputPath": {
                  "description": "Output path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "projectPassword": {
                  "description": "Project password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "projectPath": {
                  "description": "Project path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "stripSensitive": {
                  "description": "Strip sensitive data",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": [
                "projectPath"
              ]
            },
            "task": {
              "description": "SSIS Build\n\nBuild single or multiple SSIS dtproj files in project deployment model or package deployment model.",
              "ignoreCase": "value",
              "pattern": "^SSISBuild@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Review App inputs",
              "properties": {
                "baseEnvironmentName": {
                  "description": "Environment name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "resourceName": {
                  "description": "Resource name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "reviewResourceName": {
                  "description": "Review Resource Name",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "resourceName"
              ]
            },
            "task": {
              "description": "Review App\n\nUse this task under deploy phase provider to create a resource dynamically",
              "ignoreCase": "value",
              "pattern": "^ReviewApp@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Java tool installer inputs",
              "properties": {
                "azureCommonVirtualFile": {
                  "description": "Common virtual path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureContainerName": {
                  "description": "Container name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureResourceManagerEndpoint": {
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureStorageAccountName": {
                  "description": "Storage account name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "cleanDestinationDirectory": {
                  "description": "Clean destination directory",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "createExtractDirectory": {
                  "description": "Create directory for extracting",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "jdkArchitectureOption": {
                  "description": "JDK architecture",
                  "enum": [
                    "x64",
                    "x86"
                  ],
                  "ignoreCase": "all"
                },
                "jdkDestinationDirectory": {
                  "description": "Destination directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "jdkFile": {
                  "description": "JDK file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "jdkSourceOption": {
                  "description": "JDK source",
                  "enum": [
                    "AzureStorage",
                    "LocalDirectory",
                    "PreInstalled"
                  ],
                  "ignoreCase": "all"
                },
                "versionSpec": {
                  "description": "JDK version",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "jdkArchitectureOption",
                "jdkSourceOption"
              ]
            },
            "task": {
              "description": "Java tool installer\n\nAcquire a specific version of Java from a user-supplied Azure blob or the tool cache and sets JAVA_HOME",
              "ignoreCase": "value",
              "pattern": "^JavaToolInstaller@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "deprecationMessage": "Chef is deprecated - Deploy to Chef environments by editing environment attributes",
          "doNotSuggest": true,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Chef inputs",
              "properties": {
                "Attributes": {
                  "description": "Environment Attributes",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Environment": {
                  "description": "Environment",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "chefWaitTime": {
                  "description": "Wait Time",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "connectedServiceName": {
                  "description": "Chef Service Connection",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "connectedServiceName",
                "Environment",
                "Attributes"
              ]
            },
            "task": {
              "description": "Chef\n\nDeploy to Chef environments by editing environment attributes",
              "ignoreCase": "value",
              "pattern": "^Chef@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Azure Functions Deploy inputs",
              "properties": {
                "appName": {
                  "description": "Azure Functions App name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "appSettings": {
                  "description": "App settings",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "appType": {
                  "description": "App type",
                  "enum": [
                    "functionApp",
                    "functionAppLinux"
                  ],
                  "ignoreCase": "all"
                },
                "azureSubscription": {
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "deployToSlotOrASE": {
                  "description": "Deploy to Slot or App Service Environment",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "deploymentMethod": {
                  "description": "Deployment method",
                  "enum": [
                    "auto",
                    "zipDeploy",
                    "runFromPackage"
                  ],
                  "ignoreCase": "all"
                },
                "package": {
                  "description": "Package or folder",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "resourceGroupName": {
                  "description": "Resource group",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "runtimeStack": {
                  "description": "Runtime stack",
                  "enum": [
                    "DOTNET|2.2",
                    "DOTNET|3.1",
                    "DOTNET|6.0",
                    "DOTNET-ISOLATED|7.0",
                    "JAVA|8",
                    "JAVA|11",
                    "NODE|8",
                    "NODE|10",
                    "NODE|12",
                    "NODE|14",
                    "NODE|16",
                    "NODE|18",
                    "PYTHON|3.6",
                    "PYTHON|3.7",
                    "PYTHON|3.8",
                    "PYTHON|3.9"
                  ],
                  "ignoreCase": "all"
                },
                "slotName": {
                  "description": "Slot",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "azureSubscription",
                "appType",
                "appName"
              ]
            },
            "task": {
              "description": "Azure Functions Deploy\n\nUpdate a function app with .NET, Python, JavaScript, PowerShell, Java based web applications",
              "ignoreCase": "value",
              "pattern": "^AzureFunctionApp@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Azure Functions inputs",
              "properties": {
                "appName": {
                  "description": "Azure Functions App name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "appSettings": {
                  "description": "App settings",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "appType": {
                  "description": "App type",
                  "enum": [
                    "functionApp",
                    "functionAppLinux"
                  ],
                  "ignoreCase": "all"
                },
                "azureSubscription": {
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "configurationStrings": {
                  "description": "Configuration settings",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "customWebConfig": {
                  "description": "Generate web.config parameters for Python, Node.js, Go and Java apps",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "deployToSlotOrASE": {
                  "description": "Deploy to Slot or App Service Environment",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "deploymentMethod": {
                  "description": "Deployment method",
                  "enum": [
                    "auto",
                    "zipDeploy",
                    "runFromPackage"
                  ],
                  "ignoreCase": "all"
                },
                "package": {
                  "description": "Package or folder",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "resourceGroupName": {
                  "description": "Resource group",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "runtimeStack": {
                  "description": "Runtime stack",
                  "enum": [
                    "DOTNET|2.2",
                    "DOTNET|3.1",
                    "DOTNET|6.0",
                    "JAVA|8",
                    "JAVA|11",
                    "NODE|8",
                    "NODE|10",
                    "NODE|12",
                    "NODE|14",
                    "NODE|16",
                    "PYTHON|3.6",
                    "PYTHON|3.7",
                    "PYTHON|3.8",
                    "PYTHON|3.9"
                  ],
                  "ignoreCase": "all"
                },
                "slotName": {
                  "description": "Slot",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "startUpCommand": {
                  "description": "Startup command ",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "azureSubscription",
                "appType",
                "appName"
              ]
            },
            "task": {
              "description": "Azure Functions\n\nUpdate a function app with .NET, Python, JavaScript, PowerShell, Java based web applications",
              "ignoreCase": "value",
              "pattern": "^AzureFunctionApp@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Power Platform Download PAPortal inputs",
              "properties": {
                "DownloadPath": {
                  "description": "Download path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Environment": {
                  "description": "Environment Url",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ExcludeEntities": {
                  "description": "Entities to exclude",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Overwrite": {
                  "description": "Overwrite data",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "PowerPlatformEnvironment": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerPlatformSPN": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "WebsiteId": {
                  "description": "Id of website",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "authenticationType": {
                  "description": "Authentication type",
                  "enum": [
                    "PowerPlatformEnvironment",
                    "PowerPlatformSPN"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": [
                "DownloadPath",
                "WebsiteId"
              ]
            },
            "task": {
              "description": "Power Platform Download PAPortal\n\nPower Platform Download PowerPages web site (PAPortal)",
              "ignoreCase": "value",
              "pattern": "^PowerPlatformDownloadPaportal@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "npm authenticate (for task runners) inputs",
              "properties": {
                "customEndpoint": {
                  "description": "Credentials for registries outside this organization/collection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "workingFile": {
                  "description": ".npmrc file to authenticate",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "workingFile"
              ]
            },
            "task": {
              "description": "npm authenticate (for task runners)\n\nDon't use this task if you're also using the npm task. Provides npm credentials to an .npmrc file in your repository for the scope of the build. This enables npm task runners like gulp and Grunt to authenticate with private registries.",
              "ignoreCase": "value",
              "pattern": "^npmAuthenticate@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "MSBuild inputs",
              "properties": {
                "clean": {
                  "description": "Clean",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "configuration": {
                  "description": "Configuration",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "createLogFile": {
                  "description": "Create Log File",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "logFileVerbosity": {
                  "description": "Log File Verbosity",
                  "enum": [
                    "quiet",
                    "minimal",
                    "normal",
                    "detailed",
                    "diagnostic"
                  ],
                  "ignoreCase": "all"
                },
                "logProjectEvents": {
                  "description": "Record Project Details",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "maximumCpuCount": {
                  "description": "Build in Parallel",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "msbuildArchitecture": {
                  "description": "MSBuild Architecture",
                  "enum": [
                    "x86",
                    "x64"
                  ],
                  "ignoreCase": "all"
                },
                "msbuildArguments": {
                  "description": "MSBuild Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "msbuildLocation": {
                  "description": "Path to MSBuild",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "msbuildLocationMethod": {
                  "description": "MSBuild",
                  "enum": [
                    "version",
                    "location"
                  ],
                  "ignoreCase": "all"
                },
                "msbuildVersion": {
                  "description": "MSBuild Version",
                  "enum": [
                    "latest",
                    "17.0",
                    "16.0",
                    "15.0",
                    "14.0",
                    "12.0",
                    "4.0"
                  ],
                  "ignoreCase": "all"
                },
                "platform": {
                  "description": "Platform",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "restoreNugetPackages": {
                  "description": "Restore NuGet Packages",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "solution": {
                  "description": "Project",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "MSBuild\n\nBuild with MSBuild",
              "ignoreCase": "value",
              "pattern": "^MSBuild@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Build machine image inputs",
              "properties": {
                "ConnectedServiceName": {
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "additionalBuilderParameters": {
                  "description": "Additional Builder parameters",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureResourceGroup": {
                  "description": "Resource group",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "baseImage": {
                  "description": "Base image",
                  "enum": [
                    "MicrosoftWindowsServer:WindowsServer:2012-R2-Datacenter:windows",
                    "MicrosoftWindowsServer:WindowsServer:2016-Datacenter:windows",
                    "MicrosoftWindowsServer:WindowsServer:2012-Datacenter:windows",
                    "MicrosoftWindowsServer:WindowsServer:2008-R2-SP1:windows",
                    "Canonical:UbuntuServer:14.04.4-LTS:linux",
                    "Canonical:UbuntuServer:16.04-LTS:linux",
                    "RedHat:RHEL:7.2:linux",
                    "RedHat:RHEL:6.8:linux",
                    "OpenLogic:CentOS:7.2:linux",
                    "OpenLogic:CentOS:6.8:linux",
                    "credativ:Debian:8:linux",
                    "credativ:Debian:7:linux",
                    "SUSE:openSUSE-Leap:42.2:linux",
                    "SUSE:SLES:12-SP2:linux",
                    "SUSE:SLES:11-SP4:linux"
                  ],
                  "ignoreCase": "all"
                },
                "baseImageSource": {
                  "description": "Base image source",
                  "enum": [
                    "default",
                    "customVhd"
                  ],
                  "ignoreCase": "all"
                },
                "customImageOSType": {
                  "description": "Base image OS",
                  "enum": [
                    "windows",
                    "linux"
                  ],
                  "ignoreCase": "all"
                },
                "customImageUrl": {
                  "description": "Base image URL",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "customTemplateLocation": {
                  "description": "Packer template location",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "customTemplateParameters": {
                  "description": "Template parameters",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "deployScriptArguments": {
                  "description": "Deployment script arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "deployScriptPath": {
                  "description": "Deployment script",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "imageUri": {
                  "description": "Image URL",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "location": {
                  "description": "Storage location",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "packagePath": {
                  "description": "Deployment Package",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "skipTempFileCleanupDuringVMDeprovision": {
                  "description": "Skip temporary file cleanup during deprovision",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "storageAccountName": {
                  "description": "Storage account",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "templateType": {
                  "description": "Packer template",
                  "enum": [
                    "builtin",
                    "custom"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": [
                "ConnectedServiceName",
                "location",
                "storageAccountName",
                "azureResourceGroup",
                "packagePath",
                "deployScriptPath"
              ]
            },
            "task": {
              "description": "Build machine image\n\nBuild a machine image using Packer, which may be used for Azure Virtual machine scale set deployment",
              "ignoreCase": "value",
              "pattern": "^PackerBuild@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Build machine image inputs",
              "properties": {
                "ConnectedServiceName": {
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "additionalBuilderParameters": {
                  "description": "Additional Builder parameters",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureResourceGroup": {
                  "description": "Resource group",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "baseImage": {
                  "description": "Base image",
                  "enum": [
                    "MicrosoftWindowsServer:WindowsServer:2012-R2-Datacenter:windows",
                    "MicrosoftWindowsServer:WindowsServer:2016-Datacenter:windows",
                    "MicrosoftWindowsServer:WindowsServer:2012-Datacenter:windows",
                    "MicrosoftWindowsServer:WindowsServer:2008-R2-SP1:windows",
                    "Canonical:UbuntuServer:14.04.4-LTS:linux",
                    "Canonical:UbuntuServer:16.04-LTS:linux",
                    "Canonical:UbuntuServer:18.04-LTS:linux",
                    "RedHat:RHEL:7.2:linux",
                    "RedHat:RHEL:6.8:linux",
                    "OpenLogic:CentOS:7.2:linux",
                    "OpenLogic:CentOS:6.8:linux",
                    "credativ:Debian:8:linux",
                    "credativ:Debian:7:linux",
                    "SUSE:openSUSE-Leap:42.2:linux",
                    "SUSE:SLES:12-SP2:linux",
                    "SUSE:SLES:11-SP4:linux"
                  ],
                  "ignoreCase": "all"
                },
                "baseImageSource": {
                  "description": "Base image source",
                  "enum": [
                    "default",
                    "customVhd"
                  ],
                  "ignoreCase": "all"
                },
                "customImageOSType": {
                  "description": "Base image OS",
                  "enum": [
                    "windows",
                    "linux"
                  ],
                  "ignoreCase": "all"
                },
                "customImageUrl": {
                  "description": "Base image URL",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "customTemplateLocation": {
                  "description": "Packer template location",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "customTemplateParameters": {
                  "description": "Template parameters",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "deployScriptArguments": {
                  "description": "Deployment script arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "deployScriptPath": {
                  "description": "Deployment script",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "imageId": {
                  "description": "Azure Resource Id",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "imageUri": {
                  "description": "Image URL or Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "isManagedImage": {
                  "description": "Managed VM disk image",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "location": {
                  "description": "Storage location",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "managedImageName": {
                  "description": "Managed VM Disk Image Name ",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "packagePath": {
                  "description": "Deployment Package",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "packerVersion": {
                  "description": "Packer Version",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "skipTempFileCleanupDuringVMDeprovision": {
                  "description": "Skip temporary file cleanup during deprovision",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "storageAccountName": {
                  "description": "Storage account",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "templateType": {
                  "description": "Packer template",
                  "enum": [
                    "builtin",
                    "custom"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": [
                "ConnectedServiceName",
                "location",
                "storageAccountName",
                "azureResourceGroup",
                "packagePath",
                "deployScriptPath"
              ]
            },
            "task": {
              "description": "Build machine image\n\nBuild a machine image using Packer, which may be used for Azure Virtual machine scale set deployment",
              "ignoreCase": "value",
              "pattern": "^PackerBuild@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "deprecationMessage": "NuGetPackager is deprecated - Deprecated: use the NuGet task instead. It works with the new Tool Installer framework so you can easily use new versions of NuGet without waiting for a task update, provides better support for authenticated feeds outside this organization/collection, and uses NuGet 4 by default.",
          "doNotSuggest": true,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "NuGet packager inputs",
              "properties": {
                "buildProperties": {
                  "description": "Additional build properties",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "configurationToPack": {
                  "description": "Configuration to Package",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "includeReferencedProjects": {
                  "description": "Include referenced projects",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "nuGetAdditionalArgs": {
                  "description": "NuGet Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "nuGetPath": {
                  "description": "Path to NuGet.exe",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "outputdir": {
                  "description": "Package Folder",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "requestedMajorVersion": {
                  "description": "Major",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "requestedMinorVersion": {
                  "description": "Minor",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "requestedPatchVersion": {
                  "description": "Patch",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "searchPattern": {
                  "description": "Path to csproj or nuspec file(s) to pack",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "versionByBuild": {
                  "description": "Automatic package versioning",
                  "enum": [
                    "false",
                    "byPrereleaseNumber",
                    "byEnvVar",
                    "true"
                  ],
                  "ignoreCase": "all"
                },
                "versionEnvVar": {
                  "description": "Environment variable",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "NuGet packager\n\nDeprecated: use the NuGet task instead. It works with the new Tool Installer framework so you can easily use new versions of NuGet without waiting for a task update, provides better support for authenticated feeds outside this organization/collection, and uses NuGet 4 by default.",
              "ignoreCase": "value",
              "pattern": "^NuGetPackager@0$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Duffle tool installer inputs",
              "properties": {
                "checkLatestVersion": {
                  "description": "Check for latest version",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "version": {
                  "description": "Version",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Duffle tool installer\n\nInstall a specified version of Duffle for installing and managing CNAB bundles",
              "ignoreCase": "value",
              "pattern": "^DuffleInstaller@0$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Update Service Fabric App Versions inputs",
              "properties": {
                "applicationPackagePath": {
                  "description": "Application Package",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "buildNumber": {
                  "description": "Build Number",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "compareType": {
                  "description": "Compare against",
                  "enum": [
                    "LastSuccessful",
                    "Specific"
                  ],
                  "ignoreCase": "all"
                },
                "logAllChanges": {
                  "description": "Log all changes",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "pkgArtifactName": {
                  "description": "Package Artifact Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "updateOnlyChanged": {
                  "description": "Update only if changed",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "versionBehavior": {
                  "description": "Version Behavior",
                  "enum": [
                    "Append",
                    "Replace"
                  ],
                  "ignoreCase": "all"
                },
                "versionSuffix": {
                  "description": "Version Value",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "applicationPackagePath"
              ]
            },
            "task": {
              "description": "Update Service Fabric App Versions\n\nAutomatically updates the versions of a packaged Service Fabric application.",
              "ignoreCase": "value",
              "pattern": "^ServiceFabricUpdateAppVersions@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Update Service Fabric manifests inputs",
              "properties": {
                "applicationPackagePath": {
                  "description": "Application Package",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "buildNumber": {
                  "description": "Build Number",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "compareType": {
                  "description": "Compare against",
                  "enum": [
                    "LastSuccessful",
                    "Specific"
                  ],
                  "ignoreCase": "all"
                },
                "imageDigestsPath": {
                  "description": "Image Digests Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "imageNamesPath": {
                  "description": "Image Names Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "logAllChanges": {
                  "description": "Log all changes",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "overwriteExistingPkgArtifact": {
                  "description": "Overwrite Existing Package Artifact",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "pkgArtifactName": {
                  "description": "Package Artifact Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "updateOnlyChanged": {
                  "description": "Update only if changed",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "updateType": {
                  "description": "Update Type",
                  "enum": [
                    "Manifest versions",
                    "Docker image settings"
                  ],
                  "ignoreCase": "all"
                },
                "versionBehavior": {
                  "description": "Version Behavior",
                  "enum": [
                    "Append",
                    "Replace"
                  ],
                  "ignoreCase": "all"
                },
                "versionSuffix": {
                  "description": "Version Value",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "applicationPackagePath"
              ]
            },
            "task": {
              "description": "Update Service Fabric manifests\n\nAutomatically update portions of application and service manifests in a packaged Azure Service Fabric application",
              "ignoreCase": "value",
              "pattern": "^ServiceFabricUpdateManifests@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Query Azure Monitor alerts inputs",
              "properties": {
                "ResourceGroupName": {
                  "description": "Resource group",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "alertRule": {
                  "description": "Alert rule",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "alertState": {
                  "description": "Alert state",
                  "enum": [
                    "New",
                    "Acknowledged",
                    "Closed"
                  ],
                  "ignoreCase": "all"
                },
                "connectedServiceNameARM": {
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "filterType": {
                  "description": "Filter type",
                  "enum": [
                    "resource",
                    "alertrule",
                    "none"
                  ],
                  "ignoreCase": "all"
                },
                "monitorCondition": {
                  "description": "Monitor condition",
                  "enum": [
                    "Fired ",
                    "Resolved"
                  ],
                  "ignoreCase": "all"
                },
                "resource": {
                  "description": "Resource",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "severity": {
                  "description": "Severity",
                  "enum": [
                    "Sev0",
                    "Sev1",
                    "Sev2",
                    "Sev3",
                    "Sev4"
                  ],
                  "ignoreCase": "all"
                },
                "timeRange": {
                  "description": "Time range",
                  "enum": [
                    "1h",
                    "1d",
                    "7d",
                    "30d"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": [
                "connectedServiceNameARM",
                "ResourceGroupName"
              ]
            },
            "task": {
              "description": "Query Azure Monitor alerts\n\nObserve the configured Azure Monitor rules for active alerts",
              "ignoreCase": "value",
              "pattern": "^AzureMonitor@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "deprecationMessage": "AzureMonitor is deprecated - Observe the configured classic Azure Monitor rules for active alerts",
          "doNotSuggest": true,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Query Classic Azure Monitor alerts inputs",
              "properties": {
                "ResourceGroupName": {
                  "description": "Resource group",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ResourceType": {
                  "description": "Resource type",
                  "enum": [
                    "Microsoft.Insights/components",
                    "Microsoft.Web/sites",
                    "Microsoft.Storage/storageAccounts",
                    "Microsoft.Compute/virtualMachines"
                  ],
                  "ignoreCase": "all"
                },
                "alertRules": {
                  "description": "Alert rules",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "connectedServiceNameARM": {
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "resourceName": {
                  "description": "Resource name",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "connectedServiceNameARM",
                "ResourceGroupName",
                "resourceName",
                "alertRules"
              ]
            },
            "task": {
              "description": "Query Classic Azure Monitor alerts\n\nObserve the configured classic Azure Monitor rules for active alerts",
              "ignoreCase": "value",
              "pattern": "^AzureMonitor@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Azure Network Load Balancer inputs",
              "properties": {
                "Action": {
                  "description": "Action",
                  "enum": [
                    "Disconnect",
                    "Connect"
                  ],
                  "ignoreCase": "all"
                },
                "LoadBalancer": {
                  "description": "Load Balancer Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ResourceGroupName": {
                  "description": "Resource Group",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureSubscription": {
                  "aliases": [
                    "ConnectedServiceName"
                  ],
                  "description": "Azure Subscription",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "azureSubscription",
                "ResourceGroupName",
                "LoadBalancer",
                "Action"
              ]
            },
            "task": {
              "description": "Azure Network Load Balancer\n\nConnect or disconnect an Azure virtual machine's network interface to a Load Balancer's back end address pool",
              "ignoreCase": "value",
              "pattern": "^AzureNLBManagement@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "deprecationMessage": "ApacheJMeterLoadTest is deprecated - Run an Apache JMeter load test in the cloud",
          "doNotSuggest": true,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Cloud-based Apache JMeter load test inputs",
              "properties": {
                "LoadTest": {
                  "description": "Apache JMeter file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "TestDrop": {
                  "description": "Apache JMeter test files folder",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "agentCount": {
                  "description": "Agent Count",
                  "enum": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                  ],
                  "ignoreCase": "all"
                },
                "connectedServiceName": {
                  "description": "Azure Pipelines Connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "geoLocation": {
                  "description": "Load Location",
                  "enum": [
                    "Default",
                    "Australia East",
                    "Australia Southeast",
                    "Brazil South",
                    "Central India",
                    "Central US",
                    "East Asia",
                    "East US 2",
                    "East US",
                    "Japan East",
                    "Japan West",
                    "North Central US",
                    "North Europe",
                    "South Central US",
                    "South India",
                    "Southeast Asia",
                    "West Europe",
                    "West US"
                  ],
                  "ignoreCase": "all"
                },
                "machineType": {
                  "description": "Run load test using",
                  "enum": [
                    "0",
                    "2"
                  ],
                  "ignoreCase": "all"
                },
                "runDuration": {
                  "description": "Run Duration (sec)",
                  "enum": [
                    "60",
                    "120",
                    "180",
                    "240",
                    "300"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": [
                "TestDrop"
              ]
            },
            "task": {
              "description": "Cloud-based Apache JMeter load test\n\nRun an Apache JMeter load test in the cloud",
              "ignoreCase": "value",
              "pattern": "^ApacheJMeterLoadTest@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Docker Compose inputs",
              "properties": {
                "abortOnContainerExit": {
                  "description": "Abort on Container Exit",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "action": {
                  "description": "Action",
                  "enum": [
                    "Build services",
                    "Push services",
                    "Run services",
                    "Run a specific service",
                    "Lock services",
                    "Write service image digests",
                    "Combine configuration",
                    "Run a Docker Compose command"
                  ],
                  "ignoreCase": "all"
                },
                "additionalDockerComposeFiles": {
                  "description": "Additional Docker Compose Files",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "additionalImageTags": {
                  "description": "Additional Image Tags",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "arguments": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureContainerRegistry": {
                  "description": "Azure Container Registry",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureSubscription": {
                  "aliases": [
                    "azureSubscriptionEndpoint"
                  ],
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "baseResolveDirectory": {
                  "description": "Base Resolve Directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "buildImages": {
                  "description": "Build Images",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "containerCommand": {
                  "description": "Command",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "containerName": {
                  "description": "Container Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "containerregistrytype": {
                  "description": "Container Registry Type",
                  "enum": [
                    "Azure Container Registry",
                    "Container Registry"
                  ],
                  "ignoreCase": "all"
                },
                "currentWorkingDirectory": {
                  "aliases": [
                    "cwd"
                  ],
                  "description": "Working Directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "detached": {
                  "description": "Run in Background",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "dockerComposeCommand": {
                  "description": "Command",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "dockerComposeFile": {
                  "description": "Docker Compose File",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "dockerComposeFileArgs": {
                  "description": "Environment Variables",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "dockerComposePath": {
                  "description": "Docker Compose executable Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "dockerHostEndpoint": {
                  "description": "Docker Host Service Connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "dockerRegistryEndpoint": {
                  "description": "Docker Registry Service Connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "entrypoint": {
                  "description": "Entry Point Override",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "imageDigestComposeFile": {
                  "description": "Image Digest Compose File",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "includeLatestTag": {
                  "description": "Include Latest Tag",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "includeSourceTags": {
                  "description": "Include Source Tags",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "nopIfNoDockerComposeFile": {
                  "description": "No-op if no Docker Compose File",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "outputDockerComposeFile": {
                  "description": "Output Docker Compose File",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ports": {
                  "description": "Ports",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "projectName": {
                  "description": "Project Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "qualifyImageNames": {
                  "description": "Qualify Image Names",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "removeBuildOptions": {
                  "description": "Remove Build Options",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "requireAdditionalDockerComposeFiles": {
                  "description": "Require Additional Docker Compose Files",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "serviceName": {
                  "description": "Service Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "workingDirectory": {
                  "aliases": [
                    "workDir"
                  ],
                  "description": "Working Directory",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Docker Compose\n\nBuild, push or run multi-container Docker applications. Task can be used with Docker or Azure Container registry.",
              "ignoreCase": "value",
              "pattern": "^DockerCompose@0$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Start Windows Service inputs",
              "properties": {
                "AdminPassword": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AdminUserName": {
                  "description": "Admin Login",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "EnvironmentName": {
                  "description": "Machines",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "InstanceName": {
                  "description": "TopShelf Instance Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "RunPowershellInParallel": {
                  "description": "Run PowerShell in Parallel",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "ServiceNames": {
                  "description": "Service Names",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "StartupType": {
                  "description": "Service Startup Type",
                  "enum": [
                    "Manual",
                    "Automatic"
                  ],
                  "ignoreCase": "all"
                },
                "TestCertificate": {
                  "description": "Test Certificate",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "WaitTimeoutInSeconds": {
                  "description": "Wait timeout",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "deploymentGroup": {
                  "description": "Target is Deployment Group",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "protocol": {
                  "description": "Protocol",
                  "enum": [
                    "Http",
                    "Https"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": [
                "ServiceNames"
              ]
            },
            "task": {
              "description": "Start Windows Service\n\nStart a windows service.",
              "ignoreCase": "value",
              "pattern": "^StartWindowsService@8$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Azure Monitor alerts (Deprecated) inputs",
              "properties": {
                "AlertRules": {
                  "description": "Alert rules",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "NotifyEmails": {
                  "description": "Additional administrator emails",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "NotifyServiceOwners": {
                  "description": "Subscription owners, contributors and readers",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "ResourceGroupName": {
                  "description": "Resource Group",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ResourceName": {
                  "description": "Resource name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ResourceType": {
                  "description": "Resource Type",
                  "enum": [
                    "Microsoft.Insights/components",
                    "Microsoft.Web/sites",
                    "Microsoft.Storage/storageAccounts",
                    "Microsoft.Compute/virtualMachines"
                  ],
                  "ignoreCase": "all"
                },
                "azureSubscription": {
                  "aliases": [
                    "ConnectedServiceName"
                  ],
                  "description": "Azure Subscription",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "azureSubscription",
                "ResourceGroupName",
                "ResourceName",
                "AlertRules"
              ]
            },
            "task": {
              "description": "Azure Monitor alerts (Deprecated)\n\nConfigure alerts on available metrics for an Azure resource (Deprecated)",
              "ignoreCase": "value",
              "pattern": "^AzureMonitorAlerts@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "deprecationMessage": "XamarinTestCloud is deprecated - [Deprecated] Test mobile apps with Xamarin Test Cloud using Xamarin.UITest. Instead, use the 'App Center test' task.",
          "doNotSuggest": true,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Xamarin Test Cloud inputs",
              "properties": {
                "appFile": {
                  "aliases": [
                    "app"
                  ],
                  "description": "App file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "devices": {
                  "description": "Devices",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "dsymFile": {
                  "aliases": [
                    "dsym"
                  ],
                  "description": "dSYM file (iOS only)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "email": {
                  "aliases": [
                    "user"
                  ],
                  "description": "User email",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "localeOption": {
                  "aliases": [
                    "locale"
                  ],
                  "description": "System language",
                  "enum": [
                    "da_DK",
                    "nl_NL",
                    "en_GB",
                    "en_US",
                    "fr_FR",
                    "de_DE",
                    "ja_JP",
                    "ru_RU",
                    "es_MX",
                    "es_ES",
                    "user"
                  ],
                  "ignoreCase": "all"
                },
                "optionalArgs": {
                  "description": "Optional arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "parallelizationOption": {
                  "aliases": [
                    "parallelization"
                  ],
                  "description": "Parallelization",
                  "enum": [
                    "none",
                    "--fixture-chunk",
                    "--test-chunk"
                  ],
                  "ignoreCase": "all"
                },
                "publishNUnitResults": {
                  "description": "Publish results to Azure Pipelines",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "series": {
                  "description": "Series",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "teamApiKey": {
                  "description": "Team API key",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testAssemblyDirectory": {
                  "aliases": [
                    "testDir"
                  ],
                  "description": "Test assembly directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testCloudFile": {
                  "aliases": [
                    "testCloudLocation"
                  ],
                  "description": "test-cloud.exe location",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "userDefinedLocale": {
                  "description": "Other locale",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "appFile",
                "teamApiKey",
                "email",
                "devices",
                "testAssemblyDirectory"
              ]
            },
            "task": {
              "description": "Xamarin Test Cloud\n\n[Deprecated] Test mobile apps with Xamarin Test Cloud using Xamarin.UITest. Instead, use the 'App Center test' task.",
              "ignoreCase": "value",
              "pattern": "^XamarinTestCloud@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "SSAS Build inputs",
              "properties": {
                "devenvPath": {
                  "description": "Location of devenv.com",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "projCmdSwitch": {
                  "description": "Command line switch",
                  "enum": [
                    "rebuild",
                    "build"
                  ],
                  "ignoreCase": "all"
                },
                "projConfigName": {
                  "description": "Project Configuration Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "projPath": {
                  "description": "Path to Project File",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "projPlatformName": {
                  "description": "Project Platform Name",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "projPath"
              ]
            },
            "task": {
              "description": "SSAS Build\n\nBuild SQL Server Analysis Services Project (Multi dimensional only) into .asdatabase file using devenv.com",
              "ignoreCase": "value",
              "pattern": "^BuildSsas@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Service Fabric application deployment inputs",
              "properties": {
                "ConsiderWarningAsError": {
                  "description": "ConsiderWarningAsError",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "DefaultServiceTypeHealthPolicy": {
                  "description": "DefaultServiceTypeHealthPolicy",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "FailureAction": {
                  "description": "FailureAction",
                  "enum": [
                    "Rollback",
                    "Manual"
                  ],
                  "ignoreCase": "all"
                },
                "ForceRestart": {
                  "description": "ForceRestart",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "HealthCheckRetryTimeoutSec": {
                  "description": "HealthCheckRetryTimeoutSec",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "HealthCheckStableDurationSec": {
                  "description": "HealthCheckStableDurationSec",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "HealthCheckWaitDurationSec": {
                  "description": "HealthCheckWaitDurationSec",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "MaxPercentUnhealthyDeployedApplications": {
                  "description": "MaxPercentUnhealthyDeployedApplications",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ServiceTypeHealthPolicyMap": {
                  "description": "ServiceTypeHealthPolicyMap",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "TimeoutSec": {
                  "description": "TimeoutSec",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "UpgradeDomainTimeoutSec": {
                  "description": "UpgradeDomainTimeoutSec",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "UpgradeReplicaSetCheckTimeoutSec": {
                  "description": "UpgradeReplicaSetCheckTimeoutSec",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "UpgradeTimeoutSec": {
                  "description": "UpgradeTimeoutSec",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "applicationPackagePath": {
                  "description": "Application Package",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "applicationParameterPath": {
                  "description": "Application Parameters",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureSubscription": {
                  "aliases": [
                    "azureSubscriptionEndpoint"
                  ],
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "compressPackage": {
                  "description": "Compress Package",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "configureDockerSettings": {
                  "description": "Configure Docker settings",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "copyPackageTimeoutSec": {
                  "description": "CopyPackageTimeoutSec",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "dockerRegistryConnection": {
                  "aliases": [
                    "dockerRegistryEndpoint"
                  ],
                  "description": "Docker Registry Service Connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "isUpgrade": {
                  "description": "Upgrade the Application",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "overrideApplicationParameter": {
                  "description": "Override Application Parameters",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "overridePublishProfileSettings": {
                  "description": "Override All Publish Profile Upgrade Settings",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "overwriteBehavior": {
                  "description": "Overwrite Behavior",
                  "enum": [
                    "Always",
                    "Never",
                    "SameAppTypeAndVersion"
                  ],
                  "ignoreCase": "all"
                },
                "passwordEncrypted": {
                  "description": "Password Encrypted",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "publishProfilePath": {
                  "description": "Publish Profile",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "registerPackageTimeoutSec": {
                  "description": "RegisterPackageTimeoutSec",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "registryCredentials": {
                  "description": "Registry Credentials Source",
                  "enum": [
                    "AzureResourceManagerEndpoint",
                    "ContainerRegistryEndpoint",
                    "UsernamePassword"
                  ],
                  "ignoreCase": "all"
                },
                "registryPassword": {
                  "description": "Registry Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "registryUserName": {
                  "description": "Registry User Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "serviceConnectionName": {
                  "description": "Cluster Service Connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "skipPackageValidation": {
                  "description": "Skip package validation",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "skipUpgradeSameTypeAndVersion": {
                  "description": "Skip upgrade for same Type and Version",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "unregisterUnusedVersions": {
                  "description": "Unregister Unused Versions",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "upgradeMode": {
                  "description": "Upgrade Mode",
                  "enum": [
                    "Monitored",
                    "UnmonitoredAuto",
                    "UnmonitoredManual"
                  ],
                  "ignoreCase": "all"
                },
                "useDiffPackage": {
                  "description": "Use Diff Package",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": [
                "applicationPackagePath",
                "serviceConnectionName"
              ]
            },
            "task": {
              "description": "Service Fabric application deployment\n\nDeploy an Azure Service Fabric application to a cluster",
              "ignoreCase": "value",
              "pattern": "^ServiceFabricDeploy@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Power Platform Publish Customizations inputs",
              "properties": {
                "AsyncOperation": {
                  "description": "Publish Customizations as asynchronous operation",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "Environment": {
                  "description": "Environment Url",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "MaxAsyncWaitTime": {
                  "description": "Maximum wait time in minutes for asynchronous operation",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerPlatformEnvironment": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerPlatformSPN": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "authenticationType": {
                  "description": "Authentication type",
                  "enum": [
                    "PowerPlatformEnvironment",
                    "PowerPlatformSPN"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": []
            },
            "task": {
              "description": "Power Platform Publish Customizations\n\nPower Platform Publish Customizations",
              "ignoreCase": "value",
              "pattern": "^PowerPlatformPublishCustomizations@2$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Xcode Build inputs",
              "properties": {
                "actions": {
                  "description": "Actions",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "archivePath": {
                  "description": "Archive Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "args": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "configuration": {
                  "description": "Configuration",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "cwd": {
                  "description": "Working Directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "defaultKeychainPassword": {
                  "description": "Default Keychain Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "exportArgs": {
                  "description": "Export Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "exportMethod": {
                  "description": "Export Method",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "exportOptions": {
                  "description": "Export Options",
                  "enum": [
                    "auto",
                    "plist",
                    "specify"
                  ],
                  "ignoreCase": "all"
                },
                "exportOptionsPlist": {
                  "description": "Export Options Plist",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "exportPath": {
                  "description": "Export Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "exportTeamId": {
                  "description": "Team ID",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "iosSigningIdentity": {
                  "description": "Signing Identity",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "outputPattern": {
                  "description": "Output Directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "p12": {
                  "description": "P12 Certificate File",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "p12pwd": {
                  "description": "P12 Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "packageApp": {
                  "description": "Create App Package",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "provProfile": {
                  "description": "Provisioning Profile File",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "provProfileUuid": {
                  "description": "Provisioning Profile UUID",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "publishJUnitResults": {
                  "description": "Publish to VSTS/TFS",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "removeProfile": {
                  "description": "Remove Profile After Build",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "scheme": {
                  "description": "Scheme",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sdk": {
                  "description": "SDK",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "signMethod": {
                  "description": "Override Using",
                  "enum": [
                    "file",
                    "id"
                  ],
                  "ignoreCase": "all"
                },
                "teamId": {
                  "description": "Team ID",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "unlockDefaultKeychain": {
                  "description": "Unlock Default Keychain",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "useXcpretty": {
                  "description": "Use xcpretty",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "xcWorkspacePath": {
                  "description": "Workspace/Project Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "xcode8AutomaticSigning": {
                  "description": "Automatic Signing",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "xcodeDeveloperDir": {
                  "description": "Xcode Developer Path",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Xcode Build\n\nBuild an Xcode workspace on macOS",
              "ignoreCase": "value",
              "pattern": "^Xcode@3$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Xcode inputs",
              "properties": {
                "actions": {
                  "description": "Actions",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "archivePath": {
                  "description": "Archive path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "args": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "configuration": {
                  "description": "Configuration",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "destinationDevices": {
                  "description": "Device",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "destinationPlatform": {
                  "description": "Custom destination platform",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "destinationPlatformOption": {
                  "description": "Destination platform",
                  "enum": [
                    "default",
                    "iOS",
                    "tvOS",
                    "macOS",
                    "custom"
                  ],
                  "ignoreCase": "all"
                },
                "destinationSimulators": {
                  "description": "Simulator",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "destinationTypeOption": {
                  "description": "Destination type",
                  "enum": [
                    "simulators",
                    "devices"
                  ],
                  "ignoreCase": "all"
                },
                "exportArgs": {
                  "description": "Export arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "exportMethod": {
                  "description": "Export method",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "exportOptions": {
                  "description": "Export options",
                  "enum": [
                    "auto",
                    "plist",
                    "specify"
                  ],
                  "ignoreCase": "all"
                },
                "exportOptionsPlist": {
                  "description": "Export options plist",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "exportPath": {
                  "description": "Export path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "exportTeamId": {
                  "description": "Team ID",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "outputPattern": {
                  "description": "Output directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "packageApp": {
                  "description": "Create app package",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "provisioningProfileUuid": {
                  "description": "Provisioning profile UUID",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "publishJUnitResults": {
                  "description": "Publish test results to VSTS/TFS",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "scheme": {
                  "description": "Scheme",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sdk": {
                  "description": "SDK",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "signingIdentity": {
                  "description": "Signing identity",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "signingOption": {
                  "description": "Signing style",
                  "enum": [
                    "nosign",
                    "default",
                    "manual",
                    "auto"
                  ],
                  "ignoreCase": "all"
                },
                "teamId": {
                  "description": "Team ID",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "useXcpretty": {
                  "description": "Use xcpretty",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "workingDirectory": {
                  "aliases": [
                    "cwd"
                  ],
                  "description": "Working directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "xcWorkspacePath": {
                  "description": "Workspace or project path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "xcodeDeveloperDir": {
                  "description": "Xcode developer path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "xcodeVersion": {
                  "description": "Xcode version",
                  "enum": [
                    "8",
                    "9",
                    "default",
                    "specifyPath"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": []
            },
            "task": {
              "description": "Xcode\n\nBuild, test, or archive an Xcode workspace on macOS. Optionally package an app.",
              "ignoreCase": "value",
              "pattern": "^Xcode@4$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Xcode Build inputs",
              "properties": {
                "actions": {
                  "description": "Actions",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "archivePath": {
                  "description": "Archive Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "args": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "configuration": {
                  "description": "Configuration",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "cwd": {
                  "description": "Working Directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "defaultKeychainPassword": {
                  "description": "Default Keychain Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "exportMethod": {
                  "description": "Export Method",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "exportOptions": {
                  "description": "Export Options",
                  "enum": [
                    "auto",
                    "plist",
                    "specify"
                  ],
                  "ignoreCase": "all"
                },
                "exportOptionsPlist": {
                  "description": "Export Options Plist",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "exportPath": {
                  "description": "Export Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "exportTeamId": {
                  "description": "Team ID",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "iosSigningIdentity": {
                  "description": "Signing Identity",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "outputPattern": {
                  "description": "Output Directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "p12": {
                  "description": "P12 Certificate File",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "p12pwd": {
                  "description": "P12 Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "packageApp": {
                  "description": "Create App Package",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "packageTool": {
                  "description": "Create Package (IPA) using",
                  "enum": [
                    "xcrun",
                    "xcodebuild"
                  ],
                  "ignoreCase": "all"
                },
                "provProfile": {
                  "description": "Provisioning Profile File",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "provProfileUuid": {
                  "description": "Provisioning Profile UUID",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "publishJUnitResults": {
                  "description": "Publish to VSTS/TFS",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "removeProfile": {
                  "description": "Remove Profile After Build",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "scheme": {
                  "description": "Scheme",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sdk": {
                  "description": "SDK",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "signMethod": {
                  "description": "Override Using",
                  "enum": [
                    "file",
                    "id"
                  ],
                  "ignoreCase": "all"
                },
                "teamId": {
                  "description": "Team ID",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "unlockDefaultKeychain": {
                  "description": "Unlock Default Keychain",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "useXcpretty": {
                  "description": "Use xcpretty",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "useXctool": {
                  "description": "Use xctool",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "xcWorkspacePath": {
                  "description": "Workspace/Project Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "xcode8AutomaticSigning": {
                  "description": "Automatic Signing",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "xcodeDeveloperDir": {
                  "description": "Xcode Developer Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "xctoolReporter": {
                  "description": "xctool Test Reporter Format",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Xcode Build\n\nBuild an Xcode workspace on Mac OS",
              "ignoreCase": "value",
              "pattern": "^Xcode@2$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Xcode inputs",
              "properties": {
                "actions": {
                  "description": "Actions",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "archivePath": {
                  "description": "Archive path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "args": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "configuration": {
                  "description": "Configuration",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "destinationDevices": {
                  "description": "Device",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "destinationPlatform": {
                  "description": "Custom destination platform",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "destinationPlatformOption": {
                  "description": "Destination platform",
                  "enum": [
                    "default",
                    "iOS",
                    "tvOS",
                    "macOS",
                    "custom"
                  ],
                  "ignoreCase": "all"
                },
                "destinationSimulators": {
                  "description": "Simulator",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "destinationTypeOption": {
                  "description": "Destination type",
                  "enum": [
                    "simulators",
                    "devices"
                  ],
                  "ignoreCase": "all"
                },
                "exportArgs": {
                  "description": "Export arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "exportMethod": {
                  "description": "Export method",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "exportOptions": {
                  "description": "Export options",
                  "enum": [
                    "auto",
                    "plist",
                    "specify"
                  ],
                  "ignoreCase": "all"
                },
                "exportOptionsPlist": {
                  "description": "Export options plist",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "exportPath": {
                  "description": "Export path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "exportTeamId": {
                  "description": "Team ID",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "packageApp": {
                  "description": "Create app package",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "provisioningProfileName": {
                  "description": "Provisioning profile name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "provisioningProfileUuid": {
                  "description": "Provisioning profile UUID",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "publishJUnitResults": {
                  "description": "Publish test results to Azure Pipelines",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "scheme": {
                  "description": "Scheme",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sdk": {
                  "description": "SDK",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "signingIdentity": {
                  "description": "Signing identity",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "signingOption": {
                  "description": "Signing style",
                  "enum": [
                    "nosign",
                    "default",
                    "manual",
                    "auto"
                  ],
                  "ignoreCase": "all"
                },
                "teamId": {
                  "description": "Team ID",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testRunTitle": {
                  "description": "Test run title",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "useXcpretty": {
                  "description": "Use xcpretty",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "workingDirectory": {
                  "aliases": [
                    "cwd"
                  ],
                  "description": "Working directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "xcWorkspacePath": {
                  "description": "Workspace or project path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "xcodeDeveloperDir": {
                  "description": "Xcode developer path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "xcodeVersion": {
                  "description": "Xcode version",
                  "enum": [
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "default",
                    "specifyPath"
                  ],
                  "ignoreCase": "all"
                },
                "xcprettyArgs": {
                  "description": "Xcpretty arguments",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Xcode\n\nBuild, test, or archive an Xcode workspace on macOS. Optionally package an app.",
              "ignoreCase": "value",
              "pattern": "^Xcode@5$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "deprecationMessage": "NuGetPublisher is deprecated - Deprecated: use the NuGet task instead. It works with the new Tool Installer framework so you can easily use new versions of NuGet without waiting for a task update, provides better support for authenticated feeds outside this organization/collection, and uses NuGet 4 by default.",
          "doNotSuggest": true,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "NuGet publisher inputs",
              "properties": {
                "connectedServiceName": {
                  "description": "NuGet Service Connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "continueOnEmptyNupkgMatch": {
                  "description": "Continue if no packages match the \"Path/Pattern to nupkg\"",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "feedName": {
                  "description": "Internal Feed URL",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "nuGetAdditionalArgs": {
                  "description": "NuGet Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "nuGetFeedType": {
                  "description": "Feed type",
                  "enum": [
                    "external",
                    "internal"
                  ],
                  "ignoreCase": "all"
                },
                "nuGetPath": {
                  "description": "Path to NuGet.exe",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "nuGetVersion": {
                  "description": "NuGet Version",
                  "enum": [
                    "3.3.0",
                    "3.5.0.1829",
                    "4.0.0.2283",
                    "custom"
                  ],
                  "ignoreCase": "all"
                },
                "searchPattern": {
                  "description": "Path/Pattern to nupkg",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "verbosity": {
                  "description": "Verbosity",
                  "enum": [
                    "-",
                    "Quiet",
                    "Normal",
                    "Detailed"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": []
            },
            "task": {
              "description": "NuGet publisher\n\nDeprecated: use the NuGet task instead. It works with the new Tool Installer framework so you can easily use new versions of NuGet without waiting for a task update, provides better support for authenticated feeds outside this organization/collection, and uses NuGet 4 by default.",
              "ignoreCase": "value",
              "pattern": "^NuGetPublisher@0$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Power Platform Import Data inputs",
              "properties": {
                "DataFile": {
                  "description": "Data file or folder",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Environment": {
                  "description": "Environment",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerPlatformEnvironment": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerPlatformSPN": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "authenticationType": {
                  "description": "Authentication type",
                  "enum": [
                    "PowerPlatformEnvironment",
                    "PowerPlatformSPN"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": [
                "DataFile"
              ]
            },
            "task": {
              "description": "Power Platform Import Data\n\nPower Platform import data to environment. Requires Windows build agent",
              "ignoreCase": "value",
              "pattern": "^PowerPlatformImportData@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Query work items inputs",
              "properties": {
                "maxThreshold": {
                  "description": "Upper threshold",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "minThreshold": {
                  "description": "Lower threshold",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "queryId": {
                  "description": "Query",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "queryId"
              ]
            },
            "task": {
              "description": "Query work items\n\nExecute a work item query and check the number of items returned",
              "ignoreCase": "value",
              "pattern": "^queryWorkItems@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Run SQL Script in SQLCMD mode inputs",
              "properties": {
                "AuthenticationMethod": {
                  "description": "Authentication Method",
                  "enum": [
                    "windows",
                    "sqlauth"
                  ],
                  "ignoreCase": "all"
                },
                "AuthenticationPassword": {
                  "description": "The SQL Server Authentication Password for the SQL database Login ID",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AuthenticationUser": {
                  "description": "The SQL Server Authentication Login ID for the SQL database",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Database": {
                  "description": "The name of the SQL database",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "QueryTimeout": {
                  "description": "Query Timeout in seconds",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Server": {
                  "description": "Server name or IP address",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SqlCmdSciptPath": {
                  "description": "Path to .sql file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SqlCmdVariableType": {
                  "description": "Provide SQLCMD Variables",
                  "enum": [
                    "none",
                    "json",
                    "text"
                  ],
                  "ignoreCase": "all"
                },
                "SqlCmdVariablesInJson": {
                  "description": "SqlCmd Variables and Values (JSON format)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SqlCmdVariablesInText": {
                  "description": "SqlCmd Variables and Values (name/value pair format)",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "Server",
                "Database",
                "SqlCmdSciptPath"
              ]
            },
            "task": {
              "description": "Run SQL Script in SQLCMD mode\n\nRun a single SQL Script in SQLCMD mode passing in multiple parameters via a SqlCmdVariables array",
              "ignoreCase": "value",
              "pattern": "^RunSqlCmdScriptTask@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Azure Web App for Containers inputs",
              "properties": {
                "appName": {
                  "description": "App name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "appSettings": {
                  "description": "App settings",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureSubscription": {
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "configurationStrings": {
                  "description": "Configuration settings",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "containerCommand": {
                  "description": "Startup command ",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "containers": {
                  "aliases": [
                    "imageName"
                  ],
                  "description": "Image name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "deployToSlotOrASE": {
                  "description": "Deploy to Slot or App Service Environment",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "multicontainerConfigFile": {
                  "description": "Configuration File",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "resourceGroupName": {
                  "description": "Resource group",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "slotName": {
                  "description": "Slot",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "azureSubscription",
                "appName"
              ]
            },
            "task": {
              "description": "Azure Web App for Containers\n\nDeploy containers to Azure App Service",
              "ignoreCase": "value",
              "pattern": "^AzureWebAppContainer@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "SQL Server database deploy inputs",
              "properties": {
                "AdditionalArguments": {
                  "description": "Additional Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AdditionalArgumentsSql": {
                  "description": "Additional Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AppLockName": {
                  "description": "App lock name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AuthScheme": {
                  "description": "Authentication",
                  "enum": [
                    "windowsAuthentication",
                    "sqlServerAuthentication"
                  ],
                  "ignoreCase": "all"
                },
                "ConnectionString": {
                  "description": "Connection String",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "DacpacFile": {
                  "description": "DACPAC File",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "DatabaseName": {
                  "description": "Database Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ExclusiveLock": {
                  "description": "Acquire an exclusive app lock while executing script(s)",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "ExecuteInTransaction": {
                  "description": "Execute within a transaction",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "InlineSql": {
                  "description": "Inline Sql",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PublishProfile": {
                  "description": "Publish Profile",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ServerName": {
                  "description": "Server Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SqlFile": {
                  "description": "Sql File",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SqlPassword": {
                  "description": "SQL Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SqlUsername": {
                  "description": "SQL User name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "TargetMethod": {
                  "description": "Specify SQL Using",
                  "enum": [
                    "server",
                    "connectionString",
                    "publishProfile"
                  ],
                  "ignoreCase": "all"
                },
                "TaskType": {
                  "description": "Deploy SQL Using",
                  "enum": [
                    "dacpac",
                    "sqlQuery",
                    "sqlInline"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": []
            },
            "task": {
              "description": "SQL Server database deploy\n\nDeploy a SQL Server database using DACPAC or SQL scripts",
              "ignoreCase": "value",
              "pattern": "^SqlDacpacDeploymentOnMachineGroup@0$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Cache (Beta) inputs",
              "properties": {
                "cacheHitVar": {
                  "description": "Cache hit variable",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "key": {
                  "description": "Key",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "path": {
                  "description": "Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "restoreKeys": {
                  "description": "Additional restore key prefixes",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "path"
              ]
            },
            "task": {
              "description": "Cache (Beta)\n\nCache files between runs",
              "ignoreCase": "value",
              "pattern": "^CacheBeta@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Cache inputs",
              "properties": {
                "cacheHitVar": {
                  "description": "Cache hit variable",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "key": {
                  "description": "Key",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "path": {
                  "description": "Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "restoreKeys": {
                  "description": "Additional restore key prefixes",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "path"
              ]
            },
            "task": {
              "description": "Cache\n\nCache files between runs",
              "ignoreCase": "value",
              "pattern": "^Cache@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Cache (Beta) inputs",
              "properties": {
                "cacheHitVar": {
                  "description": "Cache hit variable",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "key": {
                  "description": "Key",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "path": {
                  "description": "Path",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "path"
              ]
            },
            "task": {
              "description": "Cache (Beta)\n\nCache files between runs",
              "ignoreCase": "value",
              "pattern": "^CacheBeta@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "CMake inputs",
              "properties": {
                "cmakeArgs": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "runInsideShell": {
                  "description": "Run cmake command inside shell",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "workingDirectory": {
                  "aliases": [
                    "cwd"
                  ],
                  "description": "Working Directory",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "CMake\n\nBuild with the CMake cross-platform build system",
              "ignoreCase": "value",
              "pattern": "^CMake@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Mobile Center Test inputs",
              "properties": {
                "app": {
                  "description": "Binary Application File Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "appSlug": {
                  "description": "App Slug",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "appiumBuildDir": {
                  "description": "Build Directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "artifactsDir": {
                  "description": "Artifacts Directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "async": {
                  "description": "Do not wait for test result",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "calabashConfigFile": {
                  "description": "Cucumber Config File",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "calabashProfile": {
                  "description": "Profile to run",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "calabashProjectDir": {
                  "description": "Project Directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "calabashSkipConfigCheck": {
                  "description": "Skip Configuration Check",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "cliLocationOverride": {
                  "description": "mobile-center CLI Location",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "credsType": {
                  "description": "Authentication Method",
                  "enum": [
                    "serviceEndpoint",
                    "inputs"
                  ],
                  "ignoreCase": "all"
                },
                "debug": {
                  "description": "Enable Debug Output",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "devices": {
                  "description": "Devices",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "dsymDir": {
                  "description": "dSYM Directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "enablePrepare": {
                  "description": "Prepare Tests",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "enableRun": {
                  "description": "Run Tests",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "espressoBuildDir": {
                  "description": "Build Directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "espressoTestApkPath": {
                  "description": "Test APK Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "framework": {
                  "description": "Test Framework",
                  "enum": [
                    "appium",
                    "espresso",
                    "calabash",
                    "uitest",
                    "xcuitest"
                  ],
                  "ignoreCase": "all"
                },
                "locale": {
                  "description": "System Language",
                  "enum": [
                    "da_DK",
                    "nl_NL",
                    "en_GB",
                    "en_US",
                    "fr_FR",
                    "de_DE",
                    "ja_JP",
                    "ru_RU",
                    "es_MX",
                    "es_ES",
                    "user"
                  ],
                  "ignoreCase": "all"
                },
                "loginOpts": {
                  "description": "Addtional Options for Login",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "password": {
                  "description": "Mobile Center Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "prepareOpts": {
                  "description": "Additional Options",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "runOpts": {
                  "description": "Additional Options for Run",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "series": {
                  "description": "Test Series",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "serverEndpoint": {
                  "description": "Mobile Center Connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "signInfo": {
                  "description": "Signing Information",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "uitestBuildDir": {
                  "description": "Build Directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "uitestKeyAlias": {
                  "description": "Key Alias",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "uitestKeyPass": {
                  "description": "Key Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "uitestStoreFile": {
                  "description": "Store File",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "uitestStorePass": {
                  "description": "Store Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "uitestToolsDir": {
                  "description": "Test Tools Directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "userDefinedLocale": {
                  "description": "Other Locale",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "username": {
                  "description": "Mobile Center Username",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "xcuitestBuildDir": {
                  "description": "Build Directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "xcuitestTestIpaPath": {
                  "description": "Test IPA Path",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "app"
              ]
            },
            "task": {
              "description": "Mobile Center Test\n\nTest mobile app packages with Visual Studio Mobile Center.",
              "ignoreCase": "value",
              "pattern": "^VSMobileCenterTest@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "App Center test inputs",
              "properties": {
                "appFile": {
                  "aliases": [
                    "app"
                  ],
                  "description": "Binary application file path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "appSlug": {
                  "description": "App slug",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "appiumBuildDirectory": {
                  "aliases": [
                    "appiumBuildDir"
                  ],
                  "description": "Build directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "artifactsDirectory": {
                  "aliases": [
                    "artifactsDir"
                  ],
                  "description": "Artifacts directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "calabashConfigFile": {
                  "description": "Cucumber config file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "calabashProfile": {
                  "description": "Profile to run",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "calabashProjectDirectory": {
                  "aliases": [
                    "calabashProjectDir"
                  ],
                  "description": "Project directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "calabashSkipConfigCheck": {
                  "description": "Skip Configuration Check",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "cliFile": {
                  "aliases": [
                    "cliLocationOverride"
                  ],
                  "description": "App Center CLI location",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "credentialsOption": {
                  "aliases": [
                    "credsType"
                  ],
                  "description": "Authentication method",
                  "enum": [
                    "serviceEndpoint",
                    "inputs"
                  ],
                  "ignoreCase": "all"
                },
                "devices": {
                  "description": "Devices",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "dsymDirectory": {
                  "aliases": [
                    "dsymDir"
                  ],
                  "description": "dSYM directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "espressoBuildDirectory": {
                  "aliases": [
                    "espressoBuildDir"
                  ],
                  "description": "Build directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "espressoTestApkFile": {
                  "aliases": [
                    "espressoTestApkPath"
                  ],
                  "description": "Test APK path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "frameworkOption": {
                  "aliases": [
                    "framework"
                  ],
                  "description": "Test framework",
                  "enum": [
                    "appium",
                    "espresso",
                    "calabash",
                    "uitest",
                    "xcuitest"
                  ],
                  "ignoreCase": "all"
                },
                "localeOption": {
                  "aliases": [
                    "locale"
                  ],
                  "description": "System language",
                  "enum": [
                    "da_DK",
                    "nl_NL",
                    "en_GB",
                    "en_US",
                    "fr_FR",
                    "de_DE",
                    "ja_JP",
                    "ru_RU",
                    "es_MX",
                    "es_ES",
                    "user"
                  ],
                  "ignoreCase": "all"
                },
                "loginOptions": {
                  "aliases": [
                    "loginOpts"
                  ],
                  "description": "Additional options for login",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "password": {
                  "description": "App Center password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "prepareOptions": {
                  "aliases": [
                    "prepareOpts"
                  ],
                  "description": "Additional options",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "prepareTests": {
                  "aliases": [
                    "enablePrepare"
                  ],
                  "description": "Prepare tests",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "runOptions": {
                  "aliases": [
                    "runOpts"
                  ],
                  "description": "Additional options for run",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "runTests": {
                  "aliases": [
                    "enableRun"
                  ],
                  "description": "Run tests",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "series": {
                  "description": "Test series",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "serverEndpoint": {
                  "description": "App Center service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "showDebugOutput": {
                  "aliases": [
                    "debug"
                  ],
                  "description": "Enable debug output",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "signInfo": {
                  "description": "Signing information",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "skipWaitingForResults": {
                  "aliases": [
                    "async"
                  ],
                  "description": "Do not wait for test result",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "uiTestBuildDirectory": {
                  "aliases": [
                    "uitestBuildDir"
                  ],
                  "description": "Build directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "uiTestKeyPassword": {
                  "aliases": [
                    "uitestKeyPass"
                  ],
                  "description": "Key password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "uiTestStorePassword": {
                  "aliases": [
                    "uitestStorePass"
                  ],
                  "description": "Store password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "uiTestToolsDirectory": {
                  "aliases": [
                    "uitestToolsDir"
                  ],
                  "description": "Test tools directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "uitestKeyAlias": {
                  "description": "Key alias",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "uitestStorePath": {
                  "description": "Store file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "userDefinedLocale": {
                  "description": "Other locale",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "username": {
                  "description": "App Center username",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "xcUITestBuildDirectory": {
                  "aliases": [
                    "xcuitestBuildDir"
                  ],
                  "description": "Build directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "xcUITestIpaFile": {
                  "aliases": [
                    "xcuitestTestIpaPath"
                  ],
                  "description": "Test IPA path",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "appFile"
              ]
            },
            "task": {
              "description": "App Center test\n\nTest app packages with Visual Studio App Center",
              "ignoreCase": "value",
              "pattern": "^AppCenterTest@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Download secure file inputs",
              "properties": {
                "retryCount": {
                  "description": "Retry Count",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "secureFile": {
                  "description": "Secure File",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "socketTimeout": {
                  "description": "Socket Timeout",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "secureFile"
              ]
            },
            "task": {
              "description": "Download secure file\n\nDownload a secure file to the agent machine",
              "ignoreCase": "value",
              "pattern": "^DownloadSecureFile@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Azure Container Apps Deploy inputs",
              "properties": {
                "acrName": {
                  "description": "Azure Container Registry name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "acrPassword": {
                  "description": "Azure Container Registry password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "acrUsername": {
                  "description": "Azure Container Registry username",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "appSourcePath": {
                  "description": "Application source path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureSubscription": {
                  "aliases": [
                    "connectedServiceNameARM"
                  ],
                  "description": "Azure Resource Manager connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "containerAppEnvironment": {
                  "description": "Azure Container App environment",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "containerAppName": {
                  "description": "Azure Container App name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "disableTelemetry": {
                  "description": "Disable telemetry",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "dockerfilePath": {
                  "description": "Dockerfile path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "environmentVariables": {
                  "description": "Environment variables",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "imageToBuild": {
                  "description": "Docker image to build",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "imageToDeploy": {
                  "description": "Docker image to deploy",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "location": {
                  "description": "Location of the Container App",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "resourceGroup": {
                  "description": "Azure resource group name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "runtimeStack": {
                  "description": "Application runtime stack",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "targetPort": {
                  "description": "Application target port",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "workingDirectory": {
                  "aliases": [
                    "cwd"
                  ],
                  "description": "Working Directory",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "azureSubscription"
              ]
            },
            "task": {
              "description": "Azure Container Apps Deploy\n\nAn Azure DevOps Task to build and deploy Azure Container Apps.",
              "ignoreCase": "value",
              "pattern": "^AzureContainerApps@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Power Platform Set Connection Variables inputs",
              "properties": {
                "ApplicationId": {
                  "description": "Application Id",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Environment": {
                  "description": "Environment Url",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerPlatformEnvironment": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerPlatformSPN": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "RedirectUri": {
                  "description": "Redirect Uri",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "authenticationType": {
                  "description": "Authentication type",
                  "enum": [
                    "PowerPlatformEnvironment",
                    "PowerPlatformSPN"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": []
            },
            "task": {
              "description": "Power Platform Set Connection Variables\n\nSets BuildTools.* variables to provide custom script tasks access to use the Service Connection as a single source of truth.",
              "ignoreCase": "value",
              "pattern": "^PowerPlatformSetConnectionVariables@2$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Start BizTalk360 alerts after maintenance inputs",
              "properties": {
                "BizTalk360EnvironmentId": {
                  "description": "BizTalk360EnvironmentId",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "BizTalk360ServerName": {
                  "description": "BizTalk360ServerName",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "MaintenanceId": {
                  "description": "MaintenanceId",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "BizTalk360EnvironmentId",
                "BizTalk360ServerName"
              ]
            },
            "task": {
              "description": "Start BizTalk360 alerts after maintenance\n\nStops BizTalk360 maintenance mode. Put this task after the deployment has finished.",
              "ignoreCase": "value",
              "pattern": "^RemoveAlertMaintenance@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Start BizTalk360 alerts after maintenance inputs",
              "properties": {
                "BizTalk360EnvironmentId": {
                  "description": "BizTalk360EnvironmentId",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "BizTalk360ServerUrl": {
                  "description": "BizTalk360ServerUrl",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "MaintenanceId": {
                  "description": "MaintenanceId",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "BizTalk360EnvironmentId",
                "BizTalk360ServerUrl"
              ]
            },
            "task": {
              "description": "Start BizTalk360 alerts after maintenance\n\nStops BizTalk360 maintenance mode. Put this task after the deployment has finished.",
              "ignoreCase": "value",
              "pattern": "^RemoveAlertMaintenance@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Use Ruby version inputs",
              "properties": {
                "addToPath": {
                  "description": "Add to PATH",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "versionSpec": {
                  "description": "Version spec",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Use Ruby version\n\nUse the specified version of Ruby from the tool cache, optionally adding it to the PATH",
              "ignoreCase": "value",
              "pattern": "^UseRubyVersion@0$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Grunt inputs",
              "properties": {
                "arguments": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "enableCodeCoverage": {
                  "description": "Enable Code Coverage",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "gruntCli": {
                  "description": "grunt-cli location",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "gruntFile": {
                  "description": "Grunt File Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "publishJUnitResults": {
                  "description": "Publish to Azure Pipelines",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "srcFiles": {
                  "description": "Source Files",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "targets": {
                  "description": "Grunt Task(s)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testFiles": {
                  "description": "Test Script Files",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testFramework": {
                  "description": "Test Framework",
                  "enum": [
                    "Mocha",
                    "Jasmine"
                  ],
                  "ignoreCase": "all"
                },
                "testResultsFiles": {
                  "description": "Test Results Files",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testRunTitle": {
                  "description": "Test Run Title",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "workingDirectory": {
                  "aliases": [
                    "cwd"
                  ],
                  "description": "Working Directory",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Grunt\n\nRun the Grunt JavaScript task runner",
              "ignoreCase": "value",
              "pattern": "^Grunt@0$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Azure SQL Database deployment inputs",
              "properties": {
                "AdditionalArguments": {
                  "description": "Additional SqlPackage.exe Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AuthenticationType": {
                  "description": "Authentication Type",
                  "enum": [
                    "server",
                    "aadAuthenticationPassword",
                    "aadAuthenticationIntegrated",
                    "connectionString",
                    "servicePrincipal"
                  ],
                  "ignoreCase": "all"
                },
                "BacpacFile": {
                  "description": "BACPAC File",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ConnectionString": {
                  "description": "Connection String",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "DacpacFile": {
                  "description": "DACPAC File",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "DatabaseName": {
                  "description": "Database",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "DeleteFirewallRule": {
                  "description": "Delete Rule After Task Ends",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "DeploymentAction": {
                  "description": "Action",
                  "enum": [
                    "Publish",
                    "Extract",
                    "Export",
                    "Import",
                    "Script",
                    "DriftReport",
                    "DeployReport"
                  ],
                  "ignoreCase": "all"
                },
                "EndIpAddress": {
                  "description": "End IP Address",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "InlineAdditionalArguments": {
                  "description": "Additional Invoke-Sqlcmd Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "IpDetectionMethod": {
                  "description": "Specify Firewall Rules Using",
                  "enum": [
                    "AutoDetect",
                    "IPAddressRange"
                  ],
                  "ignoreCase": "all"
                },
                "PublishProfile": {
                  "description": "Publish Profile",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ServerName": {
                  "description": "Azure SQL Server",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SqlAdditionalArguments": {
                  "description": "Additional Invoke-Sqlcmd Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SqlFile": {
                  "description": "SQL Script",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SqlInline": {
                  "description": "Inline SQL Script",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SqlPassword": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SqlUsername": {
                  "description": "Login",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "StartIpAddress": {
                  "description": "Start IP Address",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "aadSqlPassword": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "aadSqlUsername": {
                  "description": "Login",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureClassicSubscription": {
                  "aliases": [
                    "ConnectedServiceName"
                  ],
                  "description": "Azure Classic Subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureConnectionType": {
                  "aliases": [
                    "ConnectedServiceNameSelector"
                  ],
                  "description": "Azure Service Connection Type",
                  "enum": [
                    "ConnectedServiceName",
                    "ConnectedServiceNameARM"
                  ],
                  "ignoreCase": "all"
                },
                "azureSubscription": {
                  "aliases": [
                    "ConnectedServiceNameARM"
                  ],
                  "description": "Azure Subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "deployType": {
                  "aliases": [
                    "TaskNameSelector"
                  ],
                  "description": "Deploy type",
                  "enum": [
                    "DacpacTask",
                    "SqlTask",
                    "InlineSqlTask"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": []
            },
            "task": {
              "description": "Azure SQL Database deployment\n\nDeploy an Azure SQL Database using DACPAC or run scripts using SQLCMD",
              "ignoreCase": "value",
              "pattern": "^SqlAzureDacpacDeployment@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Container Structure Test inputs",
              "properties": {
                "configFile": {
                  "description": "Config file path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "dockerRegistryServiceConnection": {
                  "description": "Docker registry service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "failTaskOnFailedTests": {
                  "description": "Fail task if there are test failures",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "repository": {
                  "description": "Container repository",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "tag": {
                  "description": "Tag",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testRunTitle": {
                  "description": "Test run title",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "dockerRegistryServiceConnection",
                "repository",
                "configFile"
              ]
            },
            "task": {
              "description": "Container Structure Test\n\nUses container-structure-test (https://github.com/GoogleContainerTools/container-structure-test) to validate the structure of an image based on four categories of tests - command tests, file existence tests, file content tests and metadata tests",
              "ignoreCase": "value",
              "pattern": "^ContainerStructureTest@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "MSI Install inputs",
              "properties": {
                "Arguments": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Destination": {
                  "description": "Destination",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Name": {
                  "description": "Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Path": {
                  "description": "MSI",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "Path"
              ]
            },
            "task": {
              "description": "MSI Install\n\nInstall an MSI using the command msiexec.exe /i [msi file]",
              "ignoreCase": "value",
              "pattern": "^MSIInstall@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "MSI Install inputs",
              "properties": {
                "Arguments": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Destination": {
                  "description": "Destination",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Name": {
                  "description": "Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Path": {
                  "description": "MSI",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "Path"
              ]
            },
            "task": {
              "description": "MSI Install\n\nInstall an MSI using the command msiexec.exe /i [msi file]",
              "ignoreCase": "value",
              "pattern": "^MSIInstall@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Power Platform Export Solution inputs",
              "properties": {
                "AsyncOperation": {
                  "description": "Export solution as asynchronous operation",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "Environment": {
                  "description": "Environment Url",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ExportAutoNumberingSettings": {
                  "description": "Export auto numbering settings",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "ExportCalendarSettings": {
                  "description": "Export calendar settings",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "ExportCustomizationSettings": {
                  "description": "Export customization settings",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "ExportEmailTrackingSettings": {
                  "description": "Export email tracking settings",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "ExportExternalApplicationSettings": {
                  "description": "Export external application settings",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "ExportGeneralSettings": {
                  "description": "Export general settings",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "ExportIsvConfig": {
                  "description": "Export isv config",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "ExportMarketingSettings": {
                  "description": "Export marketing settings",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "ExportOutlookSynchronizationSettings": {
                  "description": "Export outlook synchornization settings",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "ExportRelationshipRoles": {
                  "description": "Export relationship roles",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "ExportSales": {
                  "description": "Export sales",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "Managed": {
                  "description": "Export as Managed Solution",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "MaxAsyncWaitTime": {
                  "description": "Maximum wait time in minutes for asynchronous operation",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "OverwriteLocalSolution": {
                  "description": "Overwrite the local solution.zip copy",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "PowerPlatformEnvironment": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerPlatformSPN": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SolutionName": {
                  "description": "Solution Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SolutionOutputFile": {
                  "description": "Solution Output File",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "TargetVersion": {
                  "description": "Target Version",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "authenticationType": {
                  "description": "Authentication type",
                  "enum": [
                    "PowerPlatformEnvironment",
                    "PowerPlatformSPN"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": [
                "SolutionName",
                "SolutionOutputFile"
              ]
            },
            "task": {
              "description": "Power Platform Export Solution\n\nPower Platform Export Solution",
              "ignoreCase": "value",
              "pattern": "^PowerPlatformExportSolution@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "deprecationMessage": "IISWebAppDeployment is deprecated - Deploy using MSDeploy, then create/update websites and app pools",
          "doNotSuggest": true,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "[Deprecated] IIS Web App deployment inputs",
              "properties": {
                "AddBinding": {
                  "description": "Add Binding",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "AdminPassword": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AdminUserName": {
                  "description": "Admin Login",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AppCmdCommands": {
                  "description": "Additional AppCmd.exe Commands",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AppPoolIdentity": {
                  "description": "Identity",
                  "enum": [
                    "ApplicationPoolIdentity",
                    "LocalService",
                    "LocalSystem",
                    "NetworkService",
                    "SpecificUser"
                  ],
                  "ignoreCase": "all"
                },
                "AppPoolName": {
                  "description": "Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AppPoolPassword": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AppPoolUsername": {
                  "description": "Username",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AssignDuplicateBinding": {
                  "description": "Assign Duplicate Binding",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "CreateAppPool": {
                  "description": "Create or Update Application Pool",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "CreateWebSite": {
                  "description": "Create or Update Website",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "DeployInParallel": {
                  "description": "Deploy in Parallel",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "DotNetVersion": {
                  "description": ".NET Version",
                  "enum": [
                    "v4.0",
                    "v2.0",
                    "No Managed Code"
                  ],
                  "ignoreCase": "all"
                },
                "EnvironmentName": {
                  "description": "Machines",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "HostNameWithHttp": {
                  "description": "Host Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "HostNameWithOutSNI": {
                  "description": "Host Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "HostNameWithSNI": {
                  "description": "Host Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "IPAddress": {
                  "description": "IP Address",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "MachineFilter": {
                  "description": "Deploy to Machines",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "OverRideParams": {
                  "description": "Override Parameters",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PipeLineMode": {
                  "description": "Managed Pipeline Mode",
                  "enum": [
                    "Integrated",
                    "Classic"
                  ],
                  "ignoreCase": "all"
                },
                "Port": {
                  "description": "Port",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Protocol": {
                  "description": "Protocol",
                  "enum": [
                    "https",
                    "http"
                  ],
                  "ignoreCase": "all"
                },
                "ResourceFilteringMethod": {
                  "description": "Select Machines By",
                  "enum": [
                    "machineNames",
                    "tags"
                  ],
                  "ignoreCase": "all"
                },
                "SSLCertThumbPrint": {
                  "description": "SSL Certificate Thumb Print",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ServerNameIndication": {
                  "description": "Server Name Indication Required",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "TestCertificate": {
                  "description": "Test Certificate",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "WebDeployPackage": {
                  "description": "Web Deploy Package",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "WebDeployParamFile": {
                  "description": "Web Deploy Parameter File",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "WebSiteAuthUserName": {
                  "description": "User Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "WebSiteAuthUserPassword": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "WebSiteName": {
                  "description": "Website Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "WebSitePhysicalPath": {
                  "description": "Physical Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "WebSitePhysicalPathAuth": {
                  "description": "Physical Path Authentication",
                  "enum": [
                    "WebSiteUserPassThrough",
                    "WebSiteWindowsAuth"
                  ],
                  "ignoreCase": "all"
                },
                "WinRMProtocol": {
                  "description": "Protocol",
                  "enum": [
                    "Http",
                    "Https"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": [
                "EnvironmentName",
                "WebDeployPackage"
              ]
            },
            "task": {
              "description": "[Deprecated] IIS Web App deployment\n\nDeploy using MSDeploy, then create/update websites and app pools",
              "ignoreCase": "value",
              "pattern": "^IISWebAppDeployment@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "deprecationMessage": "CloudLoadTest is deprecated - Run a load test in the cloud with Azure Pipelines",
          "doNotSuggest": true,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Cloud-based load test inputs",
              "properties": {
                "LoadTest": {
                  "description": "Load test file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "MachineType": {
                  "description": "Run load test using",
                  "enum": [
                    "0",
                    "2"
                  ],
                  "ignoreCase": "all"
                },
                "TestDrop": {
                  "description": "Load test files folder",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "TestSettings": {
                  "description": "Test settings file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ThresholdLimit": {
                  "description": "Number of permissible threshold violations",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "activeRunSettings": {
                  "description": "Active Run Settings",
                  "enum": [
                    "useFile",
                    "changeActive"
                  ],
                  "ignoreCase": "all"
                },
                "connectedServiceName": {
                  "description": "Azure Pipelines Connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "numOfSelfProvisionedAgents": {
                  "description": "Number of agents to use",
                  "ignoreCase": "key",
                  "type": "integer"
                },
                "resourceGroupName": {
                  "description": "Resource group rig",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "runSettingName": {
                  "description": "Specify the name of the Run Settings",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testContextParameters": {
                  "description": "Override load test context parameters",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "LoadTest"
              ]
            },
            "task": {
              "description": "Cloud-based load test\n\nRun a load test in the cloud with Azure Pipelines",
              "ignoreCase": "value",
              "pattern": "^CloudLoadTest@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Kubectl tool installer inputs",
              "properties": {
                "kubectlVersion": {
                  "description": "Kubectl Version Spec",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Kubectl tool installer\n\nInstall Kubectl on agent machine",
              "ignoreCase": "value",
              "pattern": "^KubectlInstaller@0$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Power Platform Deploy Package inputs",
              "properties": {
                "Environment": {
                  "description": "Environment Url",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "MaxAsyncWaitTime": {
                  "description": "Maximum wait time in minutes for package deployment",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PackageFile": {
                  "description": "Package File",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerPlatformEnvironment": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerPlatformSPN": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Settings": {
                  "description": "Runtime Package Settings that are passed to the package that is being deployed.",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "authenticationType": {
                  "description": "Authentication type",
                  "enum": [
                    "PowerPlatformEnvironment",
                    "PowerPlatformSPN"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": [
                "PackageFile"
              ]
            },
            "task": {
              "description": "Power Platform Deploy Package\n\nPower Platform Deploy Package. Requires Windows build agent",
              "ignoreCase": "value",
              "pattern": "^PowerPlatformDeployPackage@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Command Line inputs",
              "properties": {
                "arguments": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "failOnStandardError": {
                  "description": "Fail on Standard Error",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "filename": {
                  "description": "Tool",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "workingFolder": {
                  "description": "Working folder",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "filename"
              ]
            },
            "task": {
              "description": "Command Line\n\nRun a command line with arguments",
              "ignoreCase": "value",
              "pattern": "^CmdLine@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Command line inputs",
              "properties": {
                "failOnStderr": {
                  "description": "Fail on Standard Error",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "script": {
                  "description": "Script",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "workingDirectory": {
                  "description": "Working Directory",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Command line\n\nRun a command line script using Bash on Linux and macOS and cmd.exe on Windows",
              "ignoreCase": "value",
              "pattern": "^CmdLine@2$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "deprecationMessage": "NuGet is deprecated - Deprecated: use the NuGet task instead. It works with the new Tool Installer framework so you can easily use new versions of NuGet without waiting for a task update, provides better support for authenticated feeds outside this organization/collection, and uses NuGet 4 by default.",
          "doNotSuggest": true,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "NuGet command inputs",
              "properties": {
                "arguments": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "command": {
                  "description": "Command",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "command"
              ]
            },
            "task": {
              "description": "NuGet command\n\nDeprecated: use the NuGet task instead. It works with the new Tool Installer framework so you can easily use new versions of NuGet without waiting for a task update, provides better support for authenticated feeds outside this organization/collection, and uses NuGet 4 by default.",
              "ignoreCase": "value",
              "pattern": "^NuGet@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Container Build inputs",
              "properties": {
                "Dockerfile": {
                  "description": "Dockerfile",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "buildContext": {
                  "description": "Build context",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "dockerRegistryServiceConnection": {
                  "description": "Docker registry service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "repository": {
                  "description": "Container repository",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "tags": {
                  "description": "Tags",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Container Build\n\nContainer Build Task",
              "ignoreCase": "value",
              "pattern": "^ContainerBuild@0$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Run Single SQL Script inputs",
              "properties": {
                "SQLparameters": {
                  "description": "Replacement Text",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "databaseName": {
                  "description": "Database Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "queryTimeout": {
                  "description": "Query Timeout",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "removeComments": {
                  "description": "Remove comments",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "serverName": {
                  "description": "Server Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sqlScript": {
                  "description": "Specify SQL Script to run",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "userName": {
                  "description": "SQL Server Login",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "userPassword": {
                  "description": "SQL Server Authentication password",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "sqlScript",
                "serverName",
                "databaseName"
              ]
            },
            "task": {
              "description": "Run Single SQL Script\n\nAllows you to run SQL Scripts",
              "ignoreCase": "value",
              "pattern": "^RunSingleSqlScript@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "NuGet Restore inputs",
              "properties": {
                "feed": {
                  "description": "Use packages from this Azure Artifacts feed",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "includeNuGetOrg": {
                  "description": "Use packages from NuGet.org",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "noCache": {
                  "description": "Disable local cache",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "nugetConfigPath": {
                  "description": "Path to NuGet.config",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "packagesDirectory": {
                  "description": "Destination directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "selectOrConfig": {
                  "description": "Feeds to use",
                  "enum": [
                    "select",
                    "config"
                  ],
                  "ignoreCase": "all"
                },
                "solution": {
                  "description": "Path to solution, packages.config, or project.json",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "verbosity": {
                  "description": "Verbosity",
                  "enum": [
                    "-",
                    "Quiet",
                    "Normal",
                    "Detailed"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": []
            },
            "task": {
              "description": "NuGet Restore\n\nRestores NuGet packages in preparation for a Visual Studio Build step.",
              "ignoreCase": "value",
              "pattern": "^NuGetRestore@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "NuGet Installer inputs",
              "properties": {
                "noCache": {
                  "description": "Disable local cache",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "nuGetPath": {
                  "description": "Path to NuGet.exe",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "nuGetRestoreArgs": {
                  "description": "NuGet arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "nuGetVersion": {
                  "description": "NuGet Version",
                  "enum": [
                    "3.3.0",
                    "3.5.0.1829",
                    "4.0.0.2283",
                    "custom"
                  ],
                  "ignoreCase": "all"
                },
                "nugetConfigPath": {
                  "description": "Path to NuGet.config",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "restoreMode": {
                  "description": "Installation type",
                  "enum": [
                    "restore",
                    "install"
                  ],
                  "ignoreCase": "all"
                },
                "solution": {
                  "description": "Path to solution or packages.config",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "verbosity": {
                  "description": "Verbosity",
                  "enum": [
                    "-",
                    "Quiet",
                    "Normal",
                    "Detailed"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": []
            },
            "task": {
              "description": "NuGet Installer\n\nInstalls or restores missing NuGet packages. Use NuGetAuthenticate@0 task for latest capabilities.",
              "ignoreCase": "value",
              "pattern": "^NuGetInstaller@0$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "NuGet inputs",
              "properties": {
                "allowPackageConflicts": {
                  "description": "Allow duplicates to be skipped",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "arguments": {
                  "description": "Command and arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "basePath": {
                  "description": "Base path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "buildProperties": {
                  "description": "Additional build properties",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "command": {
                  "description": "Command",
                  "enum": [
                    "restore",
                    "pack",
                    "push",
                    "custom"
                  ],
                  "ignoreCase": "all"
                },
                "configuration": {
                  "aliases": [
                    "configurationToPack"
                  ],
                  "description": "Configuration to package",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "disableParallelProcessing": {
                  "description": "Disable parallel processing",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "externalFeedCredentials": {
                  "aliases": [
                    "externalEndpoints"
                  ],
                  "description": "Credentials for feeds outside this organization/collection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "feedsToUse": {
                  "aliases": [
                    "selectOrConfig"
                  ],
                  "description": "Feeds to use",
                  "enum": [
                    "select",
                    "config"
                  ],
                  "ignoreCase": "all"
                },
                "includeNuGetOrg": {
                  "description": "Use packages from NuGet.org",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "includeReferencedProjects": {
                  "description": "Include referenced projects",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "includeSymbols": {
                  "description": "Create symbols package",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "majorVersion": {
                  "aliases": [
                    "requestedMajorVersion"
                  ],
                  "description": "Major",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "minorVersion": {
                  "aliases": [
                    "requestedMinorVersion"
                  ],
                  "description": "Minor",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "noCache": {
                  "description": "Disable local cache",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "nuGetFeedType": {
                  "description": "Target feed location",
                  "enum": [
                    "internal",
                    "external"
                  ],
                  "ignoreCase": "all"
                },
                "nugetConfigPath": {
                  "description": "Path to NuGet.config",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "packDestination": {
                  "aliases": [
                    "outputDir"
                  ],
                  "description": "Package folder",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "packTimezone": {
                  "description": "Time zone",
                  "enum": [
                    "utc",
                    "local"
                  ],
                  "ignoreCase": "all"
                },
                "packagesToPack": {
                  "aliases": [
                    "searchPatternPack"
                  ],
                  "description": "Path to csproj or nuspec file(s) to pack",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "packagesToPush": {
                  "aliases": [
                    "searchPatternPush"
                  ],
                  "description": "Path to NuGet package(s) to publish",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "patchVersion": {
                  "aliases": [
                    "requestedPatchVersion"
                  ],
                  "description": "Patch",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "publishFeedCredentials": {
                  "aliases": [
                    "externalEndpoint"
                  ],
                  "description": "NuGet server",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "publishPackageMetadata": {
                  "description": "Publish pipeline metadata",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "publishVstsFeed": {
                  "aliases": [
                    "feedPublish"
                  ],
                  "description": "Target feed",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "restoreDirectory": {
                  "aliases": [
                    "packagesDirectory"
                  ],
                  "description": "Destination directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "restoreSolution": {
                  "aliases": [
                    "solution"
                  ],
                  "description": "Path to solution, packages.config, or project.json",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "toolPackage": {
                  "description": "Tool Package",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "verbosityPack": {
                  "description": "Verbosity",
                  "enum": [
                    "Quiet",
                    "Normal",
                    "Detailed"
                  ],
                  "ignoreCase": "all"
                },
                "verbosityPush": {
                  "description": "Verbosity",
                  "enum": [
                    "Quiet",
                    "Normal",
                    "Detailed"
                  ],
                  "ignoreCase": "all"
                },
                "verbosityRestore": {
                  "description": "Verbosity",
                  "enum": [
                    "Quiet",
                    "Normal",
                    "Detailed"
                  ],
                  "ignoreCase": "all"
                },
                "versionEnvVar": {
                  "description": "Environment variable",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "versioningScheme": {
                  "description": "Automatic package versioning",
                  "enum": [
                    "off",
                    "byPrereleaseNumber",
                    "byEnvVar",
                    "byBuildNumber"
                  ],
                  "ignoreCase": "all"
                },
                "vstsFeed": {
                  "aliases": [
                    "feedRestore"
                  ],
                  "description": "Use packages from this Azure Artifacts/TFS feed",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "NuGet\n\nRestore, pack, or push NuGet packages, or run a NuGet command. Supports NuGet.org and authenticated feeds like Azure Artifacts and MyGet. Uses NuGet.exe and works with .NET Framework apps. For .NET Core and .NET Standard apps, use the .NET Core task.",
              "ignoreCase": "value",
              "pattern": "^NuGetCommand@2$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Grant Logon As A Service Right inputs",
              "properties": {
                "AdminPassword": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AdminUserName": {
                  "description": "Admin Login",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "EnvironmentName": {
                  "description": "Machines",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "RunPowershellInParallel": {
                  "description": "Run PowerShell in Parallel",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "TestCertificate": {
                  "description": "Test Certificate",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "UserNames": {
                  "description": "User Names",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "deploymentGroup": {
                  "description": "Target is Deployment Group",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "protocol": {
                  "description": "Protocol",
                  "enum": [
                    "Http",
                    "Https"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": [
                "UserNames"
              ]
            },
            "task": {
              "description": "Grant Logon As A Service Right\n\nGrant logon as a service.",
              "ignoreCase": "value",
              "pattern": "^GrantLogonAsAServiceRight@8$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Delay inputs",
              "properties": {
                "delayForMinutes": {
                  "description": "Delay Time (minutes)",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Delay\n\nDelay further execution of a workflow by a fixed time",
              "ignoreCase": "value",
              "pattern": "^Delay@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Stop Windows Service inputs",
              "properties": {
                "AdminPassword": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AdminUserName": {
                  "description": "Admin Login",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "EnvironmentName": {
                  "description": "Machines",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "InstanceName": {
                  "description": "TopShelf Instance Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "KillIfTimedOut": {
                  "description": "Kill service if stop fails",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "RunPowershellInParallel": {
                  "description": "Run PowerShell in Parallel",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "ServiceNames": {
                  "description": "Service Names",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "StartupType": {
                  "description": "Service Startup Type",
                  "enum": [
                    "Disabled",
                    "Manual",
                    "Automatic"
                  ],
                  "ignoreCase": "all"
                },
                "TestCertificate": {
                  "description": "Test Certificate",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "WaitTimeoutInSeconds": {
                  "description": "Wait timeout",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "deploymentGroup": {
                  "description": "Target is Deployment Group",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "protocol": {
                  "description": "Protocol",
                  "enum": [
                    "Http",
                    "Https"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": [
                "ServiceNames"
              ]
            },
            "task": {
              "description": "Stop Windows Service\n\nStop a windows service.",
              "ignoreCase": "value",
              "pattern": "^StopWindowsService@8$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Power Platform Assign Group inputs",
              "properties": {
                "BusinessUnit": {
                  "description": "Business Unit",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Environment": {
                  "description": "Environment",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Group": {
                  "description": "Group",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "GroupName": {
                  "description": "Group Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "MembershipType": {
                  "description": "Membership Type",
                  "enum": [
                    "MembersAndGuests",
                    "Members",
                    "Owners",
                    "Guests"
                  ],
                  "ignoreCase": "all"
                },
                "PowerPlatformEnvironment": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerPlatformSPN": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Role": {
                  "description": "Role",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "TeamType": {
                  "description": "Team Type",
                  "enum": [
                    "Owner",
                    "Access",
                    "AadSecurityGroup",
                    "AadOfficeGroup"
                  ],
                  "ignoreCase": "all"
                },
                "authenticationType": {
                  "description": "Authentication type",
                  "enum": [
                    "PowerPlatformEnvironment",
                    "PowerPlatformSPN"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": [
                "Group",
                "GroupName",
                "Role",
                "TeamType",
                "MembershipType"
              ]
            },
            "task": {
              "description": "Power Platform Assign Group\n\nAssign group to a target Power Platform environment with specified security role",
              "ignoreCase": "value",
              "pattern": "^PowerPlatformAssignGroup@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Power Platform Checker inputs",
              "properties": {
                "ArtifactDestinationName": {
                  "description": "Artifact folder destination name; default: 'CodeAnalysisLogs'",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "CustomPACheckerEndpoint": {
                  "description": "Specify a custom URL as Power Apps Checker endpoint",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ErrorLevel": {
                  "description": "Error Level",
                  "enum": [
                    "CriticalIssueCount",
                    "HighIssueCount",
                    "MediumIssueCount",
                    "LowIssueCount",
                    "InformationalIssueCount"
                  ],
                  "ignoreCase": "all"
                },
                "ErrorThreshold": {
                  "description": "Error threshold",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "FailOnPowerAppsCheckerAnalysisError": {
                  "description": "Fail on Power Apps Checker analysis error",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "FileLocation": {
                  "description": "Location of File(s) to Analyze",
                  "enum": [
                    "localFiles",
                    "sasUriFile"
                  ],
                  "ignoreCase": "all"
                },
                "FilesToAnalyze": {
                  "description": "Local Files to Analyze",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "FilesToAnalyzeSasUri": {
                  "description": "Sas Uri for Files to Analyze",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "FilesToExclude": {
                  "description": "Exclude Files from the Analysis",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerPlatformEnvironment": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerPlatformSPN": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "RuleSet": {
                  "description": "Rule Set",
                  "enum": [
                    "083a2ef5-7e0e-4754-9d88-9455142dc08b",
                    "0ad12346-e108-40b8-a956-9a8f95ea18c9"
                  ],
                  "ignoreCase": "all"
                },
                "RulesToOverride": {
                  "description": "Rules To Override",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "UseDefaultPACheckerEndpoint": {
                  "description": "Use default Power Apps Checker endpoint",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "authenticationType": {
                  "description": "Authentication type",
                  "enum": [
                    "PowerPlatformEnvironment",
                    "PowerPlatformSPN"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": [
                "RuleSet"
              ]
            },
            "task": {
              "description": "Power Platform Checker\n\nAnalyze solutions using Power Apps Checker endpoint",
              "ignoreCase": "value",
              "pattern": "^PowerPlatformChecker@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Xamarin.iOS inputs",
              "properties": {
                "args": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "buildForSimulator": {
                  "aliases": [
                    "forSimulator"
                  ],
                  "description": "Build for iOS Simulator",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "clean": {
                  "description": "Clean",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "configuration": {
                  "description": "Configuration",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "mdtoolFile": {
                  "aliases": [
                    "buildToolLocation",
                    "mdtoolLocation"
                  ],
                  "description": "Build tool path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "packageApp": {
                  "description": "Create app package",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "runNugetRestore": {
                  "description": "Run NuGet restore",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "signingIdentity": {
                  "aliases": [
                    "iosSigningIdentity"
                  ],
                  "description": "Signing identity",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "signingProvisioningProfileID": {
                  "aliases": [
                    "provProfileUuid"
                  ],
                  "description": "Provisioning profile UUID",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "solutionFile": {
                  "aliases": [
                    "solution"
                  ],
                  "description": "Solution",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "workingDirectory": {
                  "aliases": [
                    "cwd"
                  ],
                  "description": "Working directory",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Xamarin.iOS\n\nBuild an iOS app with Xamarin on macOS",
              "ignoreCase": "value",
              "pattern": "^XamariniOS@2$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Xamarin.iOS inputs",
              "properties": {
                "args": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "buildForSimulator": {
                  "aliases": [
                    "forSimulator"
                  ],
                  "description": "Build for iOS Simulator",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "buildToolOption": {
                  "aliases": [
                    "buildTool"
                  ],
                  "description": "Build tool",
                  "enum": [
                    "xbuild",
                    "msbuild"
                  ],
                  "ignoreCase": "all"
                },
                "clean": {
                  "description": "Clean",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "configuration": {
                  "description": "Configuration",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "mdtoolFile": {
                  "aliases": [
                    "mdtoolLocation"
                  ],
                  "description": "Build tool path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "packageApp": {
                  "description": "Create app package",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "runNugetRestore": {
                  "description": "Run NuGet restore",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "signingDefaultKeychainPassword": {
                  "aliases": [
                    "defaultKeychainPassword"
                  ],
                  "description": "Default keychain password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "signingIdentity": {
                  "aliases": [
                    "iosSigningIdentity"
                  ],
                  "description": "Signing identity",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "signingOption": {
                  "aliases": [
                    "signMethod"
                  ],
                  "description": "Override using",
                  "enum": [
                    "file",
                    "id"
                  ],
                  "ignoreCase": "all"
                },
                "signingP12File": {
                  "aliases": [
                    "p12"
                  ],
                  "description": "P12 certificate file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "signingP12Password": {
                  "aliases": [
                    "p12pwd"
                  ],
                  "description": "P12 password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "signingProvisioningProfileFile": {
                  "aliases": [
                    "provProfile"
                  ],
                  "description": "Provisioning profile file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "signingProvisioningProfileID": {
                  "aliases": [
                    "provProfileUuid"
                  ],
                  "description": "Provisioning profile UUID",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "signingRemoveProfile": {
                  "aliases": [
                    "removeProfile"
                  ],
                  "description": "Remove profile after build",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "signingUnlockDefaultKeychain": {
                  "aliases": [
                    "unlockDefaultKeychain"
                  ],
                  "description": "Unlock default keychain",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "solutionFile": {
                  "aliases": [
                    "solution"
                  ],
                  "description": "Solution",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "workingDirectory": {
                  "aliases": [
                    "cwd"
                  ],
                  "description": "Working directory",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Xamarin.iOS\n\nBuild an iOS app with Xamarin on macOS",
              "ignoreCase": "value",
              "pattern": "^XamariniOS@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Publish test results inputs",
              "properties": {
                "configuration": {
                  "description": "Configuration",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "mergeTestResults": {
                  "description": "Merge Test Results",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "platform": {
                  "description": "Platform",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "publishRunAttachments": {
                  "description": "Upload Test Attachments",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "testResultsFiles": {
                  "description": "Test Results Files",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testRunTitle": {
                  "description": "Test Run Title",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testRunner": {
                  "description": "Test Result Format",
                  "enum": [
                    "JUnit",
                    "NUnit",
                    "VSTest",
                    "XUnit"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": []
            },
            "task": {
              "description": "Publish test results\n\nPublish test results to Azure Pipelines",
              "ignoreCase": "value",
              "pattern": "^PublishTestResults@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Publish Test Results inputs",
              "properties": {
                "buildConfiguration": {
                  "aliases": [
                    "configuration"
                  ],
                  "description": "Build Configuration",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "buildPlatform": {
                  "aliases": [
                    "platform"
                  ],
                  "description": "Build Platform",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "failTaskOnFailedTests": {
                  "description": "Fail if there are test failures",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "mergeTestResults": {
                  "description": "Merge test results",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "publishRunAttachments": {
                  "description": "Upload test results files",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "searchFolder": {
                  "description": "Search folder",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testResultsFiles": {
                  "description": "Test results files",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testResultsFormat": {
                  "aliases": [
                    "testRunner"
                  ],
                  "description": "Test result format",
                  "enum": [
                    "JUnit",
                    "NUnit",
                    "VSTest",
                    "XUnit",
                    "CTest"
                  ],
                  "ignoreCase": "all"
                },
                "testRunTitle": {
                  "description": "Test run title",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Publish Test Results\n\nPublish test results to Azure Pipelines",
              "ignoreCase": "value",
              "pattern": "^PublishTestResults@2$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Azure file copy inputs",
              "properties": {
                "AdditionalArguments": {
                  "description": "Additional Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "BlobPrefix": {
                  "description": "Blob Prefix",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "CleanTargetBeforeCopy": {
                  "description": "Clean Target",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "ContainerName": {
                  "description": "Container Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "CopyFilesInParallel": {
                  "description": "Copy in Parallel",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "Destination": {
                  "description": "Destination Type",
                  "enum": [
                    "AzureBlob",
                    "AzureVMs"
                  ],
                  "ignoreCase": "all"
                },
                "MachineNames": {
                  "description": "Filter Criteria",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ResourceFilteringMethod": {
                  "description": "Select Machines By",
                  "enum": [
                    "machineNames",
                    "tags"
                  ],
                  "ignoreCase": "all"
                },
                "SourcePath": {
                  "description": "Source",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "TargetPath": {
                  "description": "Destination Folder",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureClassicSubscription": {
                  "aliases": [
                    "ConnectedServiceName"
                  ],
                  "description": "Azure Classic Subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureConnectionType": {
                  "aliases": [
                    "ConnectedServiceNameSelector"
                  ],
                  "description": "Azure Connection Type",
                  "enum": [
                    "ConnectedServiceName",
                    "ConnectedServiceNameARM"
                  ],
                  "ignoreCase": "all"
                },
                "azureSubscription": {
                  "aliases": [
                    "ConnectedServiceNameARM"
                  ],
                  "description": "Azure Subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "classicStorage": {
                  "aliases": [
                    "StorageAccount"
                  ],
                  "description": "Classic Storage Account",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "cloudService": {
                  "aliases": [
                    "EnvironmentName"
                  ],
                  "description": "Cloud Service",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "enableCopyPrerequisites": {
                  "description": "Enable Copy Prerequisites",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "outputStorageContainerSasToken": {
                  "description": "Storage Container SAS Token",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "outputStorageUri": {
                  "description": "Storage Container URI",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "resourceGroup": {
                  "aliases": [
                    "EnvironmentNameRM"
                  ],
                  "description": "Resource Group",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "skipCACheck": {
                  "description": "Test Certificate",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "storage": {
                  "aliases": [
                    "StorageAccountRM"
                  ],
                  "description": "RM Storage Account",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "vmsAdminPassword": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "vmsAdminUserName": {
                  "description": "Admin Login",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "SourcePath",
                "Destination"
              ]
            },
            "task": {
              "description": "Azure file copy\n\nCopy files to Azure Blob Storage or virtual machines",
              "ignoreCase": "value",
              "pattern": "^AzureFileCopy@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Azure file copy inputs",
              "properties": {
                "AdditionalArgumentsForBlobCopy": {
                  "description": "Optional Arguments (for uploading files to blob)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AdditionalArgumentsForVMCopy": {
                  "description": "Optional Arguments (for downloading files to VM)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "BlobPrefix": {
                  "description": "Blob Prefix",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "CleanTargetBeforeCopy": {
                  "description": "Clean Target",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "ContainerName": {
                  "description": "Container Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "CopyFilesInParallel": {
                  "description": "Copy in Parallel",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "Destination": {
                  "description": "Destination Type",
                  "enum": [
                    "AzureBlob",
                    "AzureVMs"
                  ],
                  "ignoreCase": "all"
                },
                "MachineNames": {
                  "description": "Filter Criteria",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ResourceFilteringMethod": {
                  "description": "Select Machines By",
                  "enum": [
                    "machineNames",
                    "tags"
                  ],
                  "ignoreCase": "all"
                },
                "SourcePath": {
                  "description": "Source",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "TargetPath": {
                  "description": "Destination Folder",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureSubscription": {
                  "aliases": [
                    "ConnectedServiceNameARM"
                  ],
                  "description": "Azure Subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "enableCopyPrerequisites": {
                  "description": "Enable Copy Prerequisites",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "resourceGroup": {
                  "aliases": [
                    "EnvironmentNameRM"
                  ],
                  "description": "Resource Group",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sasTokenTimeOutInMinutes": {
                  "description": "SAS Token Expiration Period In Minutes",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "skipCACheck": {
                  "description": "Test Certificate",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "storage": {
                  "aliases": [
                    "StorageAccountRM"
                  ],
                  "description": "RM Storage Account",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "vmsAdminPassword": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "vmsAdminUserName": {
                  "description": "Admin Login",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "SourcePath",
                "azureSubscription",
                "Destination",
                "storage"
              ]
            },
            "task": {
              "description": "Azure file copy\n\nCopy files to Azure Blob Storage or virtual machines",
              "ignoreCase": "value",
              "pattern": "^AzureFileCopy@4$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Azure file copy inputs",
              "properties": {
                "AdditionalArgumentsForBlobCopy": {
                  "description": "Optional Arguments (for uploading files to blob)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AdditionalArgumentsForVMCopy": {
                  "description": "Optional Arguments (for downloading files to VM)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "BlobPrefix": {
                  "description": "Blob Prefix",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "CleanTargetBeforeCopy": {
                  "description": "Clean Target",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "ContainerName": {
                  "description": "Container Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "CopyFilesInParallel": {
                  "description": "Copy in Parallel",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "Destination": {
                  "description": "Destination Type",
                  "enum": [
                    "AzureBlob",
                    "AzureVMs"
                  ],
                  "ignoreCase": "all"
                },
                "MachineNames": {
                  "description": "Filter Criteria",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ResourceFilteringMethod": {
                  "description": "Select Machines By",
                  "enum": [
                    "machineNames",
                    "tags"
                  ],
                  "ignoreCase": "all"
                },
                "SourcePath": {
                  "description": "Source",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "TargetPath": {
                  "description": "Destination Folder",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureClassicSubscription": {
                  "aliases": [
                    "ConnectedServiceName"
                  ],
                  "description": "Azure Classic Subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureConnectionType": {
                  "aliases": [
                    "ConnectedServiceNameSelector"
                  ],
                  "description": "Azure Connection Type",
                  "enum": [
                    "ConnectedServiceName",
                    "ConnectedServiceNameARM"
                  ],
                  "ignoreCase": "all"
                },
                "azureSubscription": {
                  "aliases": [
                    "ConnectedServiceNameARM"
                  ],
                  "description": "Azure Subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "classicStorage": {
                  "aliases": [
                    "StorageAccount"
                  ],
                  "description": "Classic Storage Account",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "cloudService": {
                  "aliases": [
                    "EnvironmentName"
                  ],
                  "description": "Cloud Service",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "enableCopyPrerequisites": {
                  "description": "Enable Copy Prerequisites",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "outputStorageContainerSasToken": {
                  "description": "Storage Container SAS Token",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "outputStorageUri": {
                  "description": "Storage Container URI",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "resourceGroup": {
                  "aliases": [
                    "EnvironmentNameRM"
                  ],
                  "description": "Resource Group",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "skipCACheck": {
                  "description": "Test Certificate",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "storage": {
                  "aliases": [
                    "StorageAccountRM"
                  ],
                  "description": "RM Storage Account",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "vmsAdminPassword": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "vmsAdminUserName": {
                  "description": "Admin Login",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "SourcePath",
                "Destination"
              ]
            },
            "task": {
              "description": "Azure file copy\n\nCopy files to Azure Blob Storage or virtual machines",
              "ignoreCase": "value",
              "pattern": "^AzureFileCopy@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Azure file copy inputs",
              "properties": {
                "AdditionalArgumentsForBlobCopy": {
                  "description": "Optional Arguments (for uploading files to blob)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AdditionalArgumentsForVMCopy": {
                  "description": "Optional Arguments (for downloading files to VM)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "BlobPrefix": {
                  "description": "Blob Prefix",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "CleanTargetBeforeCopy": {
                  "description": "Clean Target",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "ContainerName": {
                  "description": "Container Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "CopyFilesInParallel": {
                  "description": "Copy in Parallel",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "Destination": {
                  "description": "Destination Type",
                  "enum": [
                    "AzureBlob",
                    "AzureVMs"
                  ],
                  "ignoreCase": "all"
                },
                "MachineNames": {
                  "description": "Filter Criteria",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ResourceFilteringMethod": {
                  "description": "Select Machines By",
                  "enum": [
                    "machineNames",
                    "tags"
                  ],
                  "ignoreCase": "all"
                },
                "SourcePath": {
                  "description": "Source",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "TargetPath": {
                  "description": "Destination Folder",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureSubscription": {
                  "aliases": [
                    "ConnectedServiceNameARM"
                  ],
                  "description": "Azure Subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "enableCopyPrerequisites": {
                  "description": "Enable Copy Prerequisites",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "resourceGroup": {
                  "aliases": [
                    "EnvironmentNameRM"
                  ],
                  "description": "Resource Group",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sasTokenTimeOutInMinutes": {
                  "description": "SAS Token Expiration Period In Minutes",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "skipCACheck": {
                  "description": "Test Certificate",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "storage": {
                  "aliases": [
                    "StorageAccountRM"
                  ],
                  "description": "RM Storage Account",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "vmsAdminPassword": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "vmsAdminUserName": {
                  "description": "Admin Login",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "SourcePath",
                "azureSubscription",
                "Destination",
                "storage"
              ]
            },
            "task": {
              "description": "Azure file copy\n\nCopy files to Azure Blob Storage or virtual machines",
              "ignoreCase": "value",
              "pattern": "^AzureFileCopy@5$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Azure file copy inputs",
              "properties": {
                "AdditionalArgumentsForBlobCopy": {
                  "description": "Optional Arguments (for uploading files to blob)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AdditionalArgumentsForVMCopy": {
                  "description": "Optional Arguments (for downloading files to VM)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "BlobPrefix": {
                  "description": "Blob Prefix",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "CleanTargetBeforeCopy": {
                  "description": "Clean Target",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "ContainerName": {
                  "description": "Container Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "CopyFilesInParallel": {
                  "description": "Copy in Parallel",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "Destination": {
                  "description": "Destination Type",
                  "enum": [
                    "AzureBlob",
                    "AzureVMs"
                  ],
                  "ignoreCase": "all"
                },
                "MachineNames": {
                  "description": "Filter Criteria",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ResourceFilteringMethod": {
                  "description": "Select Machines By",
                  "enum": [
                    "machineNames",
                    "tags"
                  ],
                  "ignoreCase": "all"
                },
                "SourcePath": {
                  "description": "Source",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "TargetPath": {
                  "description": "Destination Folder",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureSubscription": {
                  "aliases": [
                    "ConnectedServiceNameARM"
                  ],
                  "description": "Azure Subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "enableCopyPrerequisites": {
                  "description": "Enable Copy Prerequisites",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "outputStorageContainerSasToken": {
                  "description": "Storage Container SAS Token",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "outputStorageUri": {
                  "description": "Storage Container URI",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "resourceGroup": {
                  "aliases": [
                    "EnvironmentNameRM"
                  ],
                  "description": "Resource Group",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sasTokenTimeOutInMinutes": {
                  "description": "SAS Token Expiration Period In Minutes",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "skipCACheck": {
                  "description": "Test Certificate",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "storage": {
                  "aliases": [
                    "StorageAccountRM"
                  ],
                  "description": "RM Storage Account",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "vmsAdminPassword": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "vmsAdminUserName": {
                  "description": "Admin Login",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "SourcePath",
                "azureSubscription",
                "Destination",
                "storage"
              ]
            },
            "task": {
              "description": "Azure file copy\n\nCopy files to Azure Blob Storage or virtual machines",
              "ignoreCase": "value",
              "pattern": "^AzureFileCopy@3$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "SSAS Deploy inputs",
              "properties": {
                "AsDBFilePath": {
                  "description": "Path to .asdatabase file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ConfigurationSettingsDeployment": {
                  "description": "Retain configuration settings for existing objects",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "DatabaseName": {
                  "description": "Name of the SSAS database",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ImpersonationInformation": {
                  "description": "Select an impersonation option",
                  "enum": [
                    "None",
                    "UseASpecificWindowsUser",
                    "UseTheServiceAccount",
                    "UseTheCredentialsOfTheCurrentUser",
                    "Inherit"
                  ],
                  "ignoreCase": "all"
                },
                "OptimizationSettingsDeployment": {
                  "description": "Retain optimization settings for existing objects",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "PartitionDeployment": {
                  "description": "Partition deployment",
                  "enum": [
                    "DeployPartitions",
                    "RetainPartitions"
                  ],
                  "ignoreCase": "all"
                },
                "ProcessingOption": {
                  "description": "Processing option",
                  "enum": [
                    "Default",
                    "Full",
                    "DoNotProcess"
                  ],
                  "ignoreCase": "all"
                },
                "RoleDeployment": {
                  "description": "Role deployment",
                  "enum": [
                    "DeployRolesAndMembers",
                    "DeployRolesRetainMembers",
                    "RetainRoles"
                  ],
                  "ignoreCase": "all"
                },
                "ServerName": {
                  "description": "Name of the SSAS Server",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ServiceAccountName": {
                  "description": "Username",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ServiceAccountPassword": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "TransactionalDeployment": {
                  "description": "Transactional deployment",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "WriteBackTableCreation": {
                  "description": "Writeback Table Options",
                  "enum": [
                    "Create",
                    "CreateAlways",
                    "UseExisting"
                  ],
                  "ignoreCase": "all"
                },
                "customMGMTVersion": {
                  "description": "Custom Analysis Services Deployment executable path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "mgmtVersion": {
                  "description": "Management Studio Version",
                  "enum": [
                    "auto",
                    "2012",
                    "2014",
                    "2016",
                    "2017",
                    "custom"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": [
                "AsDBFilePath",
                "ServerName",
                "DatabaseName"
              ]
            },
            "task": {
              "description": "SSAS Deploy\n\nDeploy SQL Server Analysis Services Project .xmla file using Invoke-ASCmd",
              "ignoreCase": "value",
              "pattern": "^DeploySsas@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Index sources and publish symbols inputs",
              "properties": {
                "CompressSymbols": {
                  "description": "Compress symbols",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "DetailedLog": {
                  "description": "Verbose logging",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "IndexSources": {
                  "description": "Index sources",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "IndexableFileFormats": {
                  "description": "Symbol file formats to publish",
                  "enum": [
                    "Default",
                    "Pdb",
                    "SourceMap",
                    "All"
                  ],
                  "ignoreCase": "all"
                },
                "PublishSymbols": {
                  "description": "Publish symbols",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "SearchPattern": {
                  "description": "Search pattern",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SymbolExpirationInDays": {
                  "description": "Symbol Expiration (in days)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SymbolServerType": {
                  "description": "Symbol server type",
                  "enum": [
                    " ",
                    "TeamServices",
                    "FileShare"
                  ],
                  "ignoreCase": "all"
                },
                "SymbolsArtifactName": {
                  "description": "Artifact name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SymbolsFolder": {
                  "description": "Path to symbols folder",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SymbolsMaximumWaitTime": {
                  "description": "Max wait time (min)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SymbolsPath": {
                  "description": "Path to publish symbols",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SymbolsProduct": {
                  "description": "Product",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SymbolsVersion": {
                  "description": "Version",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "TreatNotIndexedAsWarning": {
                  "description": "Warn if not indexed",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "UseNetCoreClientTool": {
                  "description": "Use NetCore client tool",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": []
            },
            "task": {
              "description": "Index sources and publish symbols\n\nIndex your source code and publish symbols to a file share or Azure Artifacts symbol server",
              "ignoreCase": "value",
              "pattern": "^PublishSymbols@2$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Index Sources & Publish Symbols inputs",
              "properties": {
                "SearchPattern": {
                  "description": "Search pattern",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SkipIndexing": {
                  "description": "Skip indexing",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "SymbolsArtifactName": {
                  "description": "Artifact name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SymbolsFolder": {
                  "description": "Path to symbols folder",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SymbolsMaximumWaitTime": {
                  "description": "Max wait time (min)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SymbolsPath": {
                  "description": "Path to publish symbols",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SymbolsProduct": {
                  "description": "Product",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SymbolsVersion": {
                  "description": "Version",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "TreatNotIndexedAsWarning": {
                  "description": "Warn if not indexed",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": []
            },
            "task": {
              "description": "Index Sources & Publish Symbols\n\nIndex your source code and publish symbols to a file share",
              "ignoreCase": "value",
              "pattern": "^PublishSymbols@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Copy files over SSH inputs",
              "properties": {
                "cleanHiddenFilesInTarget": {
                  "description": "Remove hidden files in target folder",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "cleanTargetFolder": {
                  "description": "Clean target folder",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "contents": {
                  "description": "Contents",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "failOnEmptySource": {
                  "description": "Fail if no files found to copy",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "flattenFolders": {
                  "description": "Flatten folders",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "isWindowsOnTarget": {
                  "description": "Target machine running Windows",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "overwrite": {
                  "description": "Overwrite",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "readyTimeout": {
                  "description": "SSH handshake timeout",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sourceFolder": {
                  "description": "Source folder",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sshEndpoint": {
                  "description": "SSH service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "targetFolder": {
                  "description": "Target folder",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "sshEndpoint"
              ]
            },
            "task": {
              "description": "Copy files over SSH\n\nCopy files or build artifacts to a remote machine over SSH",
              "ignoreCase": "value",
              "pattern": "^CopyFilesOverSSH@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "MSI Uninstall inputs",
              "properties": {
                "Arguments": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Product": {
                  "description": "Product",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "Product"
              ]
            },
            "task": {
              "description": "MSI Uninstall\n\nUninstall an MSI using the command msiexec.exe /x[InstallGuid]",
              "ignoreCase": "value",
              "pattern": "^MSIUninstall@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "MSI Uninstall inputs",
              "properties": {
                "Arguments": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Product": {
                  "description": "Product",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "Product"
              ]
            },
            "task": {
              "description": "MSI Uninstall\n\nUninstall an MSI using the command msiexec.exe /x[InstallGuid]",
              "ignoreCase": "value",
              "pattern": "^MSIUninstall@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Gradle inputs",
              "properties": {
                "checkStyleRunAnalysis": {
                  "aliases": [
                    "checkstyleAnalysisEnabled"
                  ],
                  "description": "Run Checkstyle",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "codeCoverageClassFilesDirectories": {
                  "aliases": [
                    "classFilesDirectories"
                  ],
                  "description": "Class files directories",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "codeCoverageClassFilter": {
                  "aliases": [
                    "classFilter"
                  ],
                  "description": "Class inclusion/exclusion filters",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "codeCoverageFailIfEmpty": {
                  "aliases": [
                    "failIfCoverageEmpty"
                  ],
                  "description": "Fail when code coverage results are missing",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "codeCoverageGradle5xOrHigher": {
                  "aliases": [
                    "gradle5xOrHigher"
                  ],
                  "description": "Gradle version >= 5.x",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "codeCoverageToolOption": {
                  "aliases": [
                    "codeCoverageTool"
                  ],
                  "description": "Code coverage tool",
                  "enum": [
                    "None",
                    "Cobertura",
                    "JaCoCo"
                  ],
                  "ignoreCase": "all"
                },
                "findBugsRunAnalysis": {
                  "aliases": [
                    "findbugsAnalysisEnabled"
                  ],
                  "description": "Run FindBugs",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "gradleOptions": {
                  "aliases": [
                    "gradleOpts"
                  ],
                  "description": "Set GRADLE_OPTS",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "gradleWrapperFile": {
                  "aliases": [
                    "wrapperScript"
                  ],
                  "description": "Gradle wrapper",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "javaHomeOption": {
                  "aliases": [
                    "javaHomeSelection"
                  ],
                  "description": "Set JAVA_HOME by",
                  "enum": [
                    "JDKVersion",
                    "Path"
                  ],
                  "ignoreCase": "all"
                },
                "jdkArchitectureOption": {
                  "aliases": [
                    "jdkArchitecture"
                  ],
                  "description": "JDK architecture",
                  "enum": [
                    "x86",
                    "x64"
                  ],
                  "ignoreCase": "all"
                },
                "jdkDirectory": {
                  "aliases": [
                    "jdkUserInputPath"
                  ],
                  "description": "JDK path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "jdkVersionOption": {
                  "aliases": [
                    "jdkVersion"
                  ],
                  "description": "JDK version",
                  "enum": [
                    "default",
                    "1.11",
                    "1.10",
                    "1.9",
                    "1.8",
                    "1.7",
                    "1.6"
                  ],
                  "ignoreCase": "all"
                },
                "options": {
                  "description": "Options",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "pmdRunAnalysis": {
                  "aliases": [
                    "pmdAnalysisEnabled"
                  ],
                  "description": "Run PMD",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "publishJUnitResults": {
                  "description": "Publish to Azure Pipelines",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "sonarQubeGradlePluginVersion": {
                  "aliases": [
                    "sqGradlePluginVersion"
                  ],
                  "description": "SonarQube scanner for Gradle plugin version",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sonarQubeRunAnalysis": {
                  "aliases": [
                    "sqAnalysisEnabled"
                  ],
                  "description": "Run SonarQube or SonarCloud Analysis",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "spotBugsAnalysis": {
                  "aliases": [
                    "spotBugsAnalysisEnabled"
                  ],
                  "description": "Run SpotBugs",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "spotBugsGradlePluginVersionChoice": {
                  "description": "Spotbugs plugin version",
                  "enum": [
                    "specify",
                    "build"
                  ],
                  "ignoreCase": "all"
                },
                "spotbugsGradlePluginVersion": {
                  "aliases": [
                    "spotbugsGradlePluginVersion"
                  ],
                  "description": "Version number",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sqGradlePluginVersionChoice": {
                  "description": "SonarQube scanner for Gradle version",
                  "enum": [
                    "specify",
                    "build"
                  ],
                  "ignoreCase": "all"
                },
                "tasks": {
                  "description": "Tasks",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testResultsFiles": {
                  "description": "Test results files",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testRunTitle": {
                  "description": "Test run title",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "workingDirectory": {
                  "aliases": [
                    "cwd"
                  ],
                  "description": "Working directory",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Gradle\n\nBuild using a Gradle wrapper script",
              "ignoreCase": "value",
              "pattern": "^Gradle@3$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Gradle inputs",
              "properties": {
                "checkStyleRunAnalysis": {
                  "aliases": [
                    "checkstyleAnalysisEnabled"
                  ],
                  "description": "Run Checkstyle",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "codeCoverageClassFilesDirectories": {
                  "aliases": [
                    "classFilesDirectories"
                  ],
                  "description": "Class Files Directories",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "codeCoverageClassFilter": {
                  "aliases": [
                    "classFilter"
                  ],
                  "description": "Class Inclusion/Exclusion Filters",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "codeCoverageFailIfEmpty": {
                  "aliases": [
                    "failIfCoverageEmpty"
                  ],
                  "description": "Fail When Code Coverage Results Are Missing",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "codeCoverageToolOption": {
                  "aliases": [
                    "codeCoverageTool"
                  ],
                  "description": "Code Coverage Tool",
                  "enum": [
                    "None",
                    "Cobertura",
                    "JaCoCo"
                  ],
                  "ignoreCase": "all"
                },
                "findBugsRunAnalysis": {
                  "aliases": [
                    "findbugsAnalysisEnabled"
                  ],
                  "description": "Run FindBugs",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "gradleOptions": {
                  "aliases": [
                    "gradleOpts"
                  ],
                  "description": "Set GRADLE_OPTS",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "gradleWrapperFile": {
                  "aliases": [
                    "wrapperScript"
                  ],
                  "description": "Gradle Wrapper",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "javaHomeOption": {
                  "aliases": [
                    "javaHomeSelection"
                  ],
                  "description": "Set JAVA_HOME by",
                  "enum": [
                    "JDKVersion",
                    "Path"
                  ],
                  "ignoreCase": "all"
                },
                "jdkArchitectureOption": {
                  "aliases": [
                    "jdkArchitecture"
                  ],
                  "description": "JDK Architecture",
                  "enum": [
                    "x86",
                    "x64"
                  ],
                  "ignoreCase": "all"
                },
                "jdkDirectory": {
                  "aliases": [
                    "jdkUserInputPath"
                  ],
                  "description": "JDK Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "jdkVersionOption": {
                  "aliases": [
                    "jdkVersion"
                  ],
                  "description": "JDK Version",
                  "enum": [
                    "default",
                    "1.9",
                    "1.8",
                    "1.7",
                    "1.6"
                  ],
                  "ignoreCase": "all"
                },
                "options": {
                  "description": "Options",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "pmdRunAnalysis": {
                  "aliases": [
                    "pmdAnalysisEnabled"
                  ],
                  "description": "Run PMD",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "publishJUnitResults": {
                  "description": "Publish to TFS/Team Services",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "sonarQubeDBPassword": {
                  "aliases": [
                    "sqDbPassword"
                  ],
                  "description": "Db User Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sonarQubeDBUrl": {
                  "aliases": [
                    "sqDbUrl"
                  ],
                  "description": "Db Connection String",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sonarQubeDBUsername": {
                  "aliases": [
                    "sqDbUsername"
                  ],
                  "description": "Db Username",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sonarQubeFailWhenQualityGateFails": {
                  "aliases": [
                    "sqAnalysisBreakBuildIfQualityGateFailed"
                  ],
                  "description": "Fail the build on quality gate failure (SQ 5.3+)",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "sonarQubeGradlePluginVersion": {
                  "aliases": [
                    "sqGradlePluginVersion"
                  ],
                  "description": "SonarQube Gradle Plugin Version",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sonarQubeIncludeFullReport": {
                  "aliases": [
                    "sqAnalysisIncludeFullReport"
                  ],
                  "description": "Include full analysis report in the build summary (SQ 5.3+)",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "sonarQubeProjectKey": {
                  "aliases": [
                    "sqProjectKey"
                  ],
                  "description": "SonarQube Project Key",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sonarQubeProjectName": {
                  "aliases": [
                    "sqProjectName"
                  ],
                  "description": "SonarQube Project Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sonarQubeProjectVersion": {
                  "aliases": [
                    "sqProjectVersion"
                  ],
                  "description": "SonarQube Project Version",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sonarQubeRunAnalysis": {
                  "aliases": [
                    "sqAnalysisEnabled"
                  ],
                  "description": "Run SonarQube Analysis",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "sonarQubeServiceEndpoint": {
                  "aliases": [
                    "sqConnectedServiceName"
                  ],
                  "description": "SonarQube Endpoint",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sonarQubeSpecifyDB": {
                  "aliases": [
                    "sqDbDetailsRequired"
                  ],
                  "description": "The SonarQube server version is lower than 5.2",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "tasks": {
                  "description": "Tasks",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testResultsFiles": {
                  "description": "Test Results Files",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testRunTitle": {
                  "description": "Test Run Title",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "workingDirectory": {
                  "aliases": [
                    "cwd"
                  ],
                  "description": "Working Directory",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Gradle\n\nBuild using a Gradle wrapper script",
              "ignoreCase": "value",
              "pattern": "^Gradle@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Gradle inputs",
              "properties": {
                "checkStyleRunAnalysis": {
                  "aliases": [
                    "checkstyleAnalysisEnabled"
                  ],
                  "description": "Run Checkstyle",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "codeCoverageClassFilesDirectories": {
                  "aliases": [
                    "classFilesDirectories"
                  ],
                  "description": "Class files directories",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "codeCoverageClassFilter": {
                  "aliases": [
                    "classFilter"
                  ],
                  "description": "Class inclusion/exclusion filters",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "codeCoverageFailIfEmpty": {
                  "aliases": [
                    "failIfCoverageEmpty"
                  ],
                  "description": "Fail when code coverage results are missing",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "codeCoverageGradle5xOrHigher": {
                  "aliases": [
                    "gradle5xOrHigher"
                  ],
                  "description": "Gradle version >= 5.x",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "codeCoverageToolOption": {
                  "aliases": [
                    "codeCoverageTool"
                  ],
                  "description": "Code coverage tool",
                  "enum": [
                    "None",
                    "Cobertura",
                    "JaCoCo"
                  ],
                  "ignoreCase": "all"
                },
                "findBugsRunAnalysis": {
                  "aliases": [
                    "findbugsAnalysisEnabled"
                  ],
                  "description": "Run FindBugs",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "gradleOptions": {
                  "aliases": [
                    "gradleOpts"
                  ],
                  "description": "Set GRADLE_OPTS",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "gradleWrapperFile": {
                  "aliases": [
                    "wrapperScript"
                  ],
                  "description": "Gradle wrapper",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "javaHomeOption": {
                  "aliases": [
                    "javaHomeSelection"
                  ],
                  "description": "Set JAVA_HOME by",
                  "enum": [
                    "JDKVersion",
                    "Path"
                  ],
                  "ignoreCase": "all"
                },
                "jdkArchitectureOption": {
                  "aliases": [
                    "jdkArchitecture"
                  ],
                  "description": "JDK architecture",
                  "enum": [
                    "x86",
                    "x64"
                  ],
                  "ignoreCase": "all"
                },
                "jdkDirectory": {
                  "aliases": [
                    "jdkUserInputPath"
                  ],
                  "description": "JDK path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "jdkVersionOption": {
                  "aliases": [
                    "jdkVersion"
                  ],
                  "description": "JDK version",
                  "enum": [
                    "default",
                    "1.11",
                    "1.10",
                    "1.9",
                    "1.8",
                    "1.7",
                    "1.6"
                  ],
                  "ignoreCase": "all"
                },
                "options": {
                  "description": "Options",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "pmdRunAnalysis": {
                  "aliases": [
                    "pmdAnalysisEnabled"
                  ],
                  "description": "Run PMD",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "publishJUnitResults": {
                  "description": "Publish to Azure Pipelines",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "sonarQubeGradlePluginVersion": {
                  "aliases": [
                    "sqGradlePluginVersion"
                  ],
                  "description": "SonarQube scanner for Gradle plugin version",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sonarQubeRunAnalysis": {
                  "aliases": [
                    "sqAnalysisEnabled"
                  ],
                  "description": "Run SonarQube or SonarCloud Analysis",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "spotBugsAnalysis": {
                  "aliases": [
                    "spotBugsAnalysisEnabled"
                  ],
                  "description": "Run SpotBugs",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "spotBugsGradlePluginVersionChoice": {
                  "description": "Spotbugs plugin version",
                  "enum": [
                    "specify",
                    "build"
                  ],
                  "ignoreCase": "all"
                },
                "spotbugsGradlePluginVersion": {
                  "aliases": [
                    "spotbugsGradlePluginVersion"
                  ],
                  "description": "Version number",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sqGradlePluginVersionChoice": {
                  "description": "SonarQube scanner for Gradle version",
                  "enum": [
                    "specify",
                    "build"
                  ],
                  "ignoreCase": "all"
                },
                "tasks": {
                  "description": "Tasks",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testResultsFiles": {
                  "description": "Test results files",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testRunTitle": {
                  "description": "Test run title",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "workingDirectory": {
                  "aliases": [
                    "cwd"
                  ],
                  "description": "Working directory",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Gradle\n\nBuild using a Gradle wrapper script",
              "ignoreCase": "value",
              "pattern": "^Gradle@2$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Microsoft Security DevOps inputs",
              "properties": {
                "artifactName": {
                  "description": "Artifact Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "break": {
                  "description": "Break",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "categories": {
                  "description": "Categories",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "config": {
                  "description": "Config",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "languages": {
                  "description": "Languages",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "policy": {
                  "description": "Policy",
                  "enum": [
                    "microsoft",
                    "none"
                  ],
                  "ignoreCase": "all"
                },
                "publish": {
                  "description": "Publish",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "tools": {
                  "description": "Tools",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Microsoft Security DevOps\n\nRun the Microsoft Security DevOps CLI for static analysis.",
              "ignoreCase": "value",
              "pattern": "^MicrosoftSecurityDevOps@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "deprecationMessage": "AppCenterDistribute is deprecated - Distribute app builds to testers and users via Visual Studio App Center",
          "doNotSuggest": true,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "App Center distribute inputs",
              "properties": {
                "appFile": {
                  "aliases": [
                    "app"
                  ],
                  "description": "Binary file path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "appSlug": {
                  "description": "App slug",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "distributionGroupId": {
                  "aliases": [
                    "destinationIds",
                    "destinationId"
                  ],
                  "description": "Destination IDs",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "isMandatory": {
                  "description": "Require users to update to this release",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "releaseNotesFile": {
                  "description": "Release notes file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "releaseNotesInput": {
                  "description": "Release notes",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "releaseNotesOption": {
                  "aliases": [
                    "releaseNotesSelection"
                  ],
                  "description": "Create release notes",
                  "enum": [
                    "input",
                    "file"
                  ],
                  "ignoreCase": "all"
                },
                "serverEndpoint": {
                  "description": "App Center service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "symbolsDsymFiles": {
                  "aliases": [
                    "dsymPath"
                  ],
                  "description": "dSYM path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "symbolsIncludeParentDirectory": {
                  "aliases": [
                    "packParentFolder"
                  ],
                  "description": "Include all items in parent folder",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "symbolsMappingTxtFile": {
                  "aliases": [
                    "mappingTxtPath"
                  ],
                  "description": "Mapping file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "symbolsOption": {
                  "aliases": [
                    "symbolsType"
                  ],
                  "description": "Symbols type",
                  "enum": [
                    "Apple"
                  ],
                  "ignoreCase": "all"
                },
                "symbolsPath": {
                  "description": "Symbols path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "symbolsPdbFiles": {
                  "aliases": [
                    "pdbPath"
                  ],
                  "description": "Symbols path (*.pdb)",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "serverEndpoint",
                "appSlug",
                "appFile"
              ]
            },
            "task": {
              "description": "App Center distribute\n\nDistribute app builds to testers and users via Visual Studio App Center",
              "ignoreCase": "value",
              "pattern": "^AppCenterDistribute@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "deprecationMessage": "AppCenterDistribute is deprecated - Distribute app builds to testers and users via Visual Studio App Center",
          "doNotSuggest": true,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "App Center distribute inputs",
              "properties": {
                "appFile": {
                  "aliases": [
                    "app"
                  ],
                  "description": "Binary file path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "appSlug": {
                  "description": "App slug",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "distributionGroupId": {
                  "aliases": [
                    "destinationId"
                  ],
                  "description": "Destination ID",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "isMandatory": {
                  "description": "Require users to update to this release",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "releaseNotesFile": {
                  "description": "Release notes file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "releaseNotesInput": {
                  "description": "Release notes",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "releaseNotesOption": {
                  "aliases": [
                    "releaseNotesSelection"
                  ],
                  "description": "Create release notes",
                  "enum": [
                    "input",
                    "file"
                  ],
                  "ignoreCase": "all"
                },
                "serverEndpoint": {
                  "description": "App Center service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "symbolsDsymFiles": {
                  "aliases": [
                    "dsymPath"
                  ],
                  "description": "dSYM path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "symbolsIncludeParentDirectory": {
                  "aliases": [
                    "packParentFolder"
                  ],
                  "description": "Include all items in parent folder",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "symbolsMappingTxtFile": {
                  "aliases": [
                    "mappingTxtPath"
                  ],
                  "description": "Mapping file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "symbolsOption": {
                  "aliases": [
                    "symbolsType"
                  ],
                  "description": "Symbols type",
                  "enum": [
                    "Apple"
                  ],
                  "ignoreCase": "all"
                },
                "symbolsPath": {
                  "description": "Symbols path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "symbolsPdbFiles": {
                  "aliases": [
                    "pdbPath"
                  ],
                  "description": "Symbols path (*.pdb)",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "serverEndpoint",
                "appSlug",
                "appFile"
              ]
            },
            "task": {
              "description": "App Center distribute\n\nDistribute app builds to testers and users via Visual Studio App Center",
              "ignoreCase": "value",
              "pattern": "^AppCenterDistribute@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "App Center distribute inputs",
              "properties": {
                "appFile": {
                  "aliases": [
                    "app"
                  ],
                  "description": "Binary file path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "appSlug": {
                  "description": "App slug",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "appxsymPath": {
                  "description": "Symbols path (*.appxsym)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "buildVersion": {
                  "description": "Build version",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "destinationStoreId": {
                  "description": "Destination ID",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "destinationType": {
                  "description": "Release destination",
                  "enum": [
                    "groups",
                    "store"
                  ],
                  "ignoreCase": "all"
                },
                "distributionGroupId": {
                  "aliases": [
                    "destinationGroupIds"
                  ],
                  "description": "Destination IDs",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "isMandatory": {
                  "description": "Require users to update to this release",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "isSilent": {
                  "description": "Do not notify testers. Release will still be available to install.",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "nativeLibrariesPath": {
                  "description": "Native Library File Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "releaseNotesFile": {
                  "description": "Release notes file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "releaseNotesInput": {
                  "description": "Release notes",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "releaseNotesOption": {
                  "aliases": [
                    "releaseNotesSelection"
                  ],
                  "description": "Create release notes",
                  "enum": [
                    "input",
                    "file"
                  ],
                  "ignoreCase": "all"
                },
                "serverEndpoint": {
                  "description": "App Center service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "symbolsDsymFiles": {
                  "aliases": [
                    "dsymPath"
                  ],
                  "description": "dSYM path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "symbolsIncludeParentDirectory": {
                  "aliases": [
                    "packParentFolder"
                  ],
                  "description": "Include all items in parent folder",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "symbolsMappingTxtFile": {
                  "aliases": [
                    "mappingTxtPath"
                  ],
                  "description": "Mapping file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "symbolsOption": {
                  "aliases": [
                    "symbolsType"
                  ],
                  "description": "Symbols type",
                  "enum": [
                    "Apple",
                    "Android",
                    "UWP"
                  ],
                  "ignoreCase": "all"
                },
                "symbolsPath": {
                  "description": "Symbols path",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "serverEndpoint",
                "appSlug",
                "appFile"
              ]
            },
            "task": {
              "description": "App Center distribute\n\nDistribute app builds to testers and users via Visual Studio App Center",
              "ignoreCase": "value",
              "pattern": "^AppCenterDistribute@3$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "App Center Distribute inputs",
              "properties": {
                "appFile": {
                  "aliases": [
                    "app"
                  ],
                  "description": "Binary file path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "appSlug": {
                  "description": "App slug",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "distributionGroupId": {
                  "description": "Distribution group ID",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "releaseNotesFile": {
                  "description": "Release notes file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "releaseNotesInput": {
                  "description": "Release notes",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "releaseNotesOption": {
                  "aliases": [
                    "releaseNotesSelection"
                  ],
                  "description": "Create release notes",
                  "enum": [
                    "input",
                    "file"
                  ],
                  "ignoreCase": "all"
                },
                "serverEndpoint": {
                  "description": "App Center connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "symbolsDsymFiles": {
                  "aliases": [
                    "dsymPath"
                  ],
                  "description": "dSYM path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "symbolsIncludeParentDirectory": {
                  "aliases": [
                    "packParentFolder"
                  ],
                  "description": "Include all items in parent folder",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "symbolsMappingTxtFile": {
                  "aliases": [
                    "mappingTxtPath"
                  ],
                  "description": "Mapping file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "symbolsOption": {
                  "aliases": [
                    "symbolsType"
                  ],
                  "description": "Symbols type",
                  "enum": [
                    "Apple"
                  ],
                  "ignoreCase": "all"
                },
                "symbolsPath": {
                  "description": "Symbols path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "symbolsPdbFiles": {
                  "aliases": [
                    "pdbPath"
                  ],
                  "description": "Symbols path (*.pdb)",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "serverEndpoint",
                "appSlug",
                "appFile"
              ]
            },
            "task": {
              "description": "App Center Distribute\n\nDistribute app builds to testers and users via App Center",
              "ignoreCase": "value",
              "pattern": "^AppCenterDistribute@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Power Platform Delete Environment inputs",
              "properties": {
                "Environment": {
                  "description": "Environment Url",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerPlatformEnvironment": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerPlatformSPN": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "authenticationType": {
                  "description": "Authentication type",
                  "enum": [
                    "PowerPlatformEnvironment",
                    "PowerPlatformSPN"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": []
            },
            "task": {
              "description": "Power Platform Delete Environment\n\nPower Platform Delete Environment",
              "ignoreCase": "value",
              "pattern": "^PowerPlatformDeleteEnvironment@2$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "NuGet tool installer inputs",
              "properties": {
                "checkLatest": {
                  "description": "Always download the latest matching version",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "versionSpec": {
                  "description": "Version of NuGet.exe to install",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "NuGet tool installer\n\nAcquires a specific version of NuGet from the internet or the tools cache and adds it to the PATH. Use this task to change the version of NuGet used in the NuGet tasks.",
              "ignoreCase": "value",
              "pattern": "^NuGetToolInstaller@0$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "NuGet tool installer inputs",
              "properties": {
                "checkLatest": {
                  "description": "Always check for new versions",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "versionSpec": {
                  "description": "Version of NuGet.exe to install",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "NuGet tool installer\n\nAcquires a specific version of NuGet from the internet or the tools cache and adds it to the PATH. Use this task to change the version of NuGet used in the NuGet tasks.",
              "ignoreCase": "value",
              "pattern": "^NuGetToolInstaller@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Jenkins download artifacts inputs",
              "properties": {
                "ConnectedServiceNameARM": {
                  "description": "Azure Subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "artifactDetailsFileNameSuffix": {
                  "description": "Commit and WorkItem FileName",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "artifactProvider": {
                  "description": "Artifact Provider",
                  "enum": [
                    "azureStorage"
                  ],
                  "ignoreCase": "all"
                },
                "commonVirtualPath": {
                  "description": "Common Virtual Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "containerName": {
                  "description": "Container Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "downloadCommitsAndWorkItems": {
                  "description": "Download Commits and WorkItems",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "itemPattern": {
                  "description": "Item Pattern",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "jenkinsBuild": {
                  "description": "Download artifacts produced by",
                  "enum": [
                    "LastSuccessfulBuild",
                    "BuildNumber"
                  ],
                  "ignoreCase": "all"
                },
                "jenkinsBuildNumber": {
                  "description": "Jenkins build number",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "jenkinsJobType": {
                  "description": "Jenkins job type",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "jenkinsServerConnection": {
                  "aliases": [
                    "serverEndpoint"
                  ],
                  "description": "Jenkins service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "jobName": {
                  "description": "Job name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "propagatedArtifacts": {
                  "description": "Artifacts are propagated to Azure",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "saveTo": {
                  "description": "Save to",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "startJenkinsBuildNumber": {
                  "description": "Download commits and work items from",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "storageAccountName": {
                  "description": "Storage Account Name",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "jenkinsServerConnection",
                "jobName"
              ]
            },
            "task": {
              "description": "Jenkins download artifacts\n\nDownload artifacts produced by a Jenkins job",
              "ignoreCase": "value",
              "pattern": "^JenkinsDownloadArtifacts@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Azure Functions for container inputs",
              "properties": {
                "appName": {
                  "description": "App name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "appSettings": {
                  "description": "App settings",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureSubscription": {
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "configurationStrings": {
                  "description": "Configuration settings",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "containerCommand": {
                  "description": "Startup command ",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "deployToSlotOrASE": {
                  "description": "Deploy to Slot or App Service Environment",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "imageName": {
                  "description": "Image name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "resourceGroupName": {
                  "description": "Resource group",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "slotName": {
                  "description": "Slot",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "azureSubscription",
                "appName",
                "imageName"
              ]
            },
            "task": {
              "description": "Azure Functions for container\n\nUpdate a function app with a Docker container",
              "ignoreCase": "value",
              "pattern": "^AzureFunctionAppContainer@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Decrypt file (OpenSSL) inputs",
              "properties": {
                "cipher": {
                  "description": "Cypher",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "inFile": {
                  "description": "Encrypted file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "outFile": {
                  "description": "Decrypted file path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "passphrase": {
                  "description": "Passphrase",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "workingDirectory": {
                  "aliases": [
                    "cwd"
                  ],
                  "description": "Working directory",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "inFile",
                "passphrase"
              ]
            },
            "task": {
              "description": "Decrypt file (OpenSSL)\n\nDecrypt a file using OpenSSL",
              "ignoreCase": "value",
              "pattern": "^DecryptFile@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Package and deploy Helm charts inputs",
              "properties": {
                "arguments": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureContainerRegistry": {
                  "description": "Azure Container Registry",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureResourceGroup": {
                  "description": "Resource group",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureResourceGroupForACR": {
                  "description": "Resource group",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureSubscription": {
                  "aliases": [
                    "azureSubscriptionEndpoint"
                  ],
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureSubscriptionForACR": {
                  "aliases": [
                    "azureSubscriptionEndpointForACR"
                  ],
                  "description": "Azure subscription for Container Registry",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "caCert": {
                  "description": "CA certificate",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "canaryImage": {
                  "aliases": [
                    "canaryimage"
                  ],
                  "description": "Use canary image version.",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "certificate": {
                  "description": "Certificate",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "chartName": {
                  "description": "Chart Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "chartNameForACR": {
                  "description": "Chart Name For Azure Container Registry",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "chartPath": {
                  "description": "Chart Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "chartPathForACR": {
                  "description": "Chart Path for Azure Container Registry",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "chartType": {
                  "description": "Chart Type",
                  "enum": [
                    "Name",
                    "FilePath"
                  ],
                  "ignoreCase": "all"
                },
                "chartVersion": {
                  "aliases": [
                    "version"
                  ],
                  "description": "Version",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "command": {
                  "description": "Command",
                  "enum": [
                    "create",
                    "delete",
                    "expose",
                    "get",
                    "init",
                    "install",
                    "login",
                    "logout",
                    "ls",
                    "package",
                    "rollback",
                    "save",
                    "upgrade",
                    "uninstall"
                  ],
                  "ignoreCase": "all"
                },
                "connectionType": {
                  "description": "Connection Type",
                  "enum": [
                    "Azure Resource Manager",
                    "Kubernetes Service Connection",
                    "None"
                  ],
                  "ignoreCase": "all"
                },
                "destination": {
                  "description": "Destination",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "enableTls": {
                  "description": "Enable TLS",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "failOnStderr": {
                  "description": "Fail on Standard Error",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "force": {
                  "description": "Force",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "install": {
                  "description": "Install if release not present.",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "kubernetesCluster": {
                  "description": "Kubernetes cluster",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "kubernetesServiceConnection": {
                  "aliases": [
                    "kubernetesServiceEndpoint"
                  ],
                  "description": "Kubernetes Service Connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "overrideValues": {
                  "description": "Set Values",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "privatekey": {
                  "description": "Key",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "publishPipelineMetadata": {
                  "description": "Publish pipeline metadata",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "recreate": {
                  "description": "Recreate Pods.",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "releaseName": {
                  "description": "Release Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "resetValues": {
                  "description": "Reset Values.",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "save": {
                  "description": "Save",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "tillerNamespace": {
                  "aliases": [
                    "tillernamespace"
                  ],
                  "description": "Tiller namespace",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "updateDependency": {
                  "aliases": [
                    "updatedependency"
                  ],
                  "description": "Update Dependency",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "upgradeTiller": {
                  "aliases": [
                    "upgradetiller"
                  ],
                  "description": "Upgrade Tiller",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "useClusterAdmin": {
                  "description": "Use cluster admin credentials",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "valueFile": {
                  "description": "Value File",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "waitForExecution": {
                  "description": "Wait",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": [
                "azureSubscriptionForACR",
                "azureResourceGroupForACR",
                "azureContainerRegistry"
              ]
            },
            "task": {
              "description": "Package and deploy Helm charts\n\nDeploy, configure, update a Kubernetes cluster in Azure Container Service by running helm commands",
              "ignoreCase": "value",
              "pattern": "^HelmDeploy@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Install Apple certificate inputs",
              "properties": {
                "certPwd": {
                  "description": "Certificate (P12) password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "certSecureFile": {
                  "description": "Certificate (P12)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "customKeychainPath": {
                  "description": "Custom keychain path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "deleteCert": {
                  "description": "Delete certificate from keychain",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "deleteCustomKeychain": {
                  "description": "Delete custom keychain",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "keychain": {
                  "description": "Keychain",
                  "enum": [
                    "default",
                    "temp",
                    "custom"
                  ],
                  "ignoreCase": "all"
                },
                "keychainPassword": {
                  "description": "Keychain password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "setUpPartitionIdACLForPrivateKey": {
                  "description": "Set up partition_id ACL for the imported private key",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "signingIdentity": {
                  "description": "Certificate signing identity",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "certSecureFile"
              ]
            },
            "task": {
              "description": "Install Apple certificate\n\nInstall an Apple certificate required to build on a macOS agent machine",
              "ignoreCase": "value",
              "pattern": "^InstallAppleCertificate@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Install Apple Certificate inputs",
              "properties": {
                "certPwd": {
                  "description": "Certificate (P12) password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "certSecureFile": {
                  "description": "Certificate (P12)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "customKeychainPath": {
                  "description": "Custom keychain path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "deleteCert": {
                  "description": "Delete certificate from keychain",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "deleteCustomKeychain": {
                  "description": "Delete custom keychain",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "keychain": {
                  "description": "Keychain",
                  "enum": [
                    "default",
                    "temp",
                    "custom"
                  ],
                  "ignoreCase": "all"
                },
                "keychainPassword": {
                  "description": "Keychain password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "signingIdentity": {
                  "description": "Certificate signing identity",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "certSecureFile"
              ]
            },
            "task": {
              "description": "Install Apple Certificate\n\nInstall an Apple certificate required to build on a macOS agent",
              "ignoreCase": "value",
              "pattern": "^InstallAppleCertificate@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Install Apple Certificate inputs",
              "properties": {
                "certPwd": {
                  "description": "Certificate (P12) Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "certSecureFile": {
                  "description": "Certificate (P12)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "customKeychainPath": {
                  "description": "Custom Keychain Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "deleteCert": {
                  "description": "Delete Certificate from Keychain",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "deleteCustomKeychain": {
                  "description": "Delete Custom Keychain",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "keychain": {
                  "description": "Keychain",
                  "enum": [
                    "default",
                    "temp",
                    "custom"
                  ],
                  "ignoreCase": "all"
                },
                "keychainPassword": {
                  "description": "Keychain Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "signingIdentity": {
                  "description": "Certificate Signing Identity",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "certSecureFile"
              ]
            },
            "task": {
              "description": "Install Apple Certificate\n\nInstall an Apple certificate required to build on a macOS agent",
              "ignoreCase": "value",
              "pattern": "^InstallAppleCertificate@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "BTDF - Undeploy inputs",
              "properties": {
                "BTDeployMgmtDB": {
                  "description": "Deploy Mgmt DB",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "Name": {
                  "description": "Name",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "Name"
              ]
            },
            "task": {
              "description": "BTDF - Undeploy\n\nDeployment Framework for BizTalk btdfproj project target: Undeploy",
              "ignoreCase": "value",
              "pattern": "^BTDFUndeploy@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "BTDF - Undeploy inputs",
              "properties": {
                "BTDeployMgmtDB": {
                  "description": "Deploy Mgmt DB",
                  "enum": [
                    "true",
                    "false"
                  ],
                  "ignoreCase": "all"
                },
                "Destination": {
                  "description": "Destination",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Name": {
                  "description": "Name",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "Name"
              ]
            },
            "task": {
              "description": "BTDF - Undeploy\n\nDeployment Framework for BizTalk btdfproj project target: Undeploy",
              "ignoreCase": "value",
              "pattern": "^BTDFUndeploy@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Invoke Azure Function inputs",
              "properties": {
                "body": {
                  "description": "Body",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "function": {
                  "description": "Azure function URL",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "headers": {
                  "description": "Headers",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "key": {
                  "description": "Function key",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "method": {
                  "description": "Method",
                  "enum": [
                    "OPTIONS",
                    "GET",
                    "HEAD",
                    "POST",
                    "PUT",
                    "DELETE",
                    "TRACE",
                    "PATCH"
                  ],
                  "ignoreCase": "all"
                },
                "queryParameters": {
                  "description": "Query parameters",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "successCriteria": {
                  "description": "Success criteria",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "waitForCompletion": {
                  "description": "Completion event",
                  "enum": [
                    "true",
                    "false"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": [
                "function",
                "key"
              ]
            },
            "task": {
              "description": "Invoke Azure Function\n\nInvoke an Azure Function",
              "ignoreCase": "value",
              "pattern": "^AzureFunction@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Invoke Azure Function inputs",
              "properties": {
                "body": {
                  "description": "Body",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "function": {
                  "description": "Azure function url",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "headers": {
                  "description": "Headers",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "key": {
                  "description": "Function key",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "method": {
                  "description": "Method",
                  "enum": [
                    "OPTIONS",
                    "GET",
                    "HEAD",
                    "POST",
                    "PUT",
                    "DELETE",
                    "TRACE",
                    "PATCH"
                  ],
                  "ignoreCase": "all"
                },
                "queryParameters": {
                  "description": "Query parameters",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "successCriteria": {
                  "description": "Success criteria",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "waitForCompletion": {
                  "description": "Complete based on",
                  "enum": [
                    "true",
                    "false"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": [
                "function",
                "key"
              ]
            },
            "task": {
              "description": "Invoke Azure Function\n\nInvoke Azure function as a part of your process.",
              "ignoreCase": "value",
              "pattern": "^AzureFunction@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Download GitHub Release inputs",
              "properties": {
                "connection": {
                  "description": "GitHub Connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "defaultVersionType": {
                  "description": "Default version",
                  "enum": [
                    "latest",
                    "specificVersion",
                    "specificTag"
                  ],
                  "ignoreCase": "all"
                },
                "downloadPath": {
                  "description": "Destination directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "itemPattern": {
                  "description": "Item Pattern",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "userRepository": {
                  "description": "Repository",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "version": {
                  "description": "Release",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "connection",
                "userRepository"
              ]
            },
            "task": {
              "description": "Download GitHub Release\n\nDownloads a GitHub Release from a repository",
              "ignoreCase": "value",
              "pattern": "^DownloadGitHubRelease@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "SSH inputs",
              "properties": {
                "args": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "commands": {
                  "description": "Commands",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "failOnStdErr": {
                  "description": "Fail on STDERR",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "inline": {
                  "description": "Inline Script",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "interactiveKeyboardAuthentication": {
                  "description": "Use interactive-keyboard authentication",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "interactiveSession": {
                  "description": "Enable interactive session",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "interpreterCommand": {
                  "description": "Interpreter command",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "readyTimeout": {
                  "description": "SSH handshake timeout",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "runOptions": {
                  "description": "Run",
                  "enum": [
                    "commands",
                    "script",
                    "inline"
                  ],
                  "ignoreCase": "all"
                },
                "scriptPath": {
                  "description": "Shell script path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sshEndpoint": {
                  "description": "SSH service connection",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "sshEndpoint"
              ]
            },
            "task": {
              "description": "SSH\n\nRun shell commands or a script on a remote machine using SSH",
              "ignoreCase": "value",
              "pattern": "^SSH@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "deprecationMessage": "PublishPipelineArtifact is deprecated - Publish a local directory or file as a named artifact for the current pipeline",
          "doNotSuggest": true,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Publish pipeline artifact inputs",
              "properties": {
                "artifactName": {
                  "description": "The name of this artifact",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "properties": {
                  "description": "Custom properties",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "targetPath": {
                  "description": "Path to publish",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "targetPath"
              ]
            },
            "task": {
              "description": "Publish pipeline artifact\n\nPublish a local directory or file as a named artifact for the current pipeline",
              "ignoreCase": "value",
              "pattern": "^PublishPipelineArtifact@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Publish Pipeline Artifacts inputs",
              "properties": {
                "artifact": {
                  "aliases": [
                    "artifactName"
                  ],
                  "description": "Artifact name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "fileSharePath": {
                  "description": "File share path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "parallel": {
                  "description": "Parallel copy",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "parallelCount": {
                  "description": "Parallel count",
                  "ignoreCase": "key",
                  "type": "integer"
                },
                "properties": {
                  "description": "Custom properties",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "publishLocation": {
                  "aliases": [
                    "artifactType"
                  ],
                  "description": "Artifact publish location",
                  "enum": [
                    "pipeline",
                    "filepath"
                  ],
                  "ignoreCase": "all"
                },
                "targetPath": {
                  "aliases": [
                    "path"
                  ],
                  "description": "File or directory path",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Publish Pipeline Artifacts\n\nPublish (upload) a file or directory as a named artifact for the current run",
              "ignoreCase": "value",
              "pattern": "^PublishPipelineArtifact@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "deprecationMessage": "SonarQubePreBuild is deprecated - [DEPRECATED] Fetch the Quality Profile from SonarQube to configure the analysis",
          "doNotSuggest": true,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "SonarQube for MSBuild - Begin Analysis inputs",
              "properties": {
                "breakBuild": {
                  "description": "Fail the build on quality gate failure (SQ 5.3+)",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "cmdLineArgs": {
                  "description": "Additional Settings",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "configFile": {
                  "description": "Settings File",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "connectedServiceName": {
                  "description": "SonarQube Endpoint",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "dbPassword": {
                  "description": "Db User Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "dbUrl": {
                  "description": "Db Connection String",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "dbUsername": {
                  "description": "Db UserName",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "includeFullReport": {
                  "description": "Include full analysis report in the build summary (SQ 5.3+)",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "projectKey": {
                  "description": "Project Key",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "projectName": {
                  "description": "Project Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "projectVersion": {
                  "description": "Project Version",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "projectKey",
                "projectName",
                "connectedServiceName"
              ]
            },
            "task": {
              "description": "SonarQube for MSBuild - Begin Analysis\n\n[DEPRECATED] Fetch the Quality Profile from SonarQube to configure the analysis",
              "ignoreCase": "value",
              "pattern": "^SonarQubePreBuild@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Download artifacts from file share inputs",
              "properties": {
                "artifactName": {
                  "description": "Artifact name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "downloadPath": {
                  "description": "Download path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "filesharePath": {
                  "description": "File share path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "itemPattern": {
                  "description": "Matching pattern",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "parallelizationLimit": {
                  "description": "Parallelization limit",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "filesharePath",
                "artifactName"
              ]
            },
            "task": {
              "description": "Download artifacts from file share\n\nDownload artifacts from a file share, like \\\\share\\drop",
              "ignoreCase": "value",
              "pattern": "^DownloadFileshareArtifacts@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Kubectl inputs",
              "properties": {
                "arguments": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureContainerRegistry": {
                  "description": "Azure Container Registry",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureSubscription": {
                  "aliases": [
                    "azureSubscriptionEndpoint"
                  ],
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "checkLatest": {
                  "description": "Check for latest version",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "command": {
                  "description": "Command",
                  "enum": [
                    "apply",
                    "create",
                    "delete",
                    "exec",
                    "expose",
                    "get",
                    "logs",
                    "run",
                    "set",
                    "top"
                  ],
                  "ignoreCase": "all"
                },
                "configMapArguments": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "configMapFile": {
                  "description": "ConfigMap file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "configMapName": {
                  "description": "ConfigMap name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "configuration": {
                  "description": "Configuration file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "containerRegistryType": {
                  "description": "Container Registry type",
                  "enum": [
                    "Azure Container Registry",
                    "Container Registry"
                  ],
                  "ignoreCase": "all"
                },
                "dockerRegistryConnection": {
                  "aliases": [
                    "dockerRegistryEndpoint"
                  ],
                  "description": "Docker Registry service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "forceUpdate": {
                  "description": "Force update secret",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "forceUpdateConfigMap": {
                  "description": "Force update configmap",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "kubectlOutput": {
                  "description": "Output variable name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "kubernetesServiceConnection": {
                  "aliases": [
                    "kubernetesServiceEndpoint"
                  ],
                  "description": "Kubernetes service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "outputFormat": {
                  "description": "Output format",
                  "enum": [
                    "json",
                    "yaml"
                  ],
                  "ignoreCase": "all"
                },
                "secretArguments": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "secretName": {
                  "description": "Secret name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "secretType": {
                  "description": "Type of secret",
                  "enum": [
                    "dockerRegistry",
                    "generic"
                  ],
                  "ignoreCase": "all"
                },
                "specifyLocation": {
                  "description": "Path to Kubectl",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "useConfigMapFile": {
                  "description": "Use file",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "useConfigurationFile": {
                  "description": "Use Configuration files",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "versionOrLocation": {
                  "description": "Kubectl",
                  "enum": [
                    "version",
                    "location"
                  ],
                  "ignoreCase": "all"
                },
                "versionSpec": {
                  "description": "Version spec",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "workingDirectory": {
                  "aliases": [
                    "cwd"
                  ],
                  "description": "Working directory",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Kubectl\n\nDeploy, configure, update a Kubernetes cluster in Azure Container Service by running kubectl commands",
              "ignoreCase": "value",
              "pattern": "^Kubernetes@0$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Kubectl inputs",
              "properties": {
                "arguments": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureContainerRegistry": {
                  "description": "Azure container registry",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureResourceGroup": {
                  "description": "Resource group",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureSubscriptionEndpoint": {
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureSubscriptionEndpointForSecrets": {
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "checkLatest": {
                  "description": "Check for latest version",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "command": {
                  "description": "Command",
                  "enum": [
                    "apply",
                    "create",
                    "delete",
                    "exec",
                    "expose",
                    "get",
                    "login",
                    "logout",
                    "logs",
                    "run",
                    "set",
                    "top"
                  ],
                  "ignoreCase": "all"
                },
                "configMapArguments": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "configMapFile": {
                  "description": "ConfigMap file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "configMapName": {
                  "description": "ConfigMap name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "configuration": {
                  "description": "File path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "configurationType": {
                  "description": "Configuration type",
                  "enum": [
                    "configuration",
                    "inline"
                  ],
                  "ignoreCase": "all"
                },
                "connectionType": {
                  "description": "Service connection type",
                  "enum": [
                    "Azure Resource Manager",
                    "Kubernetes Service Connection",
                    "None"
                  ],
                  "ignoreCase": "all"
                },
                "containerRegistryType": {
                  "description": "Container registry type",
                  "enum": [
                    "Azure Container Registry",
                    "Container Registry"
                  ],
                  "ignoreCase": "all"
                },
                "dockerRegistryEndpoint": {
                  "description": "Docker registry service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "forceUpdate": {
                  "description": "Force update secret",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "forceUpdateConfigMap": {
                  "description": "Force update configmap",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "inline": {
                  "description": "Inline configuration",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "kubernetesCluster": {
                  "description": "Kubernetes cluster",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "kubernetesServiceEndpoint": {
                  "description": "Kubernetes service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "outputFormat": {
                  "description": "Output format",
                  "enum": [
                    "json",
                    "yaml",
                    "none"
                  ],
                  "ignoreCase": "all"
                },
                "secretArguments": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "secretName": {
                  "description": "Secret name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "secretType": {
                  "description": "Type of secret",
                  "enum": [
                    "dockerRegistry",
                    "generic"
                  ],
                  "ignoreCase": "all"
                },
                "specifyLocation": {
                  "description": "Path to kubectl",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "useClusterAdmin": {
                  "description": "Use cluster admin credentials",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "useConfigMapFile": {
                  "description": "Use file",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "useConfigurationFile": {
                  "description": "Use configuration",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "versionOrLocation": {
                  "description": "Kubectl",
                  "enum": [
                    "version",
                    "location"
                  ],
                  "ignoreCase": "all"
                },
                "versionSpec": {
                  "description": "Version spec",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "workingDirectory": {
                  "aliases": [
                    "cwd"
                  ],
                  "description": "Working directory",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Kubectl\n\nDeploy, configure, update a Kubernetes cluster in Azure Container Service by running kubectl commands",
              "ignoreCase": "value",
              "pattern": "^Kubernetes@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Azure IoT Edge inputs",
              "properties": {
                "action": {
                  "description": "Action",
                  "enum": [
                    "Build module images",
                    "Push module images",
                    "Generate deployment manifest",
                    "Deploy to IoT Edge devices"
                  ],
                  "ignoreCase": "all"
                },
                "azureContainerRegistry": {
                  "description": "Azure Container Registry",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureSubscription": {
                  "aliases": [
                    "connectedServiceNameARM"
                  ],
                  "description": "Azure subscription contains IoT Hub",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureSubscriptionEndpoint": {
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "bypassModules": {
                  "description": "Bypass module(s)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "containerregistrytype": {
                  "description": "Container registry type",
                  "enum": [
                    "Azure Container Registry",
                    "Generic Container Registry"
                  ],
                  "ignoreCase": "all"
                },
                "defaultPlatform": {
                  "description": "Default platform",
                  "enum": [
                    "amd64",
                    "windows-amd64",
                    "arm32v7",
                    "arm64v8"
                  ],
                  "ignoreCase": "all"
                },
                "deploymentFilePath": {
                  "description": "Deployment file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "deploymentManifestOutputPath": {
                  "description": "Output path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "deploymentid": {
                  "description": "IoT Edge deployment ID",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "deviceId": {
                  "description": "IoT Edge device ID",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "deviceOption": {
                  "description": "Choose single/multiple device",
                  "enum": [
                    "Single Device",
                    "Multiple Devices"
                  ],
                  "ignoreCase": "all"
                },
                "dockerRegistryConnection": {
                  "aliases": [
                    "dockerRegistryEndpoint"
                  ],
                  "description": "Docker Registry Connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "fillRegistryCredential": {
                  "description": "Add registry credential to deployment manifest",
                  "enum": [
                    "true",
                    "false"
                  ],
                  "ignoreCase": "all"
                },
                "iothubname": {
                  "description": "IoT Hub name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "priority": {
                  "description": "IoT Edge deployment priority",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "targetcondition": {
                  "description": "IoT Edge device target condition",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "templateFilePath": {
                  "description": ".template.json file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "validateGeneratedDeploymentManifest": {
                  "description": "Validate the schema of generated deployment manifest",
                  "enum": [
                    "true",
                    "false"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": []
            },
            "task": {
              "description": "Azure IoT Edge\n\nBuild and deploy an Azure IoT Edge image",
              "ignoreCase": "value",
              "pattern": "^AzureIoTEdge@2$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Service Fabric Compose deploy inputs",
              "properties": {
                "applicationName": {
                  "description": "Application Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureSubscription": {
                  "aliases": [
                    "azureSubscriptionEndpoint"
                  ],
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "clusterConnection": {
                  "aliases": [
                    "serviceConnectionName"
                  ],
                  "description": "Cluster Service Connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "composeFilePath": {
                  "description": "Compose File Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "deployTimeoutSec": {
                  "description": "Deploy Timeout (s)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "dockerRegistryConnection": {
                  "aliases": [
                    "dockerRegistryEndpointName"
                  ],
                  "description": "Docker Registry Service Connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "getStatusTimeoutSec": {
                  "description": "Get Status Timeout (s)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "passwordEncrypted": {
                  "description": "Password Encrypted",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "registryCredentials": {
                  "description": "Registry Credentials Source",
                  "enum": [
                    "AzureResourceManagerEndpoint",
                    "ContainerRegistryEndpoint",
                    "UsernamePassword",
                    "None"
                  ],
                  "ignoreCase": "all"
                },
                "registryPassword": {
                  "description": "Registry Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "registryUserName": {
                  "description": "Registry User Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "removeTimeoutSec": {
                  "description": "Remove Timeout (s)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "upgrade": {
                  "description": "Upgrade",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": [
                "clusterConnection"
              ]
            },
            "task": {
              "description": "Service Fabric Compose deploy\n\nDeploy a Docker Compose application to an Azure Service Fabric cluster",
              "ignoreCase": "value",
              "pattern": "^ServiceFabricComposeDeploy@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Android signing inputs",
              "properties": {
                "apkFiles": {
                  "aliases": [
                    "files"
                  ],
                  "description": "APK files",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "jarsign": {
                  "description": "Sign the APK",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "jarsignerArguments": {
                  "description": "Jarsigner arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "jarsignerKeyPassword": {
                  "aliases": [
                    "keyPass"
                  ],
                  "description": "Key password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "jarsignerKeystoreAlias": {
                  "aliases": [
                    "keystoreAlias"
                  ],
                  "description": "Alias",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "jarsignerKeystoreFile": {
                  "aliases": [
                    "keystoreFile"
                  ],
                  "description": "Keystore file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "jarsignerKeystorePassword": {
                  "aliases": [
                    "keystorePass"
                  ],
                  "description": "Keystore password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "zipalign": {
                  "description": "Zipalign",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "zipalignFile": {
                  "aliases": [
                    "zipalignLocation"
                  ],
                  "description": "Zipalign location",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Android signing\n\nSign and align Android APK files",
              "ignoreCase": "value",
              "pattern": "^AndroidSigning@2$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Android signing inputs",
              "properties": {
                "apkFiles": {
                  "aliases": [
                    "files"
                  ],
                  "description": "APK files",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "apksign": {
                  "description": "Sign the APK",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "apksignerArguments": {
                  "description": "apksigner arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "apksignerFile": {
                  "aliases": [
                    "apksignerLocation"
                  ],
                  "description": "apksigner location",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "apksignerKeyPassword": {
                  "aliases": [
                    "keyPass"
                  ],
                  "description": "Key password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "apksignerKeystoreAlias": {
                  "aliases": [
                    "keystoreAlias"
                  ],
                  "description": "Alias",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "apksignerKeystoreFile": {
                  "aliases": [
                    "keystoreFile"
                  ],
                  "description": "Keystore file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "apksignerKeystorePassword": {
                  "aliases": [
                    "keystorePass"
                  ],
                  "description": "Keystore password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "apksignerVersion": {
                  "description": "apksigner version",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "zipalign": {
                  "description": "Zipalign",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "zipalignFile": {
                  "aliases": [
                    "zipalignLocation"
                  ],
                  "description": "Zipalign location",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "zipalignVersion": {
                  "description": "Zipalign version",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Android signing\n\nSign and align Android APK files",
              "ignoreCase": "value",
              "pattern": "^AndroidSigning@3$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Android Signing inputs",
              "properties": {
                "files": {
                  "description": "APK Files",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "jarsign": {
                  "description": "Sign the APK",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "jarsignerArguments": {
                  "description": "Jarsigner Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "keyPass": {
                  "description": "Key Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "keystoreAlias": {
                  "description": "Alias",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "keystoreFile": {
                  "description": "Keystore File",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "keystorePass": {
                  "description": "Keystore Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "zipalign": {
                  "description": "Zipalign",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "zipalignLocation": {
                  "description": "Zipalign Location",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "files"
              ]
            },
            "task": {
              "description": "Android Signing\n\nSign and align Android APK files",
              "ignoreCase": "value",
              "pattern": "^AndroidSigning@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "deprecationMessage": "DownloadPipelineArtifact is deprecated - Download a named artifact from a pipeline to a local path",
          "doNotSuggest": true,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Download pipeline artifact inputs",
              "properties": {
                "artifactName": {
                  "description": "Artifact name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "branchName": {
                  "description": "Branch name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "buildType": {
                  "description": "Download artifacts produced by",
                  "enum": [
                    "current",
                    "specific"
                  ],
                  "ignoreCase": "all"
                },
                "buildVersionToDownload": {
                  "description": "Build version to download",
                  "enum": [
                    "latest",
                    "latestFromBranch",
                    "specific"
                  ],
                  "ignoreCase": "all"
                },
                "itemPattern": {
                  "description": "Matching pattern",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "pipeline": {
                  "aliases": [
                    "definition"
                  ],
                  "description": "Build pipeline",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "pipelineId": {
                  "aliases": [
                    "buildId"
                  ],
                  "description": "Build",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "project": {
                  "description": "Project",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "specificBuildWithTriggering": {
                  "description": "When appropriate, download artifacts from the triggering build.",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "tags": {
                  "description": "Build Tags",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "targetPath": {
                  "aliases": [
                    "downloadPath"
                  ],
                  "description": "Destination directory",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Download pipeline artifact\n\nDownload a named artifact from a pipeline to a local path",
              "ignoreCase": "value",
              "pattern": "^DownloadPipelineArtifact@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "deprecationMessage": "DownloadPipelineArtifact is deprecated - Downloads an artifact associated with a pipeline",
          "doNotSuggest": true,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Download pipeline artifact inputs",
              "properties": {
                "artifactName": {
                  "description": "The name of artifact to download.",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "pipelineId": {
                  "description": "The specific pipeline to download from",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "targetPath": {
                  "description": "Path to download to",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "targetPath"
              ]
            },
            "task": {
              "description": "Download pipeline artifact\n\nDownloads an artifact associated with a pipeline",
              "ignoreCase": "value",
              "pattern": "^DownloadPipelineArtifact@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Download Pipeline Artifacts inputs",
              "properties": {
                "allowFailedBuilds": {
                  "description": "Download artifacts from failed builds.",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "allowPartiallySucceededBuilds": {
                  "description": "Download artifacts from partially succeeded builds.",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "artifactName": {
                  "aliases": [
                    "artifact"
                  ],
                  "description": "Artifact name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "branchName": {
                  "aliases": [
                    "runBranch"
                  ],
                  "description": "Branch name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "buildType": {
                  "aliases": [
                    "source"
                  ],
                  "description": "Download artifacts produced by",
                  "enum": [
                    "current",
                    "specific"
                  ],
                  "ignoreCase": "all"
                },
                "buildVersionToDownload": {
                  "aliases": [
                    "runVersion"
                  ],
                  "description": "Build version to download",
                  "enum": [
                    "latest",
                    "latestFromBranch",
                    "specific"
                  ],
                  "ignoreCase": "all"
                },
                "definition": {
                  "aliases": [
                    "pipeline"
                  ],
                  "description": "Build pipeline",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "itemPattern": {
                  "aliases": [
                    "patterns"
                  ],
                  "description": "Matching patterns",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "pipelineId": {
                  "aliases": [
                    "runId",
                    "buildId"
                  ],
                  "description": "Build",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "project": {
                  "description": "Project",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "specificBuildWithTriggering": {
                  "aliases": [
                    "preferTriggeringPipeline"
                  ],
                  "description": "When appropriate, download artifacts from the triggering build.",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "tags": {
                  "description": "Build Tags",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "targetPath": {
                  "aliases": [
                    "path",
                    "downloadPath"
                  ],
                  "description": "Destination directory",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Download Pipeline Artifacts\n\nDownload build and pipeline artifacts",
              "ignoreCase": "value",
              "pattern": "^DownloadPipelineArtifact@2$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Power Platform Unpack Solution inputs",
              "properties": {
                "LocaleTemplate": {
                  "description": "Locale Template",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Localize": {
                  "description": "Localize",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "MapFile": {
                  "description": "Map File",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "OverwriteFiles": {
                  "description": "Allow overwrite of existing files",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "ProcessCanvasApps": {
                  "description": "Process CanvasApps",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "SingleComponent": {
                  "description": "Single Component",
                  "enum": [
                    "WebResource",
                    "Plugin",
                    "Workflow",
                    "None"
                  ],
                  "ignoreCase": "all"
                },
                "SolutionInputFile": {
                  "description": "Solution Input File",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SolutionTargetFolder": {
                  "description": "Target Folder to Unpack Solution",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SolutionType": {
                  "description": "Type of Solution",
                  "enum": [
                    "Both",
                    "Managed",
                    "Unmanaged"
                  ],
                  "ignoreCase": "all"
                },
                "UseLcid": {
                  "description": "Use LCID",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": [
                "SolutionInputFile",
                "SolutionTargetFolder"
              ]
            },
            "task": {
              "description": "Power Platform Unpack Solution\n\nPower Platform Unpack Solution",
              "ignoreCase": "value",
              "pattern": "^PowerPlatformUnpackSolution@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Use Python version inputs",
              "properties": {
                "addToPath": {
                  "description": "Add to PATH",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "allowUnstable": {
                  "description": "Allow downloading unstable releases",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "architecture": {
                  "description": "Architecture",
                  "enum": [
                    "x86",
                    "x64"
                  ],
                  "ignoreCase": "all"
                },
                "disableDownloadFromRegistry": {
                  "description": "Disable downloading releases from the GitHub registry",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "githubToken": {
                  "description": "GitHub token for GitHub Actions python registry",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "versionSpec": {
                  "description": "Version spec",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Use Python version\n\nUse the specified version of Python from the tool cache, optionally adding it to the PATH",
              "ignoreCase": "value",
              "pattern": "^UsePythonVersion@0$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Service Fabric PowerShell inputs",
              "properties": {
                "Inline": {
                  "description": "Inline Script",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ScriptArguments": {
                  "description": "Script Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ScriptPath": {
                  "description": "Script Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ScriptType": {
                  "description": "Script Type",
                  "enum": [
                    "FilePath",
                    "InlineScript"
                  ],
                  "ignoreCase": "all"
                },
                "clusterConnection": {
                  "aliases": [
                    "serviceConnectionName"
                  ],
                  "description": "Cluster Service Connection",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "clusterConnection"
              ]
            },
            "task": {
              "description": "Service Fabric PowerShell\n\nRun a PowerShell script in the context of an Azure Service Fabric cluster connection",
              "ignoreCase": "value",
              "pattern": "^ServiceFabricPowerShell@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Visual Studio Test inputs",
              "properties": {
                "codeCoverageEnabled": {
                  "description": "Code Coverage Enabled",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "configuration": {
                  "description": "Configuration",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "otherConsoleOptions": {
                  "description": "Other console options",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "overrideTestrunParameters": {
                  "description": "Override TestRun Parameters",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "pathtoCustomTestAdapters": {
                  "description": "Path to Custom Test Adapters",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "platform": {
                  "description": "Platform",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "publishRunAttachments": {
                  "description": "Upload Test Attachments",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "runInParallel": {
                  "description": "Run In Parallel",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "runSettingsFile": {
                  "description": "Run Settings File",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testAssembly": {
                  "description": "Test Assembly",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testFiltercriteria": {
                  "description": "Test Filter criteria",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testRunTitle": {
                  "description": "Test Run Title",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "vsTestVersion": {
                  "description": "VSTest version",
                  "enum": [
                    "latest",
                    "14.0",
                    "12.0"
                  ],
                  "ignoreCase": "all"
                },
                "vstestLocation": {
                  "description": "Path to vstest.console.exe",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "vstestLocationMethod": {
                  "description": "VSTest",
                  "enum": [
                    "version",
                    "location"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": []
            },
            "task": {
              "description": "Visual Studio Test\n\nRun tests with Visual Studio test runner",
              "ignoreCase": "value",
              "pattern": "^VSTest@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Visual Studio Test inputs",
              "properties": {
                "batchingBasedOnAgentsOption": {
                  "description": "Batch options",
                  "enum": [
                    "autoBatchSize",
                    "customBatchSize"
                  ],
                  "ignoreCase": "all"
                },
                "batchingBasedOnExecutionTimeOption": {
                  "description": "Batch options",
                  "enum": [
                    "autoBatchSize",
                    "customTimeBatchSize"
                  ],
                  "ignoreCase": "all"
                },
                "codeCoverageEnabled": {
                  "description": "Code coverage enabled",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "collectDumpOn": {
                  "description": "Collect process dump and attach to test run report",
                  "enum": [
                    "onAbortOnly",
                    "always",
                    "never"
                  ],
                  "ignoreCase": "all"
                },
                "configuration": {
                  "description": "Build configuration",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "customBatchSizeValue": {
                  "description": "Number of tests per batch",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "customRunTimePerBatchValue": {
                  "description": "Running time (sec) per batch",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "diagnosticsEnabled": {
                  "description": "Collect advanced diagnostics in case of catastrophic failures",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "distributionBatchType": {
                  "description": "Batch tests",
                  "enum": [
                    "basedOnTestCases",
                    "basedOnExecutionTime",
                    "basedOnAssembly"
                  ],
                  "ignoreCase": "all"
                },
                "dontDistribute": {
                  "description": "Replicate tests instead of distributing when multiple agents are used in the job",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "failOnMinTestsNotRun": {
                  "description": "Fail the task if a minimum number of tests are not run.",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "minimumExpectedTests": {
                  "description": "Minimum # of tests",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "otherConsoleOptions": {
                  "description": "Other console options",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "overrideTestrunParameters": {
                  "description": "Override test run parameters",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "pathtoCustomTestAdapters": {
                  "description": "Path to custom test adapters",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "platform": {
                  "description": "Build platform",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "publishRunAttachments": {
                  "description": "Upload test attachments",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "rerunFailedTestCasesMaxLimit": {
                  "description": "# of failed tests",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "rerunFailedTests": {
                  "description": "Rerun failed tests",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "rerunFailedThreshold": {
                  "description": "% failure",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "rerunMaxAttempts": {
                  "description": "Maximum # of attempts",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "rerunType": {
                  "description": "Do not rerun if test failures exceed specified threshold",
                  "enum": [
                    "basedOnTestFailurePercentage",
                    "basedOnTestFailureCount"
                  ],
                  "ignoreCase": "all"
                },
                "resultsFolder": {
                  "description": "Test results folder",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "runAllTestsAfterXBuilds": {
                  "description": "Number of builds after which all tests should be run",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "runInParallel": {
                  "description": "Run tests in parallel on multi-core machines",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "runOnlyImpactedTests": {
                  "description": "Run only impacted tests",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "runSettingsFile": {
                  "description": "Settings file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "runTestsInIsolation": {
                  "description": "Run tests in isolation",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "searchFolder": {
                  "description": "Search folder",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "tcmTestRun": {
                  "description": "Test Run",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testAssemblyVer2": {
                  "description": "Test files",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testConfiguration": {
                  "description": "Test configuration",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testFiltercriteria": {
                  "description": "Test filter criteria",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testPlan": {
                  "description": "Test plan",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testRunTitle": {
                  "description": "Test run title",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testSelector": {
                  "description": "Select tests using",
                  "enum": [
                    "testAssemblies",
                    "testPlan",
                    "testRun"
                  ],
                  "ignoreCase": "all"
                },
                "testSuite": {
                  "description": "Test suite",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "uiTests": {
                  "description": "Test mix contains UI tests",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "vsTestVersion": {
                  "description": "Test platform version",
                  "enum": [
                    "latest",
                    "16.0",
                    "15.0",
                    "14.0",
                    "toolsInstaller"
                  ],
                  "ignoreCase": "all"
                },
                "vstestLocation": {
                  "description": "Path to vstest.console.exe",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "vstestLocationMethod": {
                  "description": "Select test platform using",
                  "enum": [
                    "version",
                    "location"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": []
            },
            "task": {
              "description": "Visual Studio Test\n\nRun unit and functional tests (Selenium, Appium, Coded UI test, etc.) using the Visual Studio Test (VsTest) runner. Test frameworks that have a Visual Studio test adapter such as MsTest, xUnit, NUnit, Chutzpah (for JavaScript tests using QUnit, Mocha and Jasmine), etc. can be run. Tests can be distributed on multiple agents using this task (version 2).",
              "ignoreCase": "value",
              "pattern": "^VSTest@2$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Manual validation inputs",
              "properties": {
                "instructions": {
                  "description": "Instructions",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "notifyUsers": {
                  "description": "Notify users",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "onTimeout": {
                  "description": "On timeout",
                  "enum": [
                    "reject",
                    "resume"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": [
                "notifyUsers"
              ]
            },
            "task": {
              "description": "Manual validation\n\n[PREVIEW] Pause a pipeline run to wait for manual interaction. Works only with YAML pipelines.",
              "ignoreCase": "value",
              "pattern": "^ManualValidation@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Ant inputs",
              "properties": {
                "antHomeDirectory": {
                  "aliases": [
                    "antHomeUserInputPath"
                  ],
                  "description": "Set ANT_HOME path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "buildFile": {
                  "aliases": [
                    "antBuildFile"
                  ],
                  "description": "Ant build file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "codeCoverageClassFilesDirectories": {
                  "aliases": [
                    "classFilesDirectories"
                  ],
                  "description": "Class files directories",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "codeCoverageClassFilter": {
                  "aliases": [
                    "classFilter"
                  ],
                  "description": "Class inclusion/exclusion filters",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "codeCoverageFailIfEmpty": {
                  "aliases": [
                    "failIfCoverageEmpty"
                  ],
                  "description": "Fail when code coverage results are missing",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "codeCoverageSourceDirectories": {
                  "aliases": [
                    "srcDirectories"
                  ],
                  "description": "Source files directories",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "codeCoverageToolOptions": {
                  "aliases": [
                    "codeCoverageTool"
                  ],
                  "description": "Code coverage tool",
                  "enum": [
                    "None",
                    "Cobertura",
                    "JaCoCo"
                  ],
                  "ignoreCase": "all"
                },
                "javaHomeOption": {
                  "aliases": [
                    "javaHomeSelection"
                  ],
                  "description": "Set JAVA_HOME by",
                  "enum": [
                    "JDKVersion",
                    "Path"
                  ],
                  "ignoreCase": "all"
                },
                "jdkArchitectureOption": {
                  "aliases": [
                    "jdkArchitecture"
                  ],
                  "description": "JDK architecture",
                  "enum": [
                    "x86",
                    "x64"
                  ],
                  "ignoreCase": "all"
                },
                "jdkUserInputDirectory": {
                  "aliases": [
                    "jdkUserInputPath"
                  ],
                  "description": "JDK path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "jdkVersionOption": {
                  "aliases": [
                    "jdkVersion"
                  ],
                  "description": "JDK version",
                  "enum": [
                    "default",
                    "1.11",
                    "1.10",
                    "1.9",
                    "1.8",
                    "1.7",
                    "1.6"
                  ],
                  "ignoreCase": "all"
                },
                "options": {
                  "description": "Options",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "publishJUnitResults": {
                  "description": "Publish to Azure Pipelines",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "targets": {
                  "description": "Target(s)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testResultsFiles": {
                  "description": "Test results files",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testRunTitle": {
                  "description": "Test run title",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Ant\n\nBuild with Apache Ant",
              "ignoreCase": "value",
              "pattern": "^Ant@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "deprecationMessage": "DeployVisualStudioTestAgent is deprecated - Deprecated: Instead, use the 'Visual Studio Test' task to run unit and functional tests",
          "doNotSuggest": true,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Visual Studio test agent deployment inputs",
              "properties": {
                "adminPassword": {
                  "description": "Admin password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "adminUserName": {
                  "description": "Admin login",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "agentLocation": {
                  "description": "Test agent location",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "isDataCollectionOnly": {
                  "description": "Enable data collection only",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "machinePassword": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "machineUserName": {
                  "description": "Username",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "runAsProcess": {
                  "description": "Run UI tests",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "testCertificate": {
                  "description": "Test Certificate",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "testMachines": {
                  "description": "Machines",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testPlatform": {
                  "description": "Test agent version",
                  "enum": [
                    "15.0",
                    "14.0"
                  ],
                  "ignoreCase": "all"
                },
                "updateTestAgent": {
                  "description": "Update test agent",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "winRmProtocol": {
                  "description": "Protocol",
                  "enum": [
                    "Http",
                    "Https"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": [
                "testMachines",
                "adminUserName",
                "adminPassword",
                "machineUserName",
                "machinePassword"
              ]
            },
            "task": {
              "description": "Visual Studio test agent deployment\n\nDeprecated: Instead, use the 'Visual Studio Test' task to run unit and functional tests",
              "ignoreCase": "value",
              "pattern": "^DeployVisualStudioTestAgent@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Visual Studio Test Agent Deployment inputs",
              "properties": {
                "adminPassword": {
                  "description": "Admin Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "adminUserName": {
                  "description": "Admin Login",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "agentLocation": {
                  "description": "Test Agent Location",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "isDataCollectionOnly": {
                  "description": "Enable Data Collection Only",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "machinePassword": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "machineUserName": {
                  "description": "Username",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "resourceFilteringMethod": {
                  "description": "Select Machines By",
                  "enum": [
                    "machineNames",
                    "tags"
                  ],
                  "ignoreCase": "all"
                },
                "runAsProcess": {
                  "description": "Interactive Process",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "testCertificate": {
                  "description": "Test Certificate",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "testMachineGroup": {
                  "description": "Machines",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testMachines": {
                  "description": "Filter Criteria",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "updateTestAgent": {
                  "description": "Update Test Agent",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "winRmProtocol": {
                  "description": "Protocol",
                  "enum": [
                    "Http",
                    "Https"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": [
                "testMachineGroup",
                "machineUserName",
                "machinePassword"
              ]
            },
            "task": {
              "description": "Visual Studio Test Agent Deployment\n\nDeploy and configure Test Agent to run tests on a set of machines",
              "ignoreCase": "value",
              "pattern": "^DeployVisualStudioTestAgent@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Conda environment inputs",
              "properties": {
                "cleanEnvironment": {
                  "description": "Clean the environment",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "createOptions": {
                  "description": "Environment creation options",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "environmentName": {
                  "description": "Environment name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "packageSpecs": {
                  "description": "Package specs",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "updateConda": {
                  "description": "Update to the latest Conda",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": [
                "environmentName"
              ]
            },
            "task": {
              "description": "Conda environment\n\nCreate and activate a Conda environment",
              "ignoreCase": "value",
              "pattern": "^CondaEnvironment@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "deprecationMessage": "CondaEnvironment is deprecated - This task is deprecated. Use `conda` directly in script to work with Anaconda environments.",
          "doNotSuggest": true,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Conda environment inputs",
              "properties": {
                "cleanEnvironment": {
                  "description": "Clean the environment",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "createCustomEnvironment": {
                  "description": "Create a custom environment",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "createOptions": {
                  "description": "Other options for `conda create`",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "environmentName": {
                  "description": "Environment name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "installOptions": {
                  "description": "Other options for `conda install`",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "packageSpecs": {
                  "description": "Package specs",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "updateConda": {
                  "description": "Update to the latest Conda",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": []
            },
            "task": {
              "description": "Conda environment\n\nThis task is deprecated. Use `conda` directly in script to work with Anaconda environments.",
              "ignoreCase": "value",
              "pattern": "^CondaEnvironment@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Batch script inputs",
              "properties": {
                "arguments": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "failOnStandardError": {
                  "description": "Fail on Standard Error",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "filename": {
                  "description": "Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "modifyEnvironment": {
                  "description": "Modify Environment",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "workingFolder": {
                  "description": "Working folder",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "filename"
              ]
            },
            "task": {
              "description": "Batch script\n\nRun a Windows command or batch script and optionally allow it to change the environment",
              "ignoreCase": "value",
              "pattern": "^BatchScript@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Power Platform Pack Solution inputs",
              "properties": {
                "DisablePluginRemap": {
                  "description": "Disable Plugin Remap",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "LocaleTemplate": {
                  "description": "Locale Template",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Localize": {
                  "description": "Localize",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "MapFile": {
                  "description": "Map File",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ProcessCanvasApps": {
                  "description": "Process CanvasApps",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "SingleComponent": {
                  "description": "Single Component",
                  "enum": [
                    "WebResource",
                    "Plugin",
                    "Workflow",
                    "None"
                  ],
                  "ignoreCase": "all"
                },
                "SolutionOutputFile": {
                  "description": "Solution Output File",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SolutionSourceFolder": {
                  "description": "Source Folder of Solution to Pack",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SolutionType": {
                  "description": "Type of Solution",
                  "enum": [
                    "Both",
                    "Managed",
                    "Unmanaged"
                  ],
                  "ignoreCase": "all"
                },
                "UseLcid": {
                  "description": "Use LCID",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": [
                "SolutionSourceFolder",
                "SolutionOutputFile"
              ]
            },
            "task": {
              "description": "Power Platform Pack Solution\n\nPower Platform Pack Solution",
              "ignoreCase": "value",
              "pattern": "^PowerPlatformPackSolution@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Power Platform Add Solution Component inputs",
              "properties": {
                "AddRequiredComponents": {
                  "description": "Add Required Components",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "Component": {
                  "description": "Component",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ComponentType": {
                  "description": "Component Type",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Environment": {
                  "description": "Environment",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerPlatformEnvironment": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerPlatformSPN": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SolutionName": {
                  "description": "Solution Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "authenticationType": {
                  "description": "Authentication type",
                  "enum": [
                    "PowerPlatformEnvironment",
                    "PowerPlatformSPN"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": [
                "SolutionName",
                "Component",
                "ComponentType"
              ]
            },
            "task": {
              "description": "Power Platform Add Solution Component\n\nAdds a solution component to the target unmanaged solution in the connected Dataverse environment",
              "ignoreCase": "value",
              "pattern": "^PowerPlatformAddSolutionComponent@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Download Github Npm Package inputs",
              "properties": {
                "externalRegistryCredentials": {
                  "aliases": [
                    "externalEndpoints"
                  ],
                  "description": "Credentials for registry from GitHub",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "installDirectory": {
                  "aliases": [
                    "packagesDirectory"
                  ],
                  "description": "Destination directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "packageName": {
                  "description": "Package Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "version": {
                  "description": "Package Version",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "packageName",
                "version",
                "externalRegistryCredentials"
              ]
            },
            "task": {
              "description": "Download Github Npm Package\n\nInstall npm packages from GitHub.",
              "ignoreCase": "value",
              "pattern": "^DownloadGithubNpmPackage@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Power Platform Delete Solution inputs",
              "properties": {
                "Environment": {
                  "description": "Environment Url",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerPlatformEnvironment": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerPlatformSPN": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SolutionName": {
                  "description": "Solution Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "authenticationType": {
                  "description": "Authentication type",
                  "enum": [
                    "PowerPlatformEnvironment",
                    "PowerPlatformSPN"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": [
                "SolutionName"
              ]
            },
            "task": {
              "description": "Power Platform Delete Solution\n\nPower Platform Delete Solution",
              "ignoreCase": "value",
              "pattern": "^PowerPlatformDeleteSolution@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Power Platform Export Data inputs",
              "properties": {
                "DataFile": {
                  "description": "Data File",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Environment": {
                  "description": "Environment",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Overwrite": {
                  "description": "Overwrite",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "PowerPlatformEnvironment": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerPlatformSPN": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SchemaFile": {
                  "description": "Schema File",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "authenticationType": {
                  "description": "Authentication type",
                  "enum": [
                    "PowerPlatformEnvironment",
                    "PowerPlatformSPN"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": [
                "SchemaFile"
              ]
            },
            "task": {
              "description": "Power Platform Export Data\n\nPower Platform export data from environment with provided schema. Requires Windows build agent",
              "ignoreCase": "value",
              "pattern": "^PowerPlatformExportData@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Visual Studio build inputs",
              "properties": {
                "clean": {
                  "description": "Clean",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "configuration": {
                  "description": "Configuration",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "createLogFile": {
                  "description": "Create Log File",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "customVersion": {
                  "description": "Custom Version",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "enableDefaultLogger": {
                  "description": "Enable Default Logger",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "logFileVerbosity": {
                  "description": "Log File Verbosity",
                  "enum": [
                    "quiet",
                    "minimal",
                    "normal",
                    "detailed",
                    "diagnostic"
                  ],
                  "ignoreCase": "all"
                },
                "logProjectEvents": {
                  "description": "Record Project Details",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "maximumCpuCount": {
                  "description": "Build in Parallel",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "msbuildArchitecture": {
                  "description": "MSBuild Architecture",
                  "enum": [
                    "x86",
                    "x64"
                  ],
                  "ignoreCase": "all"
                },
                "msbuildArgs": {
                  "description": "MSBuild Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "platform": {
                  "description": "Platform",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "restoreNugetPackages": {
                  "description": "Restore NuGet Packages",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "solution": {
                  "description": "Solution",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "vsVersion": {
                  "description": "Visual Studio Version",
                  "enum": [
                    "latest",
                    "17.0",
                    "16.0",
                    "15.0",
                    "14.0",
                    "12.0",
                    "11.0"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": []
            },
            "task": {
              "description": "Visual Studio build\n\nBuild with MSBuild and set the Visual Studio version property",
              "ignoreCase": "value",
              "pattern": "^VSBuild@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Azure Key Vault inputs",
              "properties": {
                "KeyVaultName": {
                  "description": "Key vault",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "RunAsPreJob": {
                  "description": "Make secrets available to whole job",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "SecretsFilter": {
                  "description": "Secrets filter",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureSubscription": {
                  "aliases": [
                    "ConnectedServiceName"
                  ],
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "azureSubscription",
                "KeyVaultName"
              ]
            },
            "task": {
              "description": "Azure Key Vault\n\nDownload Azure Key Vault secrets",
              "ignoreCase": "value",
              "pattern": "^AzureKeyVault@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Azure Key Vault inputs",
              "properties": {
                "KeyVaultName": {
                  "description": "Key vault",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "RunAsPreJob": {
                  "description": "Make secrets available to whole job",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "SecretsFilter": {
                  "description": "Secrets filter",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureSubscription": {
                  "aliases": [
                    "ConnectedServiceName"
                  ],
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "azureSubscription",
                "KeyVaultName"
              ]
            },
            "task": {
              "description": "Azure Key Vault\n\nDownload Azure Key Vault secrets",
              "ignoreCase": "value",
              "pattern": "^AzureKeyVault@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Use .NET Core inputs",
              "properties": {
                "includePreviewVersions": {
                  "description": "Include Preview Versions",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "installationPath": {
                  "description": "Path To Install .Net Core",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "packageType": {
                  "description": "Package to install",
                  "enum": [
                    "runtime",
                    "sdk"
                  ],
                  "ignoreCase": "all"
                },
                "performMultiLevelLookup": {
                  "description": "Perform Multi Level Lookup",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "useGlobalJson": {
                  "description": "Use global json",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "version": {
                  "description": "Version",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "vsVersion": {
                  "description": "Compatible Visual Studio version",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "workingDirectory": {
                  "description": "Working Directory",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Use .NET Core\n\nAcquires a specific version of the .NET Core SDK from the internet or the local cache and adds it to the PATH. Use this task to change the version of .NET Core used in subsequent tasks. Additionally provides proxy support.",
              "ignoreCase": "value",
              "pattern": "^UseDotNet@2$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": ".NET Core SDK/runtime installer inputs",
              "properties": {
                "packageType": {
                  "description": "Package to install",
                  "enum": [
                    "runtime",
                    "sdk"
                  ],
                  "ignoreCase": "all"
                },
                "version": {
                  "description": "Version",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": ".NET Core SDK/runtime installer\n\nAcquire a specific version of the .NET Core SDK from the internet or local cache and add it to the PATH",
              "ignoreCase": "value",
              "pattern": "^DotNetCoreInstaller@0$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "deprecationMessage": "DotNetCoreInstaller is deprecated - Acquire a specific version of the .NET Core SDK from the internet or local cache and add it to the PATH",
          "doNotSuggest": true,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": ".NET Core sdk/runtime installer inputs",
              "properties": {
                "includePreviewVersions": {
                  "description": "Include Preview Versions",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "installationPath": {
                  "description": "Path To Install .Net Core",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "packageType": {
                  "description": "Package to install",
                  "enum": [
                    "runtime",
                    "sdk"
                  ],
                  "ignoreCase": "all"
                },
                "performMultiLevelLookup": {
                  "description": "Perform Multi Level Lookup",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "version": {
                  "description": "Version",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": ".NET Core sdk/runtime installer\n\nAcquire a specific version of the .NET Core SDK from the internet or local cache and add it to the PATH",
              "ignoreCase": "value",
              "pattern": "^DotNetCoreInstaller@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Azure App Service manage inputs",
              "properties": {
                "Action": {
                  "description": "Action",
                  "enum": [
                    "Swap Slots",
                    "Start Azure App Service",
                    "Stop Azure App Service",
                    "Restart Azure App Service",
                    "Start Swap With Preview",
                    "Complete Swap",
                    "Cancel Swap",
                    "Delete Slot",
                    "Install Extensions",
                    "Enable Continuous Monitoring",
                    "Start all continuous webjobs",
                    "Stop all continuous webjobs"
                  ],
                  "ignoreCase": "all"
                },
                "AppInsightsResourceGroupName": {
                  "description": "Resource Group name for Application Insights",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ApplicationInsightsResourceName": {
                  "description": "Application Insights resource name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ApplicationInsightsWebTestName": {
                  "description": "Application Insights web test name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ExtensionsList": {
                  "description": "Install Extensions",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "OutputVariable": {
                  "description": "Output variable",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PreserveVnet": {
                  "description": "Preserve Vnet",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "ResourceGroupName": {
                  "description": "Resource group",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Slot": {
                  "description": "Slot",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SourceSlot": {
                  "description": "Source Slot",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SpecifySlotOrASE": {
                  "aliases": [
                    "SpecifySlot"
                  ],
                  "description": "Specify Slot or App Service Environment",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "SwapWithProduction": {
                  "description": "Swap with Production",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "TargetSlot": {
                  "description": "Target Slot",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "WebAppName": {
                  "description": "App Service name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureSubscription": {
                  "aliases": [
                    "ConnectedServiceName"
                  ],
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "azureSubscription",
                "WebAppName"
              ]
            },
            "task": {
              "description": "Azure App Service manage\n\nStart, stop, restart, slot swap, slot delete, install site extensions or enable continuous monitoring for an Azure App Service",
              "ignoreCase": "value",
              "pattern": "^AzureAppServiceManage@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Rest Call inputs",
              "properties": {
                "allowInvalidSSLCertificate": {
                  "description": "Allow invalid SSL Certificate?",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "body": {
                  "description": "Body",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "contentType": {
                  "description": "Content-Type",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "headers": {
                  "description": "Http Headers",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "httpVerb": {
                  "description": "Http method",
                  "enum": [
                    "GET",
                    "POST",
                    "PUT",
                    "DELETE",
                    "PATCH"
                  ],
                  "ignoreCase": "all"
                },
                "outputFilePath": {
                  "description": "Output file path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "relativeUrl": {
                  "description": "Relative url",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "saveResponseToFile": {
                  "description": "Save response to file?",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "timeout": {
                  "description": "Timeout (in milliseconds)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "webserviceEndpoint": {
                  "description": "WebService endpoint",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "webserviceEndpoint"
              ]
            },
            "task": {
              "description": "Rest Call\n\nBuild task to allow rest call during build or release.",
              "ignoreCase": "value",
              "pattern": "^restCallBuildTask@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Install Azure Func Core Tools inputs",
              "properties": {
                "version": {
                  "description": "Version",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Install Azure Func Core Tools\n\nInstall Azure Func Core Tools",
              "ignoreCase": "value",
              "pattern": "^FuncToolsInstaller@0$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "File transform inputs",
              "properties": {
                "folderPath": {
                  "description": "Package or folder",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "jsonTargetFiles": {
                  "description": "JSON target files",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "xmlTargetFiles": {
                  "description": "XML target files",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "xmlTransformationRules": {
                  "description": "XML Transformation rules",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "File transform\n\nReplace tokens with variable values in XML or JSON configuration files",
              "ignoreCase": "value",
              "pattern": "^FileTransform@2$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "File transform inputs",
              "properties": {
                "enableXmlTransform": {
                  "description": "XML transformation",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "fileType": {
                  "description": "File format",
                  "enum": [
                    "xml",
                    "json"
                  ],
                  "ignoreCase": "all"
                },
                "folderPath": {
                  "description": "Package or folder",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "targetFiles": {
                  "description": "Target files",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "xmlTransformationRules": {
                  "description": "Transformation rules",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "File transform\n\nReplace tokens with variable values in XML or JSON configuration files",
              "ignoreCase": "value",
              "pattern": "^FileTransform@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Extract files inputs",
              "properties": {
                "archiveFilePatterns": {
                  "description": "Archive file patterns",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "cleanDestinationFolder": {
                  "description": "Clean destination folder before extracting",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "destinationFolder": {
                  "description": "Destination folder",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "overwriteExistingFiles": {
                  "description": "Overwrite existing files",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "pathToSevenZipTool": {
                  "description": "Path to 7z utility",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "destinationFolder"
              ]
            },
            "task": {
              "description": "Extract files\n\nExtract a variety of archive and compression files such as .7z, .rar, .tar.gz, and .zip",
              "ignoreCase": "value",
              "pattern": "^ExtractFiles@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Xamarin.Android inputs",
              "properties": {
                "clean": {
                  "description": "Clean",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "configuration": {
                  "description": "Configuration",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "createAppPackage": {
                  "description": "Create app package",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "jdkArchitectureOption": {
                  "aliases": [
                    "jdkArchitecture"
                  ],
                  "description": "JDK architecture",
                  "enum": [
                    "x86",
                    "x64"
                  ],
                  "ignoreCase": "all"
                },
                "jdkDirectory": {
                  "aliases": [
                    "jdkUserInputPath"
                  ],
                  "description": "JDK path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "jdkOption": {
                  "aliases": [
                    "jdkSelection"
                  ],
                  "description": "Select JDK to use for the build",
                  "enum": [
                    "JDKVersion",
                    "Path"
                  ],
                  "ignoreCase": "all"
                },
                "jdkVersionOption": {
                  "aliases": [
                    "jdkVersion"
                  ],
                  "description": "JDK version",
                  "enum": [
                    "default",
                    "1.11",
                    "1.10",
                    "1.9",
                    "1.8",
                    "1.7",
                    "1.6"
                  ],
                  "ignoreCase": "all"
                },
                "msbuildArchitectureOption": {
                  "aliases": [
                    "msbuildArchitecture"
                  ],
                  "description": "MSBuild architecture",
                  "enum": [
                    "x86",
                    "x64"
                  ],
                  "ignoreCase": "all"
                },
                "msbuildArguments": {
                  "description": "Additional arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "msbuildFile": {
                  "aliases": [
                    "msbuildLocation"
                  ],
                  "description": "MSBuild location",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "msbuildLocationOption": {
                  "aliases": [
                    "msbuildLocationMethod"
                  ],
                  "description": "MSBuild",
                  "enum": [
                    "version",
                    "location"
                  ],
                  "ignoreCase": "all"
                },
                "msbuildVersionOption": {
                  "aliases": [
                    "msbuildVersion"
                  ],
                  "description": "MSBuild version",
                  "enum": [
                    "latest",
                    "17.0",
                    "16.0",
                    "15.0",
                    "14.0",
                    "12.0",
                    "4.0"
                  ],
                  "ignoreCase": "all"
                },
                "outputDirectory": {
                  "aliases": [
                    "outputDir"
                  ],
                  "description": "Output directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "projectFile": {
                  "aliases": [
                    "project"
                  ],
                  "description": "Project",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "target": {
                  "description": "Target",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Xamarin.Android\n\nBuild an Android app with Xamarin",
              "ignoreCase": "value",
              "pattern": "^XamarinAndroid@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "deprecationMessage": "CopyPublishBuildArtifacts is deprecated - [DEPRECATED] Use the Copy Files task and the Publish Build Artifacts task instead",
          "doNotSuggest": true,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Copy and Publish Build Artifacts inputs",
              "properties": {
                "ArtifactName": {
                  "description": "Artifact Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ArtifactType": {
                  "description": "Artifact Type",
                  "enum": [
                    "Container",
                    "FilePath"
                  ],
                  "ignoreCase": "all"
                },
                "Contents": {
                  "description": "Contents",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "CopyRoot": {
                  "description": "Copy Root",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "TargetPath": {
                  "description": "Path",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "Contents",
                "ArtifactName",
                "ArtifactType"
              ]
            },
            "task": {
              "description": "Copy and Publish Build Artifacts\n\n[DEPRECATED] Use the Copy Files task and the Publish Build Artifacts task instead",
              "ignoreCase": "value",
              "pattern": "^CopyPublishBuildArtifacts@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Update BizTalk360 Mappings inputs",
              "properties": {
                "ApplicationPath": {
                  "description": "ApplicationPath",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "BizTalk360EnvironmentId": {
                  "description": "BizTalk360EnvironmentId",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "BizTalk360ServerUrl": {
                  "description": "BizTalk360ServerUrl",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SettingsFile": {
                  "description": "SettingsFile",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "BizTalk360EnvironmentId",
                "BizTalk360ServerUrl",
                "ApplicationPath",
                "SettingsFile"
              ]
            },
            "task": {
              "description": "Update BizTalk360 Mappings\n\nUpdates the alert mappings",
              "ignoreCase": "value",
              "pattern": "^UpdateBizTalk360Mappings@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Download package inputs",
              "properties": {
                "definition": {
                  "description": "Package",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "downloadPath": {
                  "description": "Destination directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "feed": {
                  "description": "Feed",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "version": {
                  "description": "Version",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "feed",
                "definition",
                "version"
              ]
            },
            "task": {
              "description": "Download package\n\nDownload a package from a package management feed in Azure Artifacts",
              "ignoreCase": "value",
              "pattern": "^DownloadPackage@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Download package inputs",
              "properties": {
                "definition": {
                  "description": "Package",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "downloadPath": {
                  "description": "Destination directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "extract": {
                  "description": "Extract package contents",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "feed": {
                  "description": "Feed",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "files": {
                  "description": "Files",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "packageType": {
                  "description": "Package Type",
                  "enum": [
                    "maven",
                    "npm",
                    "nuget",
                    "pypi",
                    "upack",
                    "cargo"
                  ],
                  "ignoreCase": "all"
                },
                "version": {
                  "description": "Version",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "view": {
                  "description": "View",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "feed",
                "definition",
                "version"
              ]
            },
            "task": {
              "description": "Download package\n\nDownload a package from a package management feed in Azure Artifacts",
              "ignoreCase": "value",
              "pattern": "^DownloadPackage@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Stop BizTalk360 alerts for maintenance inputs",
              "properties": {
                "BizTalk360EnvironmentId": {
                  "description": "BizTalk360EnvironmentId",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "BizTalk360ServerName": {
                  "description": "BizTalk360ServerName",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "BizTalk360EnvironmentId",
                "BizTalk360ServerName"
              ]
            },
            "task": {
              "description": "Stop BizTalk360 alerts for maintenance\n\nSets BizTalk360 in maintenance mode. Put this task before you start the deployment",
              "ignoreCase": "value",
              "pattern": "^SetAlertMaintenance@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Stop BizTalk360 alerts for maintenance inputs",
              "properties": {
                "BizTalk360EnvironmentId": {
                  "description": "BizTalk360EnvironmentId",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "BizTalk360ServerUrl": {
                  "description": "BizTalk360ServerUrl",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "BizTalk360EnvironmentId",
                "BizTalk360ServerUrl"
              ]
            },
            "task": {
              "description": "Stop BizTalk360 alerts for maintenance\n\nSets BizTalk360 in maintenance mode. Put this task before you start the deployment",
              "ignoreCase": "value",
              "pattern": "^SetAlertMaintenance@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "ARM template deployment inputs",
              "properties": {
                "action": {
                  "description": "Action",
                  "enum": [
                    "Create Or Update Resource Group",
                    "DeleteRG"
                  ],
                  "ignoreCase": "all"
                },
                "addSpnToEnvironment": {
                  "description": "Access service principal details in override parameters",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "azureResourceManagerConnection": {
                  "aliases": [
                    "ConnectedServiceName"
                  ],
                  "description": "Azure Resource Manager connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "csmFile": {
                  "description": "Template",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "csmFileLink": {
                  "description": "Template link",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "csmParametersFile": {
                  "description": "Template parameters",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "csmParametersFileLink": {
                  "description": "Template parameters link",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "deploymentMode": {
                  "description": "Deployment mode",
                  "enum": [
                    "Incremental",
                    "Complete",
                    "Validation"
                  ],
                  "ignoreCase": "all"
                },
                "deploymentName": {
                  "description": "Deployment name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "deploymentOutputs": {
                  "description": "Deployment outputs",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "deploymentScope": {
                  "description": "Deployment scope",
                  "enum": [
                    "Management Group",
                    "Subscription",
                    "Resource Group"
                  ],
                  "ignoreCase": "all"
                },
                "location": {
                  "description": "Location",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "overrideParameters": {
                  "description": "Override template parameters",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "resourceGroupName": {
                  "description": "Resource group",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "subscriptionId": {
                  "aliases": [
                    "subscriptionName"
                  ],
                  "description": "Subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "templateLocation": {
                  "description": "Template location",
                  "enum": [
                    "Linked artifact",
                    "URL of the file"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": [
                "azureResourceManagerConnection"
              ]
            },
            "task": {
              "description": "ARM template deployment\n\nDeploy an Azure Resource Manager (ARM) template to all the deployment scopes",
              "ignoreCase": "value",
              "pattern": "^AzureResourceManagerTemplateDeployment@3$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "deprecationMessage": "AzureResourceGroupDeployment is deprecated - Deploy, start, stop, delete Azure Resource Groups",
          "doNotSuggest": true,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Azure Resource Group Deployment inputs",
              "properties": {
                "ConnectedServiceName": {
                  "description": "Azure Subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ConnectedServiceNameClassic": {
                  "description": "Azure Classic Subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ConnectedServiceNameSelector": {
                  "description": "Azure Connection Type",
                  "enum": [
                    "ConnectedServiceName",
                    "ConnectedServiceNameClassic"
                  ],
                  "ignoreCase": "all"
                },
                "action": {
                  "description": "Action",
                  "enum": [
                    "Create Or Update Resource Group",
                    "Select Resource Group",
                    "Start",
                    "Stop",
                    "Restart",
                    "Delete",
                    "DeleteRG"
                  ],
                  "ignoreCase": "all"
                },
                "actionClassic": {
                  "description": "Action",
                  "enum": [
                    "Select Resource Group"
                  ],
                  "ignoreCase": "all"
                },
                "cloudService": {
                  "description": "Cloud Service",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "csmFile": {
                  "description": "Template",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "csmParametersFile": {
                  "description": "Template Parameters",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "deploymentMode": {
                  "description": "Deployment Mode",
                  "enum": [
                    "Validation",
                    "Incremental",
                    "Complete"
                  ],
                  "ignoreCase": "all"
                },
                "enableDeploymentPrerequisitesForCreate": {
                  "description": "Enable Deployment Prerequisites",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "enableDeploymentPrerequisitesForSelect": {
                  "description": "Enable Deployment Prerequisites",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "location": {
                  "description": "Location",
                  "enum": [
                    "Australia East",
                    "Australia Southeast",
                    "Brazil South",
                    "Canada Central",
                    "Canada East",
                    "Central India",
                    "Central US",
                    "East Asia",
                    "East US",
                    "East US 2 ",
                    "Japan East",
                    "Japan West",
                    "North Central US",
                    "North Europe",
                    "South Central US",
                    "South India",
                    "Southeast Asia",
                    "UK South",
                    "UK West",
                    "West Central US",
                    "West Europe",
                    "West India",
                    "West US",
                    "West US 2"
                  ],
                  "ignoreCase": "all"
                },
                "outputVariable": {
                  "description": "Resource Group",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "overrideParameters": {
                  "description": "Override Template Parameters",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "resourceGroupName": {
                  "description": "Resource Group",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Azure Resource Group Deployment\n\nDeploy, start, stop, delete Azure Resource Groups",
              "ignoreCase": "value",
              "pattern": "^AzureResourceGroupDeployment@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Azure resource group deployment inputs",
              "properties": {
                "action": {
                  "description": "Action",
                  "enum": [
                    "Create Or Update Resource Group",
                    "Select Resource Group",
                    "Start",
                    "Stop",
                    "StopWithDeallocate",
                    "Restart",
                    "Delete",
                    "DeleteRG"
                  ],
                  "ignoreCase": "all"
                },
                "addSpnToEnvironment": {
                  "description": "Access service principal details in override parameters",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "azureSubscription": {
                  "aliases": [
                    "ConnectedServiceName"
                  ],
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "copyAzureVMTags": {
                  "description": "Copy Azure VM tags to agents",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "csmFile": {
                  "description": "Template",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "csmFileLink": {
                  "description": "Template link",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "csmParametersFile": {
                  "description": "Template parameters",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "csmParametersFileLink": {
                  "description": "Template parameters link",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "deploymentGroupName": {
                  "description": "Deployment Group",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "deploymentMode": {
                  "description": "Deployment mode",
                  "enum": [
                    "Incremental",
                    "Complete",
                    "Validation"
                  ],
                  "ignoreCase": "all"
                },
                "deploymentName": {
                  "description": "Deployment name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "deploymentOutputs": {
                  "description": "Deployment outputs",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "enableDeploymentPrerequisites": {
                  "description": "Enable prerequisites",
                  "enum": [
                    "None",
                    "ConfigureVMwithWinRM",
                    "ConfigureVMWithDGAgent"
                  ],
                  "ignoreCase": "all"
                },
                "location": {
                  "description": "Location",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "outputVariable": {
                  "description": "VM details for WinRM",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "overrideParameters": {
                  "description": "Override template parameters",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "password": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "resourceGroupName": {
                  "description": "Resource group",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "runAgentServiceAsUser": {
                  "description": "Run agent service as a user",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "teamProject": {
                  "aliases": [
                    "project"
                  ],
                  "description": "Team project",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "teamServicesConnection": {
                  "aliases": [
                    "deploymentGroupEndpoint"
                  ],
                  "description": "Azure Pipelines service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "templateLocation": {
                  "description": "Template location",
                  "enum": [
                    "Linked artifact",
                    "URL of the file"
                  ],
                  "ignoreCase": "all"
                },
                "userName": {
                  "description": "User name",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "azureSubscription",
                "resourceGroupName"
              ]
            },
            "task": {
              "description": "Azure resource group deployment\n\nDeploy an Azure Resource Manager (ARM) template to a resource group and manage virtual machines",
              "ignoreCase": "value",
              "pattern": "^AzureResourceGroupDeployment@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Invoke REST API inputs",
              "properties": {
                "body": {
                  "description": "Body",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "headers": {
                  "description": "Headers",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "method": {
                  "description": "Method",
                  "enum": [
                    "OPTIONS",
                    "GET",
                    "HEAD",
                    "POST",
                    "PUT",
                    "DELETE",
                    "TRACE",
                    "PATCH"
                  ],
                  "ignoreCase": "all"
                },
                "serviceConnection": {
                  "aliases": [
                    "connectedServiceName"
                  ],
                  "description": "Generic endpoint",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "successCriteria": {
                  "description": "Success criteria",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "urlSuffix": {
                  "description": "Url suffix string",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "waitForCompletion": {
                  "description": "Complete based on",
                  "enum": [
                    "true",
                    "false"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": [
                "serviceConnection"
              ]
            },
            "task": {
              "description": "Invoke REST API\n\nInvoke REST API as a part of your process.",
              "ignoreCase": "value",
              "pattern": "^InvokeRESTAPI@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Invoke REST API inputs",
              "properties": {
                "azureServiceConnection": {
                  "aliases": [
                    "connectedServiceNameARM",
                    "azureSubscription"
                  ],
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "body": {
                  "description": "Body",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "connectionType": {
                  "aliases": [
                    "connectedServiceNameSelector"
                  ],
                  "description": "Connection type",
                  "enum": [
                    "connectedServiceName",
                    "connectedServiceNameARM"
                  ],
                  "ignoreCase": "all"
                },
                "headers": {
                  "description": "Headers",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "method": {
                  "description": "Method",
                  "enum": [
                    "OPTIONS",
                    "GET",
                    "HEAD",
                    "POST",
                    "PUT",
                    "DELETE",
                    "TRACE",
                    "PATCH"
                  ],
                  "ignoreCase": "all"
                },
                "serviceConnection": {
                  "aliases": [
                    "connectedServiceName",
                    "genericService"
                  ],
                  "description": "Generic service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "successCriteria": {
                  "description": "Success criteria",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "urlSuffix": {
                  "description": "URL suffix and parameters",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "waitForCompletion": {
                  "description": "Completion event",
                  "enum": [
                    "true",
                    "false"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": []
            },
            "task": {
              "description": "Invoke REST API\n\nInvoke a REST API as a part of your pipeline.",
              "ignoreCase": "value",
              "pattern": "^InvokeRESTAPI@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Archive Files inputs",
              "properties": {
                "archiveFile": {
                  "description": "Archive file to create",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "archiveType": {
                  "description": "Archive type",
                  "enum": [
                    "default",
                    "7z",
                    "tar",
                    "wim"
                  ],
                  "ignoreCase": "all"
                },
                "includeRootFolder": {
                  "description": "Prefix root folder name to archive paths",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "replaceExistingArchive": {
                  "description": "Replace existing archive",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "rootFolder": {
                  "description": "Root folder (or file) to archive",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "tarCompression": {
                  "description": "Tar compression",
                  "enum": [
                    "gz",
                    "bz2",
                    "xz",
                    "none"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": []
            },
            "task": {
              "description": "Archive Files\n\nArchive files using compression formats such as .7z, .rar, .tar.gz, and .zip.",
              "ignoreCase": "value",
              "pattern": "^ArchiveFiles@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Archive files inputs",
              "properties": {
                "archiveFile": {
                  "description": "Archive file to create",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "archiveType": {
                  "description": "Archive type",
                  "enum": [
                    "zip",
                    "7z",
                    "tar",
                    "wim"
                  ],
                  "ignoreCase": "all"
                },
                "includeRootFolder": {
                  "description": "Prepend root folder name to archive paths",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "quiet": {
                  "description": "Force quiet output",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "replaceExistingArchive": {
                  "description": "Replace existing archive",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "rootFolderOrFile": {
                  "description": "Root folder or file to archive",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sevenZipCompression": {
                  "description": "7z compression",
                  "enum": [
                    "ultra",
                    "maximum",
                    "normal",
                    "fast",
                    "fastest",
                    "none"
                  ],
                  "ignoreCase": "all"
                },
                "tarCompression": {
                  "description": "Tar compression",
                  "enum": [
                    "gz",
                    "bz2",
                    "xz",
                    "none"
                  ],
                  "ignoreCase": "all"
                },
                "verbose": {
                  "description": "Force verbose output",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": []
            },
            "task": {
              "description": "Archive files\n\nCompress files into .7z, .tar.gz, or .zip",
              "ignoreCase": "value",
              "pattern": "^ArchiveFiles@2$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "GitHub Comment inputs",
              "properties": {
                "comment": {
                  "description": "Comment",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "gitHubConnection": {
                  "description": "GitHub connection (OAuth or PAT)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "id": {
                  "description": "ID of the github pr/issue",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "repositoryName": {
                  "description": "Repository",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "gitHubConnection"
              ]
            },
            "task": {
              "description": "GitHub Comment\n\nWrite a comment to your Github entity i.e. issue or a Pull Request (PR)",
              "ignoreCase": "value",
              "pattern": "^GitHubComment@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Copy Files inputs",
              "properties": {
                "CleanTargetFolder": {
                  "description": "Clean Target Folder",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "Contents": {
                  "description": "Contents",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "OverWrite": {
                  "description": "Overwrite",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "SourceFolder": {
                  "description": "Source Folder",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "TargetFolder": {
                  "description": "Target Folder",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "flattenFolders": {
                  "description": "Flatten Folders",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": [
                "TargetFolder"
              ]
            },
            "task": {
              "description": "Copy Files\n\nCopy files from source folder to target folder using minimatch patterns (The minimatch patterns will only match file paths, not folder paths)",
              "ignoreCase": "value",
              "pattern": "^CopyFiles@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Copy files inputs",
              "properties": {
                "CleanTargetFolder": {
                  "description": "Clean Target Folder",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "Contents": {
                  "description": "Contents",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "OverWrite": {
                  "description": "Overwrite",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "SourceFolder": {
                  "description": "Source Folder",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "TargetFolder": {
                  "description": "Target Folder",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "delayBetweenRetries": {
                  "description": "Delay between two retries.",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "flattenFolders": {
                  "description": "Flatten Folders",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "ignoreMakeDirErrors": {
                  "description": "Ignore errors during creation of target folder.",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "preserveTimestamp": {
                  "description": "Preserve Target Timestamp",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "retryCount": {
                  "description": "Retry count to copy the file",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "TargetFolder"
              ]
            },
            "task": {
              "description": "Copy files\n\nCopy files from a source folder to a target folder using patterns matching file paths (not folder paths)",
              "ignoreCase": "value",
              "pattern": "^CopyFiles@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Azure Database for MySQL deployment inputs",
              "properties": {
                "DatabaseName": {
                  "description": "Database Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "DeleteFirewallRule": {
                  "description": "Delete Rule After Task Ends",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "EndIpAddress": {
                  "description": "End IP Address",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "IpDetectionMethod": {
                  "description": "Specify Firewall Rules Using",
                  "enum": [
                    "AutoDetect",
                    "IPAddressRange"
                  ],
                  "ignoreCase": "all"
                },
                "ServerName": {
                  "description": "Host Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SqlAdditionalArguments": {
                  "description": "Additional MySQL Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SqlFile": {
                  "description": "MySQL Script",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SqlInline": {
                  "description": "Inline MySQL Script",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SqlPassword": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SqlUsername": {
                  "description": "Server Admin Login",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "StartIpAddress": {
                  "description": "Start IP Address",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "TaskNameSelector": {
                  "description": "Type",
                  "enum": [
                    "SqlTaskFile",
                    "InlineSqlTask"
                  ],
                  "ignoreCase": "all"
                },
                "azureSubscription": {
                  "aliases": [
                    "ConnectedServiceName"
                  ],
                  "description": "Azure Subscription",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "azureSubscription",
                "ServerName",
                "SqlUsername",
                "SqlPassword"
              ]
            },
            "task": {
              "description": "Azure Database for MySQL deployment\n\nRun your scripts and make changes to your Azure Database for MySQL",
              "ignoreCase": "value",
              "pattern": "^AzureMysqlDeployment@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Devcontainers CI Task inputs",
              "properties": {
                "buildReasonsForPush": {
                  "description": "Set the Build Reasons that should trigger a push of the dev container image (if push=filter). Defaults to Manual, IndividualCI, BatchedCI. (see https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&viewFallbackFrom=vsts&tabs=yaml)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "cacheFrom": {
                  "description": "Specify additional images to use for build caching",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "env": {
                  "description": "Specify environment variables to pass to the docker run command",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "imageName": {
                  "description": "Image name (including registry)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "imageTag": {
                  "description": "One or more comma-separated image tags (defaults to latest)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "noCache": {
                  "description": "Builds the image with `--no-cache` (takes precedence over `cacheFrom`)",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "platform": {
                  "description": "Platforms for which the image should be built. If omitted, defaults to the platform of the Azure DevOps Agent. Multiple platforms should be comma separated.",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "push": {
                  "description": "Control when images are pushed to the registry",
                  "enum": [
                    "never",
                    "filter",
                    "always"
                  ],
                  "ignoreCase": "all"
                },
                "pushOnFailedBuild": {
                  "description": "Control whether to push the image on failed builds (if push==filter)",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "runCmd": {
                  "description": "Specify the command to run after building the dev container image",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "skipContainerUserIdUpdate": {
                  "description": "For non-root Dev Containers (i.e. where `remoteUser` is specified), the action attempts to make the container user UID and GID match those of the host user. Set this to true to skip this step (defaults to false)",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "sourceBranchFilterForPush": {
                  "description": "Set the source branches (e.g. refs/heads/main) that are allowed to trigger a push of the dev container image (if push=filter). Leave empty to allow all.",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "subFolder": {
                  "description": "Specify a child folder (containing a .devcontainer) instead of using the repository root",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Devcontainers CI Task\n\nBuild and run Dev Containers (https://containers.dev) in Azure DevOps Pipelines",
              "ignoreCase": "value",
              "pattern": "^DevcontainersCi@0$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "npm inputs",
              "properties": {
                "arguments": {
                  "description": "arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "command": {
                  "description": "npm command",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "cwd": {
                  "description": "working folder",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "npm\n\nRun an npm command. Use NpmAuthenticate@0 task for latest capabilities.",
              "ignoreCase": "value",
              "pattern": "^Npm@0$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "npm inputs",
              "properties": {
                "command": {
                  "description": "Command",
                  "enum": [
                    "ci",
                    "install",
                    "publish",
                    "custom"
                  ],
                  "ignoreCase": "all"
                },
                "customCommand": {
                  "description": "Command and arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "customEndpoint": {
                  "description": "Credentials for registries outside this organization/collection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "customFeed": {
                  "description": "Use packages from this Azure Artifacts/TFS registry",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "customRegistry": {
                  "description": "Registries to use",
                  "enum": [
                    "useNpmrc",
                    "useFeed"
                  ],
                  "ignoreCase": "all"
                },
                "publishEndpoint": {
                  "description": "External Registry",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "publishFeed": {
                  "description": "Target registry",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "publishPackageMetadata": {
                  "description": "Publish pipeline metadata",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "publishRegistry": {
                  "description": "Registry location",
                  "enum": [
                    "useExternalRegistry",
                    "useFeed"
                  ],
                  "ignoreCase": "all"
                },
                "verbose": {
                  "description": "Verbose logging",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "workingDir": {
                  "description": "Working folder that contains package.json",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "npm\n\nInstall and publish npm packages, or run an npm command. Supports npmjs.com and authenticated registries like Azure Artifacts.",
              "ignoreCase": "value",
              "pattern": "^Npm@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Run all SQL Scripts in a folder in SqlCmd mode inputs",
              "properties": {
                "AuthenticationMethod": {
                  "description": "Authentication Method",
                  "enum": [
                    "windows",
                    "sqlauth"
                  ],
                  "ignoreCase": "all"
                },
                "AuthenticationPassword": {
                  "description": "The SQL Server Authentication Password for the SQL database Login ID",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AuthenticationUser": {
                  "description": "The SQL Server Authentication Login ID for the SQL database",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Database": {
                  "description": "The name of the SQL database",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "QueryTimeout": {
                  "description": "Query Timeout in seconds",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Recursive": {
                  "description": "Recurse sub-folders and run all SQLCMD scipts found",
                  "enum": [
                    "true",
                    "false"
                  ],
                  "ignoreCase": "all"
                },
                "Server": {
                  "description": "Server name or IP address",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SqlCmdSciptFolderPath": {
                  "description": "Path to folder containing SQLCMD script files",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SqlCmdVariableType": {
                  "description": "Provide SQLCMD Variables",
                  "enum": [
                    "none",
                    "json",
                    "text"
                  ],
                  "ignoreCase": "all"
                },
                "SqlCmdVariablesInJson": {
                  "description": "SqlCmd Variables and Values (JSON format)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SqlCmdVariablesInText": {
                  "description": "SqlCmd Variables and Values (name/value pair format)",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "Server",
                "Database",
                "SqlCmdSciptFolderPath"
              ]
            },
            "task": {
              "description": "Run all SQL Scripts in a folder in SqlCmd mode\n\nRun multiple SQL Scripts in a folder in SqlCmd mode and passing in parameters via a SqlCmdVariables array",
              "ignoreCase": "value",
              "pattern": "^RunSqlCmdScriptsInFolderTask@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Deploy Azure Static Web App inputs",
              "properties": {
                "api_build_command": {
                  "description": "Api build command",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "api_location": {
                  "description": "Api location",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "app_build_command": {
                  "description": "App build command",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "app_location": {
                  "description": "App location",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azure_static_web_apps_api_token": {
                  "description": "Azure Static Web Apps api token",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "build_timeout_in_minutes": {
                  "description": "Build timeout in minutes",
                  "ignoreCase": "key",
                  "type": "integer"
                },
                "config_file_location": {
                  "description": "Config file location",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "data_api_location": {
                  "description": "Data api location",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "deployment_environment": {
                  "description": "Deployment Environment",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "is_static_export": {
                  "description": "Set static export",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "output_location": {
                  "description": "Output location",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "production_branch": {
                  "description": "Production Branch",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "routes_location": {
                  "description": "Routes location",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "skip_api_build": {
                  "description": "Skip api build",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "skip_app_build": {
                  "description": "Skip app build",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "verbose": {
                  "description": "Verbose",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "workingDirectory": {
                  "aliases": [
                    "cwd",
                    "rootDirectory"
                  ],
                  "description": "Working directory",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Deploy Azure Static Web App\n\n[PREVIEW] Build and deploy an Azure Static Web App",
              "ignoreCase": "value",
              "pattern": "^AzureStaticWebApp@0$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Node.js tool installer inputs",
              "properties": {
                "checkLatest": {
                  "description": "Check for Latest Version",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "force32bit": {
                  "description": "Use 32 bit version on x64 agents",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "nodejsMirror": {
                  "description": "Set source for Node.js binaries",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "versionFilePath": {
                  "description": "Path to the .nvmrc file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "versionSource": {
                  "description": "Source of version",
                  "enum": [
                    "spec",
                    "fromFile"
                  ],
                  "ignoreCase": "all"
                },
                "versionSpec": {
                  "description": "Version Spec",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Node.js tool installer\n\nFinds or downloads and caches the specified version spec of Node.js and adds it to the PATH",
              "ignoreCase": "value",
              "pattern": "^NodeTool@0$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Use Node.js ecosystem inputs",
              "properties": {
                "checkLatest": {
                  "description": "Check for Latest Version",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "force32bit": {
                  "description": "Use 32 bit version on x64 agents",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "version": {
                  "description": "Version",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Use Node.js ecosystem\n\nSet up a Node.js environment and add it to the PATH, additionally providing proxy support",
              "ignoreCase": "value",
              "pattern": "^UseNode@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "deprecationMessage": "SqlServerDacpacDeployment is deprecated - Deploy a SQL Server database using DACPAC",
          "doNotSuggest": true,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "[Deprecated] SQL Server database deploy inputs",
              "properties": {
                "AdditionalArguments": {
                  "description": "Additional Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AdminPassword": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AdminUserName": {
                  "description": "Admin Login",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ConnectionString": {
                  "description": "Connection String",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "DacpacFile": {
                  "description": "DACPAC File",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "DatabaseName": {
                  "description": "Database Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "DeployInParallel": {
                  "description": "Deploy in Parallel",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "EnvironmentName": {
                  "description": "Machines",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "MachineFilter": {
                  "description": "Deploy to Machines",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Protocol": {
                  "description": "Protocol",
                  "enum": [
                    "Http",
                    "Https"
                  ],
                  "ignoreCase": "all"
                },
                "PublishProfile": {
                  "description": "Publish Profile",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ResourceFilteringMethod": {
                  "description": "Select Machines By",
                  "enum": [
                    "machineNames",
                    "tags"
                  ],
                  "ignoreCase": "all"
                },
                "ServerName": {
                  "description": "Server Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SqlPassword": {
                  "description": "SQL Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SqlUsername": {
                  "description": "SQL Username",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "TargetMethod": {
                  "description": "Specify SQL Using",
                  "enum": [
                    "server",
                    "connectionString",
                    "publishProfile"
                  ],
                  "ignoreCase": "all"
                },
                "TestCertificate": {
                  "description": "Test Certificate",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": [
                "EnvironmentName",
                "DacpacFile"
              ]
            },
            "task": {
              "description": "[Deprecated] SQL Server database deploy\n\nDeploy a SQL Server database using DACPAC",
              "ignoreCase": "value",
              "pattern": "^SqlServerDacpacDeployment@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Visual Studio test platform installer inputs",
              "properties": {
                "customFeed": {
                  "description": "Package Source",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "netShare": {
                  "description": "UNC Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "packageFeedSelector": {
                  "description": "Package Feed",
                  "enum": [
                    "nugetOrg",
                    "customFeed",
                    "netShare"
                  ],
                  "ignoreCase": "all"
                },
                "password": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testPlatformVersion": {
                  "description": "Test Platform Version",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "username": {
                  "description": "User Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "versionSelector": {
                  "description": "Version",
                  "enum": [
                    "latestPreRelease",
                    "latestStable",
                    "specificVersion"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": []
            },
            "task": {
              "description": "Visual Studio test platform installer\n\nAcquire the test platform from nuget.org or the tool cache. Satisfies the vstest demand and can be used for running tests and collecting diagnostic data using the Visual Studio Test task.",
              "ignoreCase": "value",
              "pattern": "^VisualStudioTestPlatformInstaller@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Publish To Azure Service Bus inputs",
              "properties": {
                "azureSubscription": {
                  "aliases": [
                    "connectedServiceName"
                  ],
                  "description": "Azure Service Bus service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "certificateString": {
                  "description": "Certificate Variable",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "messageBody": {
                  "description": "Message body",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sessionId": {
                  "description": "Session Id",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "signPayload": {
                  "description": "Sign the Message",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "signatureKey": {
                  "description": "Signature Property Key",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "useDataContractSerializer": {
                  "description": "Use .NET data contract serailizer",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "waitForCompletion": {
                  "description": "Wait for task completion",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": [
                "azureSubscription"
              ]
            },
            "task": {
              "description": "Publish To Azure Service Bus\n\nSends a message to Azure Service Bus using a service connection (no agent is required)",
              "ignoreCase": "value",
              "pattern": "^PublishToAzureServiceBus@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Publish To Azure Service Bus inputs",
              "properties": {
                "azureSubscription": {
                  "aliases": [
                    "connectedServiceName"
                  ],
                  "description": "Azure service bus connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "messageBody": {
                  "description": "Message body",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "waitForCompletion": {
                  "description": "Wait for task completion",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": [
                "azureSubscription"
              ]
            },
            "task": {
              "description": "Publish To Azure Service Bus\n\nSends a message to azure service bus using a service connection (no agent required).",
              "ignoreCase": "value",
              "pattern": "^PublishToAzureServiceBus@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Deploy to Kubernetes inputs",
              "properties": {
                "action": {
                  "description": "Action",
                  "enum": [
                    "bake",
                    "createSecret",
                    "delete",
                    "deploy",
                    "patch",
                    "promote",
                    "scale",
                    "reject"
                  ],
                  "ignoreCase": "all"
                },
                "arguments": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "baselineAndCanaryReplicas": {
                  "description": "Baseline and canary replicas",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "containers": {
                  "description": "Containers",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "dockerComposeFile": {
                  "description": "Path to docker compose file",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "dockerRegistryEndpoint": {
                  "description": "Docker registry service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "helmChart": {
                  "description": "Helm Chart",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "imagePullSecrets": {
                  "description": "ImagePullSecrets",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "kind": {
                  "description": "Kind",
                  "enum": [
                    "deployment",
                    "replicaset",
                    "statefulset"
                  ],
                  "ignoreCase": "all"
                },
                "kubernetesServiceConnection": {
                  "description": "Kubernetes service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "kustomizationPath": {
                  "description": "Kustomization Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "manifests": {
                  "description": "Manifests",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "mergeStrategy": {
                  "description": "Merge Strategy",
                  "enum": [
                    "json",
                    "merge",
                    "strategic"
                  ],
                  "ignoreCase": "all"
                },
                "name": {
                  "description": "Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "overrideFiles": {
                  "description": "Override Files",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "overrides": {
                  "description": "Overrides",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "patch": {
                  "description": "Patch",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "percentage": {
                  "description": "Percentage",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "releaseName": {
                  "description": "Helm Release Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "renderType": {
                  "description": "Render Engine",
                  "enum": [
                    "helm",
                    "kompose",
                    "kustomize"
                  ],
                  "ignoreCase": "all"
                },
                "replicas": {
                  "description": "Replica count",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "resourceFileToPatch": {
                  "description": "File path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "resourceToPatch": {
                  "description": "Resource to patch",
                  "enum": [
                    "file",
                    "name"
                  ],
                  "ignoreCase": "all"
                },
                "rolloutStatusTimeout": {
                  "description": "Timeout for rollout status",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "secretArguments": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "secretName": {
                  "description": "Secret name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "secretType": {
                  "description": "Type of secret",
                  "enum": [
                    "dockerRegistry",
                    "generic"
                  ],
                  "ignoreCase": "all"
                },
                "strategy": {
                  "description": "Strategy",
                  "enum": [
                    "canary",
                    "none"
                  ],
                  "ignoreCase": "all"
                },
                "trafficSplitMethod": {
                  "description": "Traffic split method",
                  "enum": [
                    "pod",
                    "smi"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": []
            },
            "task": {
              "description": "Deploy to Kubernetes\n\nUse Kubernetes manifest files to deploy to clusters or even bake the manifest files to be used for deployments using Helm charts",
              "ignoreCase": "value",
              "pattern": "^KubernetesManifest@0$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Download build artifacts inputs",
              "properties": {
                "allowPartiallySucceededBuilds": {
                  "description": "Download artifacts even from partially succeeded builds.",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "artifactName": {
                  "description": "Artifact name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "branchName": {
                  "description": "Branch name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "buildId": {
                  "description": "Build",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "buildType": {
                  "description": "Download artifacts produced by",
                  "enum": [
                    "current",
                    "specific"
                  ],
                  "ignoreCase": "all"
                },
                "buildVersionToDownload": {
                  "description": "Build version to download",
                  "enum": [
                    "latest",
                    "latestFromBranch",
                    "specific"
                  ],
                  "ignoreCase": "all"
                },
                "checkDownloadedFiles": {
                  "description": "Check downloaded files",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "cleanDestinationFolder": {
                  "description": "Clean destination folder",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "downloadPath": {
                  "description": "Destination directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "downloadType": {
                  "description": "Download type",
                  "enum": [
                    "single",
                    "specific"
                  ],
                  "ignoreCase": "all"
                },
                "extractTars": {
                  "description": "Extract all files that are stored inside tar archives",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "itemPattern": {
                  "description": "Matching pattern",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "parallelizationLimit": {
                  "description": "Parallelization limit",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "pipeline": {
                  "aliases": [
                    "definition"
                  ],
                  "description": "Build pipeline",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "project": {
                  "description": "Project",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "retryDownloadCount": {
                  "description": "Retry count",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "specificBuildWithTriggering": {
                  "description": "When appropriate, download artifacts from the triggering build.",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "tags": {
                  "description": "Build Tags",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Download build artifacts\n\nDownload files that were saved as artifacts of a completed build",
              "ignoreCase": "value",
              "pattern": "^DownloadBuildArtifacts@0$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Download build artifacts inputs",
              "properties": {
                "allowPartiallySucceededBuilds": {
                  "description": "Download artifacts even from partially succeeded builds.",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "artifactName": {
                  "description": "Artifact name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "branchName": {
                  "description": "Branch name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "buildId": {
                  "description": "Build",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "buildType": {
                  "description": "Download artifacts produced by",
                  "enum": [
                    "current",
                    "specific"
                  ],
                  "ignoreCase": "all"
                },
                "buildVersionToDownload": {
                  "description": "Build version to download",
                  "enum": [
                    "latest",
                    "latestFromBranch",
                    "specific"
                  ],
                  "ignoreCase": "all"
                },
                "checkDownloadedFiles": {
                  "description": "Check downloaded files",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "cleanDestinationFolder": {
                  "description": "Clean destination folder",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "downloadPath": {
                  "description": "Destination directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "downloadType": {
                  "description": "Download type",
                  "enum": [
                    "single",
                    "specific"
                  ],
                  "ignoreCase": "all"
                },
                "extractTars": {
                  "description": "Extract all files that are stored inside tar archives",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "itemPattern": {
                  "description": "Matching pattern",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "parallelizationLimit": {
                  "description": "Parallelization limit",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "pipeline": {
                  "aliases": [
                    "definition"
                  ],
                  "description": "Build pipeline",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "project": {
                  "description": "Project",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "retryDownloadCount": {
                  "description": "Retry count",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "specificBuildWithTriggering": {
                  "description": "When appropriate, download artifacts from the triggering build.",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "tags": {
                  "description": "Build Tags",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Download build artifacts\n\nDownload files that were saved as artifacts of a completed build",
              "ignoreCase": "value",
              "pattern": "^DownloadBuildArtifacts@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "CocoaPods inputs",
              "properties": {
                "forceRepoUpdate": {
                  "description": "Force repo update",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "projectDirectory": {
                  "description": "Project directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "workingDirectory": {
                  "aliases": [
                    "cwd"
                  ],
                  "description": "Working directory",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "CocoaPods\n\nInstall CocoaPods dependencies for Swift and Objective-C Cocoa projects",
              "ignoreCase": "value",
              "pattern": "^CocoaPods@0$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Run a DACPAC file inputs",
              "properties": {
                "blockOnPossibleDataLoss": {
                  "description": "Block on possible data loss",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "createNewDatabase": {
                  "description": "Create new database",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "databaseName": {
                  "description": "Database Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "logProgress": {
                  "description": "Log progress from DACPAC",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "packagePath": {
                  "description": "Specify a DACPAC file to run",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "serverName": {
                  "description": "Server Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "toolsPath": {
                  "description": "Enter to path to the folder for the DAC binaries (sqlpackage.exe)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "userName": {
                  "description": "SQL Server Login",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "userPassword": {
                  "description": "SQL Server Authentication password",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "packagePath",
                "serverName"
              ]
            },
            "task": {
              "description": "Run a DACPAC file\n\nAllows you to run DACPAC packages",
              "ignoreCase": "value",
              "pattern": "^RunDACPAC@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Terminate Suspended inputs",
              "properties": {
                "Destination": {
                  "description": "Destination",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SaveMessages": {
                  "description": "Save",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": []
            },
            "task": {
              "description": "Terminate Suspended\n\nTerminates suspended service instances and optionally saves the relevant messages and metadata",
              "ignoreCase": "value",
              "pattern": "^BizTalkTerminateSuspended@0$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Terminate Suspended inputs",
              "properties": {
                "Destination": {
                  "description": "Destination",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SaveMessages": {
                  "description": "Save",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": []
            },
            "task": {
              "description": "Terminate Suspended\n\nTerminates suspended service instances and optionally saves the relevant messages and metadata",
              "ignoreCase": "value",
              "pattern": "^BizTalkTerminateSuspended@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Azure Spring Cloud inputs",
              "properties": {
                "Action": {
                  "description": "Action",
                  "enum": [
                    "Deploy",
                    "Set Production",
                    "Delete Staging Deployment"
                  ],
                  "ignoreCase": "all"
                },
                "AppName": {
                  "description": "App",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AzureSpringCloud": {
                  "description": "Azure Spring Cloud Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Builder": {
                  "description": "Builder",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "CreateNewDeployment": {
                  "description": "Create a new staging deployment if one does not exist.",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "DeploymentName": {
                  "description": "Deployment",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "DeploymentType": {
                  "description": "Deployment Type",
                  "enum": [
                    "Artifacts",
                    "CustomContainer"
                  ],
                  "ignoreCase": "all"
                },
                "DotNetCoreMainEntryPath": {
                  "description": "Main Entry Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "EnvironmentVariables": {
                  "description": "Environment Variables",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ImageArgs": {
                  "description": "Image Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ImageCommand": {
                  "description": "Image Command",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ImageLanguageFramework": {
                  "description": "Language Framework",
                  "enum": [
                    "springboot",
                    ""
                  ],
                  "ignoreCase": "all"
                },
                "ImageName": {
                  "description": "Image Name and Tag",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "JvmOptions": {
                  "description": "JVM Options",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Package": {
                  "description": "Package or folder",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "RegistryPassword": {
                  "description": "Registry Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "RegistryServer": {
                  "description": "Registry Server",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "RegistryUsername": {
                  "description": "Registry Username",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "RuntimeVersion": {
                  "description": "Runtime Version",
                  "enum": [
                    "Java_8",
                    "Java_11",
                    "NetCore_31"
                  ],
                  "ignoreCase": "all"
                },
                "UseStagingDeployment": {
                  "description": "Use Staging Deployment",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "Version": {
                  "description": "Version",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureSubscription": {
                  "aliases": [
                    "ConnectedServiceName"
                  ],
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "azureSubscription",
                "AzureSpringCloud",
                "AppName"
              ]
            },
            "task": {
              "description": "Azure Spring Cloud\n\nDeploy applications to Azure Spring Cloud and manage deployments.",
              "ignoreCase": "value",
              "pattern": "^AzureSpringCloud@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Power Platform Who Am I inputs",
              "properties": {
                "Environment": {
                  "description": "Environment Url",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerPlatformEnvironment": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerPlatformSPN": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "authenticationType": {
                  "description": "Authentication type",
                  "enum": [
                    "PowerPlatformEnvironment",
                    "PowerPlatformSPN"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": []
            },
            "task": {
              "description": "Power Platform Who Am I\n\nWho Am I for quick connection testing to Power Platform org/environment instance.",
              "ignoreCase": "value",
              "pattern": "^PowerPlatformWhoAmi@2$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Azure Web App inputs",
              "properties": {
                "appName": {
                  "description": "App name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "appSettings": {
                  "description": "App settings",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "appType": {
                  "description": "App type",
                  "enum": [
                    "webApp",
                    "webAppLinux"
                  ],
                  "ignoreCase": "all"
                },
                "azureSubscription": {
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "configurationStrings": {
                  "description": "Configuration settings",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "customDeployFolder": {
                  "description": "Custom Deploy Folder",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "customWebConfig": {
                  "description": "Generate web.config parameters for Python, Node.js, Go and Java apps",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "deployToSlotOrASE": {
                  "description": "Deploy to Slot or App Service Environment",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "deploymentMethod": {
                  "description": "Deployment method",
                  "enum": [
                    "auto",
                    "zipDeploy",
                    "runFromPackage"
                  ],
                  "ignoreCase": "all"
                },
                "package": {
                  "description": "Package or folder",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "resourceGroupName": {
                  "description": "Resource group",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "runtimeStack": {
                  "description": "Runtime stack",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "slotName": {
                  "description": "Slot",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "startUpCommand": {
                  "description": "Startup command ",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "azureSubscription",
                "appType",
                "appName"
              ]
            },
            "task": {
              "description": "Azure Web App\n\nDeploy an Azure Web App for Linux or Windows",
              "ignoreCase": "value",
              "pattern": "^AzureWebApp@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Azure CLI inputs",
              "properties": {
                "addSpnToEnvironment": {
                  "description": "Access service principal details in script",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "arguments": {
                  "aliases": [
                    "args"
                  ],
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureSubscription": {
                  "aliases": [
                    "connectedServiceNameARM"
                  ],
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "failOnStandardError": {
                  "description": "Fail on Standard Error",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "inlineScript": {
                  "description": "Inline Script",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "scriptLocation": {
                  "description": "Script Location",
                  "enum": [
                    "inlineScript",
                    "scriptPath"
                  ],
                  "ignoreCase": "all"
                },
                "scriptPath": {
                  "description": "Script Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "useGlobalConfig": {
                  "description": "Use global Azure CLI configuration",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "workingDirectory": {
                  "aliases": [
                    "cwd"
                  ],
                  "description": "Working Directory",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "azureSubscription"
              ]
            },
            "task": {
              "description": "Azure CLI\n\nRun Azure CLI commands against an Azure subscription in a Shell script when running on Linux agent or Batch script when running on Windows agent.",
              "ignoreCase": "value",
              "pattern": "^AzureCLI@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Azure CLI Preview inputs",
              "properties": {
                "args": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "connectedServiceName": {
                  "description": "Azure Classic Subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "connectedServiceNameARM": {
                  "description": "AzureRM Subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "connectedServiceNameSelector": {
                  "description": "Azure Connection Type",
                  "enum": [
                    "connectedServiceName",
                    "connectedServiceNameARM"
                  ],
                  "ignoreCase": "all"
                },
                "cwd": {
                  "description": "Working Directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "failOnStandardError": {
                  "description": "Fail on Standard Error",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "inlineScript": {
                  "description": "Inline Script",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "scriptLocation": {
                  "description": "Script Location",
                  "enum": [
                    "inlineScript",
                    "scriptPath"
                  ],
                  "ignoreCase": "all"
                },
                "scriptPath": {
                  "description": "Script Path",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Azure CLI Preview\n\nRun a Shell or Batch script with Azure CLI commands against an azure subscription",
              "ignoreCase": "value",
              "pattern": "^AzureCLI@0$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Azure CLI inputs",
              "properties": {
                "addSpnToEnvironment": {
                  "description": "Access service principal details in script",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "arguments": {
                  "aliases": [
                    "scriptArguments"
                  ],
                  "description": "Script Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureSubscription": {
                  "aliases": [
                    "connectedServiceNameARM"
                  ],
                  "description": "Azure Resource Manager connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "failOnStandardError": {
                  "description": "Fail on Standard Error",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "inlineScript": {
                  "description": "Inline Script",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "powerShellErrorActionPreference": {
                  "description": "ErrorActionPreference",
                  "enum": [
                    "stop",
                    "continue",
                    "silentlyContinue"
                  ],
                  "ignoreCase": "all"
                },
                "powerShellIgnoreLASTEXITCODE": {
                  "description": "Ignore $LASTEXITCODE",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "scriptLocation": {
                  "description": "Script Location",
                  "enum": [
                    "inlineScript",
                    "scriptPath"
                  ],
                  "ignoreCase": "all"
                },
                "scriptPath": {
                  "description": "Script Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "scriptType": {
                  "description": "Script Type",
                  "enum": [
                    "ps",
                    "pscore",
                    "batch",
                    "bash"
                  ],
                  "ignoreCase": "all"
                },
                "useGlobalConfig": {
                  "description": "Use global Azure CLI configuration",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "workingDirectory": {
                  "aliases": [
                    "cwd"
                  ],
                  "description": "Working Directory",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "azureSubscription",
                "scriptType"
              ]
            },
            "task": {
              "description": "Azure CLI\n\nRun Azure CLI commands against an Azure subscription in a PowerShell Core/Shell script when running on Linux agent or PowerShell/PowerShell Core/Batch script when running on Windows agent.",
              "ignoreCase": "value",
              "pattern": "^AzureCLI@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Power Platform Restore Environment inputs",
              "properties": {
                "DisableAdminMode": {
                  "description": "Disable Admin Mode",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "Environment": {
                  "description": "Environment Url",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "FriendlyName": {
                  "description": "Friendly Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerPlatformEnvironment": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerPlatformSPN": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "RestoreLatestBackup": {
                  "description": "Use latest backup",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "RestoreTimeStamp": {
                  "description": "Backup time stamp to restore to.",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "TargetEnvironmentUrl": {
                  "description": "Target environment url",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "authenticationType": {
                  "description": "Authentication type",
                  "enum": [
                    "PowerPlatformEnvironment",
                    "PowerPlatformSPN"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": [
                "TargetEnvironmentUrl"
              ]
            },
            "task": {
              "description": "Power Platform Restore Environment\n\nPower Platform Restore Environment",
              "ignoreCase": "value",
              "pattern": "^PowerPlatformRestoreEnvironment@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Run Sql Scripts inputs",
              "properties": {
                "SQLparameters": {
                  "description": "Replacement Text",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "continueAfterError": {
                  "description": "Continue After error",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "databaseName": {
                  "description": "Database Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "executionOrder": {
                  "description": "File containing list of files to execute (optional)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "pathToScripts": {
                  "description": "Path to SQL Scripts",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "queryTimeout": {
                  "description": "Query Timeout",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "removeComments": {
                  "description": "Remove comments",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "serverName": {
                  "description": "Server Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "userName": {
                  "description": "SQL Server Login",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "userPassword": {
                  "description": "SQL Server Authentication password",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "pathToScripts",
                "serverName",
                "databaseName"
              ]
            },
            "task": {
              "description": "Run Sql Scripts\n\nAllows you to run SQL Scripts",
              "ignoreCase": "value",
              "pattern": "^RunSqlScripts@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "GitHub Release inputs",
              "properties": {
                "action": {
                  "description": "Action",
                  "enum": [
                    "create",
                    "edit",
                    "delete"
                  ],
                  "ignoreCase": "all"
                },
                "addChangeLog": {
                  "description": "Add changelog",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "assetUploadMode": {
                  "description": "Asset upload mode",
                  "enum": [
                    "delete",
                    "replace"
                  ],
                  "ignoreCase": "all"
                },
                "assets": {
                  "description": "Assets",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "changeLogCompareToRelease": {
                  "description": "Compare to",
                  "enum": [
                    "lastFullRelease",
                    "lastNonDraftRelease",
                    "lastNonDraftReleaseByTag"
                  ],
                  "ignoreCase": "all"
                },
                "changeLogCompareToReleaseTag": {
                  "description": "Release Tag",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "changeLogLabels": {
                  "description": "Categories",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "changeLogType": {
                  "description": "Changelog type",
                  "enum": [
                    "commitBased",
                    "issueBased"
                  ],
                  "ignoreCase": "all"
                },
                "gitHubConnection": {
                  "description": "GitHub connection (OAuth or PAT)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "isDraft": {
                  "description": "Draft release",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "isPreRelease": {
                  "description": "Pre-release",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "releaseNotesFilePath": {
                  "description": "Release notes file path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "releaseNotesInline": {
                  "description": "Release notes",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "releaseNotesSource": {
                  "description": "Release notes source",
                  "enum": [
                    "filePath",
                    "inline"
                  ],
                  "ignoreCase": "all"
                },
                "repositoryName": {
                  "description": "Repository",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "tag": {
                  "description": "Tag",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "tagPattern": {
                  "description": "Tag Pattern",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "tagSource": {
                  "description": "Tag source",
                  "enum": [
                    "gitTag",
                    "userSpecifiedTag"
                  ],
                  "ignoreCase": "all"
                },
                "target": {
                  "description": "Target",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "title": {
                  "description": "Release title",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "gitHubConnection"
              ]
            },
            "task": {
              "description": "GitHub Release\n\nCreate, edit, or delete a GitHub release",
              "ignoreCase": "value",
              "pattern": "^GitHubRelease@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "GitHub Release inputs",
              "properties": {
                "action": {
                  "description": "Action",
                  "enum": [
                    "create",
                    "edit",
                    "delete"
                  ],
                  "ignoreCase": "all"
                },
                "addChangeLog": {
                  "description": "Add changelog",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "assetUploadMode": {
                  "description": "Asset upload mode",
                  "enum": [
                    "delete",
                    "replace"
                  ],
                  "ignoreCase": "all"
                },
                "assets": {
                  "description": "Assets",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "changeLogCompareToRelease": {
                  "description": "Compare to",
                  "enum": [
                    "lastFullRelease",
                    "lastNonDraftRelease",
                    "lastNonDraftReleaseByTag"
                  ],
                  "ignoreCase": "all"
                },
                "changeLogCompareToReleaseTag": {
                  "description": "Release Tag",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "changeLogLabels": {
                  "description": "Categories",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "changeLogType": {
                  "description": "Changelog type",
                  "enum": [
                    "commitBased",
                    "issueBased"
                  ],
                  "ignoreCase": "all"
                },
                "gitHubConnection": {
                  "description": "GitHub connection (OAuth or PAT)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "isDraft": {
                  "description": "Draft release",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "isPreRelease": {
                  "description": "Pre-release",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "releaseNotes": {
                  "description": "Release notes",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "releaseNotesFile": {
                  "description": "Release notes file path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "releaseNotesSource": {
                  "description": "Release notes source",
                  "enum": [
                    "file",
                    "input"
                  ],
                  "ignoreCase": "all"
                },
                "repositoryName": {
                  "description": "Repository",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "tag": {
                  "description": "Tag",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "tagPattern": {
                  "description": "Tag Pattern",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "tagSource": {
                  "description": "Tag source",
                  "enum": [
                    "auto",
                    "manual"
                  ],
                  "ignoreCase": "all"
                },
                "target": {
                  "description": "Target",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "title": {
                  "description": "Release title",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "gitHubConnection"
              ]
            },
            "task": {
              "description": "GitHub Release\n\nCreate, edit, or delete a GitHub release",
              "ignoreCase": "value",
              "pattern": "^GitHubRelease@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "cURL Upload Files inputs",
              "properties": {
                "files": {
                  "description": "Files",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "options": {
                  "description": "Optional Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "password": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "redirectStderr": {
                  "description": "Redirect Standard Error to Standard Out",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "url": {
                  "description": "URL",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "username": {
                  "description": "Username",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "files",
                "url"
              ]
            },
            "task": {
              "description": "cURL Upload Files\n\nUse cURL to upload files with FTP, FTPS, SFTP, HTTP, and more.",
              "ignoreCase": "value",
              "pattern": "^cURLUploader@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "cURL upload files inputs",
              "properties": {
                "authType": {
                  "description": "Authentication Method",
                  "enum": [
                    "ServiceEndpoint",
                    "UserAndPass"
                  ],
                  "ignoreCase": "all"
                },
                "files": {
                  "description": "Files",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "options": {
                  "description": "Optional Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "password": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "redirectStderr": {
                  "description": "Redirect Standard Error to Standard Out",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "remotePath": {
                  "description": "Remote Directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "serviceEndpoint": {
                  "description": "Service Connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "url": {
                  "description": "URL",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "username": {
                  "description": "Username",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "files"
              ]
            },
            "task": {
              "description": "cURL upload files\n\nUse cURL's supported protocols to upload files",
              "ignoreCase": "value",
              "pattern": "^cURLUploader@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Azure App Service Settings inputs",
              "properties": {
                "appName": {
                  "description": "App Service name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "appSettings": {
                  "description": "App settings",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureSubscription": {
                  "aliases": [
                    "ConnectedServiceName"
                  ],
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "connectionStrings": {
                  "description": "Connection Strings",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "generalSettings": {
                  "description": "General settings",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "resourceGroupName": {
                  "description": "Resource group",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "slotName": {
                  "description": "Slot",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "azureSubscription",
                "appName",
                "resourceGroupName"
              ]
            },
            "task": {
              "description": "Azure App Service Settings\n\nUpdate/Add App settings an Azure Web App for Linux or Windows",
              "ignoreCase": "value",
              "pattern": "^AzureAppServiceSettings@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Power Platform Reset Environment inputs",
              "properties": {
                "AppsTemplate": {
                  "description": "Select Dynamics365 apps",
                  "enum": [
                    "D365_Sales",
                    "D365_CustomerService",
                    "D365_FieldService",
                    "D365_ProjectServiceAutomation",
                    "D365_CDSSampleApp"
                  ],
                  "ignoreCase": "all"
                },
                "CurrencyName": {
                  "description": "Currency",
                  "enum": [
                    "XDR",
                    "USD",
                    "XCD",
                    "AED",
                    "AFN",
                    "ALL",
                    "AMD",
                    "ARS",
                    "EUR",
                    "AUD",
                    "AZN",
                    "BAM",
                    "BDT",
                    "BGN",
                    "BHD",
                    "BND",
                    "BOB",
                    "BRL",
                    "BTN",
                    "BWP",
                    "BYN",
                    "BZD",
                    "CAD",
                    "CDF",
                    "CHF",
                    "XOF",
                    "CLP",
                    "XAF",
                    "CNY",
                    "COP",
                    "CRC",
                    "CUP",
                    "CZK",
                    "DJF",
                    "DKK",
                    "DOP",
                    "DZD",
                    "EGP",
                    "ERN",
                    "ETB",
                    "GBP",
                    "GEL",
                    "GTQ",
                    "HKD",
                    "HNL",
                    "HRK",
                    "HTG",
                    "HUF",
                    "IDR",
                    "ILS",
                    "INR",
                    "IQD",
                    "IRR",
                    "ISK",
                    "JMD",
                    "JOD",
                    "JPY",
                    "KES",
                    "KGS",
                    "KHR",
                    "KRW",
                    "KWD",
                    "KZT",
                    "LAK",
                    "LBP",
                    "LKR",
                    "LYD",
                    "MAD",
                    "MDL",
                    "MKD",
                    "MMK",
                    "MNT",
                    "MOP",
                    "MVR",
                    "MXN",
                    "MYR",
                    "NGN",
                    "NIO",
                    "NOK",
                    "NPR",
                    "NZD",
                    "OMR",
                    "PAB",
                    "PEN",
                    "PHP",
                    "PKR",
                    "PLN",
                    "PYG",
                    "QAR",
                    "RON",
                    "RSD",
                    "RUB",
                    "RWF",
                    "SAR",
                    "SEK",
                    "SGD",
                    "SOS",
                    "SYP",
                    "THB",
                    "TJS",
                    "TMT",
                    "TND",
                    "TRY",
                    "TTD",
                    "TWD",
                    "UAH",
                    "UYU",
                    "UZS",
                    "VES",
                    "VND",
                    "YER",
                    "ZAR"
                  ],
                  "ignoreCase": "all"
                },
                "DomainName": {
                  "description": "Domain name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Environment": {
                  "description": "Environment Url",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "FriendlyName": {
                  "description": "Display name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Language": {
                  "description": "Language",
                  "enum": [
                    "1025",
                    "1026",
                    "1027",
                    "1028",
                    "1029",
                    "1030",
                    "1031",
                    "1032",
                    "1033",
                    "1035",
                    "1036",
                    "1037",
                    "1038",
                    "1040",
                    "1041",
                    "1042",
                    "1043",
                    "1044",
                    "1045",
                    "1046",
                    "1048",
                    "1049",
                    "1050",
                    "1051",
                    "1053",
                    "1054",
                    "1055",
                    "1058",
                    "1060",
                    "1061",
                    "1062",
                    "1063",
                    "1066",
                    "1069",
                    "1081",
                    "1086",
                    "1087",
                    "1110",
                    "2052",
                    "2070",
                    "2074",
                    "3076",
                    "3082",
                    "3098"
                  ],
                  "ignoreCase": "all"
                },
                "OverrideDomainName": {
                  "description": "Override Domain Name",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "OverrideFriendlyName": {
                  "description": "Override Friendly Name",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "PowerPlatformEnvironment": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerPlatformSPN": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Purpose": {
                  "description": "Purpose",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "TargetRelease[obsolete]": {
                  "description": "Target Release",
                  "enum": [
                    "Dynamics 365, version 9.0"
                  ],
                  "ignoreCase": "all"
                },
                "WaitForEnvironmentAvailability": {
                  "description": "Wait for Environment Availability (OBSOLETE)",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "authenticationType": {
                  "description": "Authentication type",
                  "enum": [
                    "PowerPlatformEnvironment",
                    "PowerPlatformSPN"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": []
            },
            "task": {
              "description": "Power Platform Reset Environment\n\nPower Platform Reset Environment",
              "ignoreCase": "value",
              "pattern": "^PowerPlatformResetEnvironment@2$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Universal packages inputs",
              "properties": {
                "command": {
                  "description": "Command",
                  "enum": [
                    "download",
                    "publish"
                  ],
                  "ignoreCase": "all"
                },
                "downloadDirectory": {
                  "aliases": [
                    "downloadDirectory"
                  ],
                  "description": "Destination directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "externalFeedCredentials": {
                  "aliases": [
                    "externalEndpoint"
                  ],
                  "description": "organization/collection connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "feedDownloadExternal": {
                  "description": "Feed (or Project/Feed if the feed was created in a project)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "feedPublishExternal": {
                  "description": "Feed (or Project/Feed if the feed was created in a project)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "feedsToUse": {
                  "aliases": [
                    "internalOrExternalDownload"
                  ],
                  "description": "Feed location",
                  "enum": [
                    "internal",
                    "external"
                  ],
                  "ignoreCase": "all"
                },
                "feedsToUsePublish": {
                  "aliases": [
                    "internalOrExternalPublish"
                  ],
                  "description": "Feed location",
                  "enum": [
                    "internal",
                    "external"
                  ],
                  "ignoreCase": "all"
                },
                "packageDownloadExternal": {
                  "description": "Package name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "packagePublishDescription": {
                  "description": "Description",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "packagePublishExternal": {
                  "description": "Package name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "publishDirectory": {
                  "aliases": [
                    "publishDirectory"
                  ],
                  "description": "Path to file(s) to publish",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "publishFeedCredentials": {
                  "aliases": [
                    "externalEndpoints"
                  ],
                  "description": "organization/collection connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "publishPackageMetadata": {
                  "description": "Publish pipeline metadata",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "publishedPackageVar": {
                  "description": "Package Output Variable",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "verbosity": {
                  "description": "Verbosity",
                  "enum": [
                    "None",
                    "Trace",
                    "Debug",
                    "Information",
                    "Warning",
                    "Error",
                    "Critical"
                  ],
                  "ignoreCase": "all"
                },
                "versionDownloadExternal": {
                  "description": "Version",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "versionOption": {
                  "aliases": [
                    "versionPublishSelector"
                  ],
                  "description": "Version",
                  "enum": [
                    "major",
                    "minor",
                    "patch",
                    "custom"
                  ],
                  "ignoreCase": "all"
                },
                "versionPublish": {
                  "description": "Custom version",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "vstsFeed": {
                  "aliases": [
                    "feedListDownload"
                  ],
                  "description": "Feed",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "vstsFeedPackage": {
                  "aliases": [
                    "packageListDownload"
                  ],
                  "description": "Package name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "vstsFeedPackagePublish": {
                  "aliases": [
                    "packageListPublish"
                  ],
                  "description": "Package name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "vstsFeedPublish": {
                  "aliases": [
                    "feedListPublish"
                  ],
                  "description": "Destination Feed",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "vstsPackageVersion": {
                  "aliases": [
                    "versionListDownload"
                  ],
                  "description": "Version",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Universal packages\n\nDownload or publish Universal Packages",
              "ignoreCase": "value",
              "pattern": "^UniversalPackages@0$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Check Azure Policy compliance inputs",
              "properties": {
                "ResourceGroupName": {
                  "description": "Resource group",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Resources": {
                  "description": "Resource name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureSubscription": {
                  "aliases": [
                    "ConnectedServiceName"
                  ],
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "azureSubscription"
              ]
            },
            "task": {
              "description": "Check Azure Policy compliance\n\nSecurity and compliance assessment for Azure Policy",
              "ignoreCase": "value",
              "pattern": "^AzurePolicyCheckGate@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Azure Function on Kubernetes inputs",
              "properties": {
                "appName": {
                  "description": "Application Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "arguments": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "dockerHubNamespace": {
                  "description": "Docker Hub namespace",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "dockerRegistryServiceConnection": {
                  "description": "Docker registry service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "functionRootDirectory": {
                  "description": "Function root directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "kubernetesServiceConnection": {
                  "description": "Kubernetes service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "namespace": {
                  "description": "Kubernetes namespace",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "secretName": {
                  "description": "Secret Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "waitForStability": {
                  "description": "Wait for stability",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": [
                "dockerRegistryServiceConnection",
                "kubernetesServiceConnection",
                "appName"
              ]
            },
            "task": {
              "description": "Azure Function on Kubernetes\n\nDeploy Azure function to Kubernetes cluster.",
              "ignoreCase": "value",
              "pattern": "^AzureFunctionOnKubernetes@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Azure Function on Kubernetes inputs",
              "properties": {
                "appName": {
                  "description": "Application Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "arguments": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureResourceGroup": {
                  "description": "Resource group",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "azureSubscriptionConnection": {
                  "aliases": [
                    "azureSubscriptionEndpoint"
                  ],
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "connectionType": {
                  "description": "Service connection type",
                  "enum": [
                    "Azure Resource Manager",
                    "Kubernetes Service Connection"
                  ],
                  "ignoreCase": "all"
                },
                "dockerHubNamespace": {
                  "description": "Docker Hub namespace",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "dockerRegistryServiceConnection": {
                  "description": "Docker registry service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "functionRootDirectory": {
                  "description": "Function root directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "kubernetesCluster": {
                  "description": "Kubernetes cluster",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "kubernetesServiceConnection": {
                  "aliases": [
                    "kubernetesServiceEndpoint"
                  ],
                  "description": "Kubernetes service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "namespace": {
                  "description": "Kubernetes namespace",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "secretName": {
                  "description": "Secret Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "waitForStability": {
                  "description": "Wait for stability",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": [
                "dockerRegistryServiceConnection",
                "appName"
              ]
            },
            "task": {
              "description": "Azure Function on Kubernetes\n\nDeploy Azure function to Kubernetes cluster.",
              "ignoreCase": "value",
              "pattern": "^AzureFunctionOnKubernetes@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Windows Service Manager inputs",
              "properties": {
                "AdminLogin": {
                  "description": "Admin Login",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ArtifactPath": {
                  "description": "Artifact Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "CleanInstall": {
                  "description": "Clean Install",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "DeploymentType": {
                  "description": "Deployment Type",
                  "enum": [
                    "Agent",
                    "DeploymentGroup"
                  ],
                  "ignoreCase": "all"
                },
                "Machines": {
                  "description": "Machines",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Password": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ServiceName": {
                  "description": "Service Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "StopProcess": {
                  "description": "Stop Process",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "TimeOut": {
                  "description": "Timeout",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "ServiceName",
                "ArtifactPath"
              ]
            },
            "task": {
              "description": "Windows Service Manager\n\nDeploys a Windows Service to an Agent or a Deployment Group Target using WinRM.",
              "ignoreCase": "value",
              "pattern": "^WindowsServiceManager@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Windows Service Manager inputs",
              "properties": {
                "AdminLogin": {
                  "description": "Admin Login",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ArtifactPath": {
                  "description": "Artifact Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "CleanInstall": {
                  "description": "Clean Install",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "DeploymentType": {
                  "description": "Deployment Type",
                  "enum": [
                    "Agent",
                    "DeploymentGroup"
                  ],
                  "ignoreCase": "all"
                },
                "InstallArguments": {
                  "description": "Install Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "InstallService": {
                  "description": "Install Service",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "InstallTopShelfService": {
                  "description": "Install as a TopShelf service",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "InstallationPath": {
                  "description": "Installation Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "InstanceName": {
                  "description": "Instance Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Machines": {
                  "description": "Machines",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "NewPsSessionOptionArguments": {
                  "description": "Session Option parameters",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Password": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "RunAsPassword": {
                  "description": "Run As Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "RunAsUsername": {
                  "description": "Run As Username",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ServiceName": {
                  "description": "Service Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "StartService": {
                  "description": "Start Service",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "StopProcess": {
                  "description": "Stop Process",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "TimeOut": {
                  "description": "Timeout",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "UseSSL": {
                  "description": "Use SSL",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": [
                "ServiceName",
                "ArtifactPath"
              ]
            },
            "task": {
              "description": "Windows Service Manager\n\nDeploys a Windows Service to an Agent or a Deployment Group Target using WinRM.",
              "ignoreCase": "value",
              "pattern": "^WindowsServiceManager@4$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Windows Service Manager inputs",
              "properties": {
                "AdminLogin": {
                  "description": "Admin Login",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ArtifactPath": {
                  "description": "Artifact Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "CleanInstall": {
                  "description": "Clean Install",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "DeploymentType": {
                  "description": "Deployment Type",
                  "enum": [
                    "Agent",
                    "DeploymentGroup"
                  ],
                  "ignoreCase": "all"
                },
                "InstallService": {
                  "description": "Install the windows service",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "InstallationPath": {
                  "description": "Installation Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Machines": {
                  "description": "Machines",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Password": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "RunAsPassword": {
                  "description": "Run As Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "RunAsUsername": {
                  "description": "Run As Username",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ServiceName": {
                  "description": "Service Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "StopProcess": {
                  "description": "Stop Process",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "TimeOut": {
                  "description": "Timeout",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "ServiceName",
                "ArtifactPath"
              ]
            },
            "task": {
              "description": "Windows Service Manager\n\nDeploys a Windows Service to an Agent or a Deployment Group Target using WinRM.",
              "ignoreCase": "value",
              "pattern": "^WindowsServiceManager@3$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Windows Service Manager inputs",
              "properties": {
                "AdminLogin": {
                  "description": "Admin Login",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ArtifactPath": {
                  "description": "Artifact Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "CleanInstall": {
                  "description": "Clean Install",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "DeploymentType": {
                  "description": "Deployment Type",
                  "enum": [
                    "Agent",
                    "DeploymentGroup"
                  ],
                  "ignoreCase": "all"
                },
                "Machines": {
                  "description": "Machines",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Password": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ServiceName": {
                  "description": "Service Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "StopProcess": {
                  "description": "Stop Process",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "TimeOut": {
                  "description": "Timeout",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "ServiceName",
                "ArtifactPath"
              ]
            },
            "task": {
              "description": "Windows Service Manager\n\nDeploys a Windows Service with an Agent or a Deployment Group Target.",
              "ignoreCase": "value",
              "pattern": "^WindowsServiceManager@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Backup SQL Database inputs",
              "properties": {
                "backupCompression": {
                  "description": "Backup Compression",
                  "enum": [
                    "Default",
                    "Compress",
                    "NoCompress"
                  ],
                  "ignoreCase": "all"
                },
                "backupFile": {
                  "description": "Backup file name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "backupType": {
                  "description": "Backup Type",
                  "enum": [
                    "Full",
                    "Log",
                    "Differential"
                  ],
                  "ignoreCase": "all"
                },
                "checkIfDatabaseExists": {
                  "description": "Check if database exists",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "copyOnly": {
                  "description": "Copy-only backup",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "databaseName": {
                  "description": "Database Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "queryTimeout": {
                  "description": "Query timeout in seconds",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "serverName": {
                  "description": "Server Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "userName": {
                  "description": "SQL Server Login",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "userPassword": {
                  "description": "SQL Server Authentication password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "withInit": {
                  "description": "Overwrite backup file",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": [
                "serverName",
                "databaseName",
                "backupFile"
              ]
            },
            "task": {
              "description": "Backup SQL Database\n\nBackup a SQL Server database",
              "ignoreCase": "value",
              "pattern": "^SqlBackup@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Bash inputs",
              "properties": {
                "arguments": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "bashEnvValue": {
                  "description": "Set value for BASH_ENV environment variable",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "failOnStderr": {
                  "description": "Fail on Standard Error",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "filePath": {
                  "description": "Script Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "script": {
                  "description": "Script",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "targetType": {
                  "description": "Type",
                  "enum": [
                    "filePath",
                    "inline"
                  ],
                  "ignoreCase": "all"
                },
                "workingDirectory": {
                  "description": "Working Directory",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Bash\n\nRun a Bash script on macOS, Linux, or Windows",
              "ignoreCase": "value",
              "pattern": "^Bash@3$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Shell script inputs",
              "properties": {
                "args": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "cwd": {
                  "description": "Working Directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "disableAutoCwd": {
                  "description": "Specify Working Directory",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "failOnStandardError": {
                  "description": "Fail on Standard Error",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "scriptPath": {
                  "description": "Script Path",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "scriptPath"
              ]
            },
            "task": {
              "description": "Shell script\n\nRun a shell script using Bash",
              "ignoreCase": "value",
              "pattern": "^ShellScript@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Publish build artifacts inputs",
              "properties": {
                "ArtifactName": {
                  "description": "Artifact name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "FileCopyOptions": {
                  "description": "File copy options",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Parallel": {
                  "description": "Parallel copy",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "ParallelCount": {
                  "description": "Parallel count",
                  "ignoreCase": "key",
                  "type": "integer"
                },
                "PathtoPublish": {
                  "description": "Path to publish",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "StoreAsTar": {
                  "description": "Tar the artifact before uploading",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "TargetPath": {
                  "description": "File share path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "publishLocation": {
                  "aliases": [
                    "ArtifactType"
                  ],
                  "description": "Artifact publish location",
                  "enum": [
                    "Container",
                    "FilePath"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": []
            },
            "task": {
              "description": "Publish build artifacts\n\nPublish build artifacts to Azure Pipelines or a Windows file share",
              "ignoreCase": "value",
              "pattern": "^PublishBuildArtifacts@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Install SSH key inputs",
              "properties": {
                "addEntryToConfig": {
                  "description": "Add entry to SSH config",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "configHostAlias": {
                  "description": "Alias",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "configHostname": {
                  "description": "Host name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "configPort": {
                  "description": "Port",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "configUser": {
                  "description": "User",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "knownHostsEntry": {
                  "aliases": [
                    "hostName"
                  ],
                  "description": "Known Hosts Entry",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sshKeySecureFile": {
                  "description": "SSH Key",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sshPassphrase": {
                  "description": "SSH Passphrase",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "sshPublicKey": {
                  "description": "SSH Public Key",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "knownHostsEntry",
                "sshKeySecureFile"
              ]
            },
            "task": {
              "description": "Install SSH key\n\nInstall an SSH key prior to a build or deployment",
              "ignoreCase": "value",
              "pattern": "^InstallSSHKey@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Azure VM scale set deployment inputs",
              "properties": {
                "action": {
                  "description": "Action",
                  "enum": [
                    "Update image",
                    "Configure application startup"
                  ],
                  "ignoreCase": "all"
                },
                "azureSubscription": {
                  "aliases": [
                    "ConnectedServiceName"
                  ],
                  "description": "Azure subscription",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "customScript": {
                  "description": "Command",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "customScriptArguments": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "customScriptsDirectory": {
                  "description": "Custom script directory",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "customScriptsStorageAccount": {
                  "description": "Azure storage account where custom scripts will be uploaded",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "imageUrl": {
                  "description": "Image URL",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "skipArchivingCustomScripts": {
                  "description": "Skip Archiving custom scripts",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "vmssName": {
                  "description": "Virtual Machine scale set name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "vmssOsType": {
                  "description": "OS type",
                  "enum": [
                    "Windows",
                    "Linux"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": [
                "azureSubscription",
                "vmssName",
                "vmssOsType",
                "imageUrl"
              ]
            },
            "task": {
              "description": "Azure VM scale set deployment\n\nDeploy a virtual machine scale set image",
              "ignoreCase": "value",
              "pattern": "^AzureVmssDeployment@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "deprecationMessage": "AzureWebPowerShellDeployment is deprecated - Create or update Azure App Service using Azure PowerShell",
          "doNotSuggest": true,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Azure App Service: Classic (Deprecated) inputs",
              "properties": {
                "AdditionalArguments": {
                  "description": "Additional Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ConnectedServiceName": {
                  "description": "Azure Subscription (Classic)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Package": {
                  "description": "Web Deploy Package",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Slot": {
                  "description": "Slot",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "WebSiteLocation": {
                  "description": "Web App Location",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "WebSiteName": {
                  "description": "Web App Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "doNotDelete": {
                  "description": "Set DoNotDelete flag",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": [
                "ConnectedServiceName",
                "WebSiteLocation",
                "WebSiteName",
                "Package"
              ]
            },
            "task": {
              "description": "Azure App Service: Classic (Deprecated)\n\nCreate or update Azure App Service using Azure PowerShell",
              "ignoreCase": "value",
              "pattern": "^AzureWebPowerShellDeployment@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Azure Cloud Service deployment inputs",
              "properties": {
                "ARMConnectedServiceName": {
                  "description": "Azure subscription (ARM)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ARMStorageAccount": {
                  "description": "Storage account (ARM)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AllowUpgrade": {
                  "description": "Allow upgrade",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "AppendDateTimeToLabel": {
                  "description": "Append current date and time",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "CsCfg": {
                  "description": "CsCfg",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "CsPkg": {
                  "description": "CsPkg",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "DeploymentLabel": {
                  "description": "Deployment label",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "DiagnosticStorageAccountKeys": {
                  "description": "Diagnostic storage account keys",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "EnableAdvancedStorageOptions": {
                  "description": "Enable ARM storage support",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "ForceUpgrade": {
                  "description": "Force upgrade",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "NewServiceAdditionalArguments": {
                  "description": "Additional arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "NewServiceAffinityGroup": {
                  "description": "Affinity group",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "NewServiceCustomCertificates": {
                  "description": "Custom certificates to import",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ServiceLocation": {
                  "description": "Service location",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ServiceName": {
                  "description": "Service name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SimultaneousUpgrade": {
                  "description": "Simultaneous upgrade",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "StorageAccount": {
                  "description": "Storage account (Classic)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "VerifyRoleInstanceStatus": {
                  "description": "Verify role instance status",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "azureClassicSubscription": {
                  "aliases": [
                    "ConnectedServiceName"
                  ],
                  "description": "Azure subscription (Classic)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "slotName": {
                  "aliases": [
                    "Slot"
                  ],
                  "description": "Environment (Slot)",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "azureClassicSubscription",
                "ServiceName",
                "ServiceLocation",
                "CsPkg",
                "CsCfg"
              ]
            },
            "task": {
              "description": "Azure Cloud Service deployment\n\nDeploy an Azure Cloud Service",
              "ignoreCase": "value",
              "pattern": "^AzureCloudPowerShellDeployment@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Cargo authenticate (for task runners) inputs",
              "properties": {
                "cargoServiceConnections": {
                  "description": "Credentials for registries outside this organization/collection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "configFile": {
                  "description": "config.toml file to authenticate",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "configFile"
              ]
            },
            "task": {
              "description": "Cargo authenticate (for task runners)\n\nAuthentication task for the cargo client used for installing Cargo crates distribution",
              "ignoreCase": "value",
              "pattern": "^CargoAuthenticate@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "BTDF - Deploy inputs",
              "properties": {
                "BTDeployMgmtDB": {
                  "description": "Deploy Mgmt DB",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "Environment": {
                  "description": "Environment",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Name": {
                  "description": "Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SkipUndeploy": {
                  "description": "Skip Undeploy",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": [
                "Name",
                "Environment"
              ]
            },
            "task": {
              "description": "BTDF - Deploy\n\nDeployment Framework for BizTalk btdfproj project target: Deploy",
              "ignoreCase": "value",
              "pattern": "^BTDFDeploy@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "BTDF - Deploy inputs",
              "properties": {
                "BTDeployMgmtDB": {
                  "description": "Deploy Mgmt DB",
                  "enum": [
                    "true",
                    "false"
                  ],
                  "ignoreCase": "all"
                },
                "Destination": {
                  "description": "Destination",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Environment": {
                  "description": "Environment",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Name": {
                  "description": "Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "SkipUndeploy": {
                  "description": "Skip Undeploy",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": [
                "Name"
              ]
            },
            "task": {
              "description": "BTDF - Deploy\n\nDeployment Framework for BizTalk btdfproj project target: Deploy",
              "ignoreCase": "value",
              "pattern": "^BTDFDeploy@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Delete files inputs",
              "properties": {
                "Contents": {
                  "description": "Contents",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "RemoveDotFiles": {
                  "description": "Remove files starting with a dot",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "RemoveSourceFolder": {
                  "description": "Remove SourceFolder",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "SourceFolder": {
                  "description": "Source Folder",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "Delete files\n\nDelete folders, or files matching a pattern",
              "ignoreCase": "value",
              "pattern": "^DeleteFiles@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Power Platform Assign User inputs",
              "properties": {
                "ApplicationUser": {
                  "description": "Application User",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "BusinessUnit": {
                  "description": "Business Unit",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Environment": {
                  "description": "Environment",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerPlatformEnvironment": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PowerPlatformSPN": {
                  "description": "Service connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Role": {
                  "description": "Role",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "User": {
                  "description": "User",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "authenticationType": {
                  "description": "Authentication type",
                  "enum": [
                    "PowerPlatformEnvironment",
                    "PowerPlatformSPN"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": [
                "User",
                "Role"
              ]
            },
            "task": {
              "description": "Power Platform Assign User\n\nAssign a user to a target environment with specified security role.",
              "ignoreCase": "value",
              "pattern": "^PowerPlatformAssignUser@2$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "gulp inputs",
              "properties": {
                "arguments": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "enableCodeCoverage": {
                  "description": "Enable code Coverage",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "gulpFile": {
                  "description": "gulp File Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "gulpjs": {
                  "description": "gulp.js location",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "publishJUnitResults": {
                  "description": "Publish to Azure Pipelines",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "srcFiles": {
                  "description": "Source Files",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "targets": {
                  "description": "gulp Task(s)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testFiles": {
                  "description": "Test Script Files",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testFramework": {
                  "description": "Test Framework",
                  "enum": [
                    "Mocha",
                    "Jasmine"
                  ],
                  "ignoreCase": "all"
                },
                "testResultsFiles": {
                  "description": "Test Results Files",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testRunTitle": {
                  "description": "Test Run Title",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "workingDirectory": {
                  "aliases": [
                    "cwd"
                  ],
                  "description": "Working Directory",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "gulp\n\nRun the gulp Node.js streaming task-based build system",
              "ignoreCase": "value",
              "pattern": "^gulp@0$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "gulp inputs",
              "properties": {
                "arguments": {
                  "description": "Arguments",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "enableCodeCoverage": {
                  "description": "Enable code Coverage",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "gulpFile": {
                  "description": "gulp File Path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "gulpjs": {
                  "description": "gulp.js location",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "publishJUnitResults": {
                  "description": "Publish to Azure Pipelines",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "srcFiles": {
                  "description": "Source Files",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "targets": {
                  "description": "gulp Task(s)",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testFiles": {
                  "description": "Test Script Files",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testFramework": {
                  "description": "Test Framework",
                  "enum": [
                    "Mocha",
                    "Jasmine"
                  ],
                  "ignoreCase": "all"
                },
                "testResultsFiles": {
                  "description": "Test Results Files",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "testRunTitle": {
                  "description": "Test Run Title",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "workingDirectory": {
                  "aliases": [
                    "cwd"
                  ],
                  "description": "Working Directory",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": []
            },
            "task": {
              "description": "gulp\n\nRun the gulp Node.js streaming task-based build system",
              "ignoreCase": "value",
              "pattern": "^gulp@1$"
            }
          },
          "required": [
            "task"
          ]
        },
        {
          "deprecationMessage": "QuickPerfTest is deprecated - Run a quick web performance test in the cloud with Azure Pipelines",
          "doNotSuggest": true,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Cloud-based web performance test inputs",
              "properties": {
                "avgResponseTimeThreshold": {
                  "description": "Fail test if Avg.Response Time(ms) exceeds",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "connectedServiceName": {
                  "description": "Azure Pipelines Connection",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "geoLocation": {
                  "description": "Load Location",
                  "enum": [
                    "Default",
                    "Australia East",
                    "Australia Southeast",
                    "Brazil South",
                    "Central India",
                    "Central US",
                    "East Asia",
                    "East US 2",
                    "East US",
                    "Japan East",
                    "Japan West",
                    "North Central US",
                    "North Europe",
                    "South Central US",
                    "South India",
                    "Southeast Asia",
                    "West Europe",
                    "West US"
                  ],
                  "ignoreCase": "all"
                },
                "machineType": {
                  "description": "Run load test using",
                  "enum": [
                    "0",
                    "2"
                  ],
                  "ignoreCase": "all"
                },
                "numOfSelfProvisionedAgents": {
                  "description": "No. of agents to use",
                  "ignoreCase": "key",
                  "type": "integer"
                },
                "resourceGroupName": {
                  "description": "Resource group rig",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "runDuration": {
                  "description": "Run Duration (sec)",
                  "enum": [
                    "60",
                    "120",
                    "180",
                    "240",
                    "300"
                  ],
                  "ignoreCase": "all"
                },
                "testName": {
                  "description": "Test Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "vuLoad": {
                  "description": "User Load",
                  "enum": [
                    "25",
                    "50",
                    "100",
                    "250"
                  ],
                  "ignoreCase": "all"
                },
                "websiteUrl": {
                  "description": "Website URL",
                  "ignoreCase": "key",
                  "type": "string"
                }
              },
              "required": [
                "websiteUrl",
                "testName"
              ]
            },
            "task": {
              "description": "Cloud-based web performance test\n\nRun a quick web performance test in the cloud with Azure Pipelines",
              "ignoreCase": "value",
              "pattern": "^QuickPerfTest@1$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "IIS web app manage inputs",
              "properties": {
                "ActionIISApplicationPool": {
                  "description": "Action",
                  "enum": [
                    "CreateOrUpdateAppPool",
                    "StartAppPool",
                    "StopAppPool",
                    "RecycleAppPool"
                  ],
                  "ignoreCase": "all"
                },
                "ActionIISWebsite": {
                  "description": "Action",
                  "enum": [
                    "CreateOrUpdateWebsite",
                    "StartWebsite",
                    "StopWebsite"
                  ],
                  "ignoreCase": "all"
                },
                "AddBinding": {
                  "description": "Add binding",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "AnonymousAuthenticationForWebsite": {
                  "description": "Anonymous authentication",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "AppCmdCommands": {
                  "description": "Additional appcmd.exe commands",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AppPoolIdentity": {
                  "description": "Identity",
                  "enum": [
                    "ApplicationPoolIdentity",
                    "LocalService",
                    "LocalSystem",
                    "NetworkService",
                    "SpecificUser"
                  ],
                  "ignoreCase": "all"
                },
                "AppPoolIdentityForApplication": {
                  "description": "Identity",
                  "enum": [
                    "ApplicationPoolIdentity",
                    "LocalService",
                    "LocalSystem",
                    "NetworkService",
                    "SpecificUser"
                  ],
                  "ignoreCase": "all"
                },
                "AppPoolIdentityForWebsite": {
                  "description": "Identity",
                  "enum": [
                    "ApplicationPoolIdentity",
                    "LocalService",
                    "LocalSystem",
                    "NetworkService",
                    "SpecificUser"
                  ],
                  "ignoreCase": "all"
                },
                "AppPoolName": {
                  "description": "Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AppPoolNameForApplication": {
                  "description": "Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AppPoolNameForWebsite": {
                  "description": "Name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AppPoolPassword": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AppPoolPasswordForApplication": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AppPoolPasswordForWebsite": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AppPoolUsername": {
                  "description": "Username",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AppPoolUsernameForApplication": {
                  "description": "Username",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "AppPoolUsernameForWebsite": {
                  "description": "Username",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ApplicationAuthUserName": {
                  "description": "Username",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ApplicationAuthUserPassword": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ApplicationPhysicalPathAuth": {
                  "description": "Physical path authentication",
                  "enum": [
                    "ApplicationUserPassThrough",
                    "ApplicationWindowsAuth"
                  ],
                  "ignoreCase": "all"
                },
                "BasicAuthenticationForWebsite": {
                  "description": "Basic authentication",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "Bindings": {
                  "description": "Add bindings",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ConfigureAuthenticationForWebsite": {
                  "description": "Configure authentication",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "CreateOrUpdateAppPoolForApplication": {
                  "description": "Create or update app pool",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "CreateOrUpdateAppPoolForWebsite": {
                  "description": "Create or update app pool",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "DotNetVersion": {
                  "description": ".NET version",
                  "enum": [
                    "v4.0",
                    "v2.0",
                    "No Managed Code"
                  ],
                  "ignoreCase": "all"
                },
                "DotNetVersionForApplication": {
                  "description": ".NET version",
                  "enum": [
                    "v4.0",
                    "v2.0",
                    "No Managed Code"
                  ],
                  "ignoreCase": "all"
                },
                "DotNetVersionForWebsite": {
                  "description": ".NET version",
                  "enum": [
                    "v4.0",
                    "v2.0",
                    "No Managed Code"
                  ],
                  "ignoreCase": "all"
                },
                "EnableIIS": {
                  "description": "Enable IIS",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "HostNameWithHttp": {
                  "description": "Host name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "HostNameWithOutSNI": {
                  "description": "Host name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "HostNameWithSNI": {
                  "description": "Host name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "IISDeploymentType": {
                  "description": "Configuration type",
                  "enum": [
                    "IISWebsite",
                    "IISWebApplication",
                    "IISVirtualDirectory",
                    "IISApplicationPool"
                  ],
                  "ignoreCase": "all"
                },
                "IPAddress": {
                  "description": "IP address",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ParentWebsiteNameForApplication": {
                  "description": "Parent website name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ParentWebsiteNameForVD": {
                  "description": "Parent website name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PhysicalPathForApplication": {
                  "description": "Physical path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PhysicalPathForVD": {
                  "description": "Physical path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "PipeLineMode": {
                  "description": "Managed pipeline mode",
                  "enum": [
                    "Integrated",
                    "Classic"
                  ],
                  "ignoreCase": "all"
                },
                "PipeLineModeForApplication": {
                  "description": "Managed pipeline mode",
                  "enum": [
                    "Integrated",
                    "Classic"
                  ],
                  "ignoreCase": "all"
                },
                "PipeLineModeForWebsite": {
                  "description": "Managed pipeline mode",
                  "enum": [
                    "Integrated",
                    "Classic"
                  ],
                  "ignoreCase": "all"
                },
                "Port": {
                  "description": "Port",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "Protocol": {
                  "description": "Protocol",
                  "enum": [
                    "https",
                    "http"
                  ],
                  "ignoreCase": "all"
                },
                "SSLCertThumbPrint": {
                  "description": "SSL certificate thumbprint",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "ServerNameIndication": {
                  "description": "Server Name Indication required",
                  "ignoreCase": "key",
                  "type": "boolean"
                },
                "StartStopRecycleAppPoolName": {
                  "description": "Application pool name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "StartStopWebsiteName": {
                  "description": "Website name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "VDAuthUserName": {
                  "description": "Username",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "VDAuthUserPassword": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "VDPhysicalPathAuth": {
                  "description": "Physical path authentication",
                  "enum": [
                    "VDUserPassThrough",
                    "VDWindowsAuth"
                  ],
                  "ignoreCase": "all"
                },
                "VirtualPathForApplication": {
                  "description": "Virtual path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "VirtualPathForVD": {
                  "description": "Virtual path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "WebsiteAuthUserName": {
                  "description": "Username",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "WebsiteAuthUserPassword": {
                  "description": "Password",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "WebsiteName": {
                  "description": "Website name",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "WebsitePhysicalPath": {
                  "description": "Physical path",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "WebsitePhysicalPathAuth": {
                  "description": "Physical path authentication",
                  "enum": [
                    "WebsiteUserPassThrough",
                    "WebsiteWindowsAuth"
                  ],
                  "ignoreCase": "all"
                },
                "WindowsAuthenticationForWebsite": {
                  "description": "Windows authentication",
                  "ignoreCase": "key",
                  "type": "boolean"
                }
              },
              "required": [
                "WebsiteName",
                "Bindings",
                "AppPoolNameForWebsite",
                "ParentWebsiteNameForVD",
                "VirtualPathForVD",
                "ParentWebsiteNameForApplication",
                "VirtualPathForApplication",
                "AppPoolNameForApplication",
                "AppPoolName"
              ]
            },
            "task": {
              "description": "IIS web app manage\n\nCreate or update websites, web apps, virtual directories, or application pools",
              "ignoreCase": "value",
              "pattern": "^IISWebAppManagementOnMachineGroup@0$"
            }
          },
          "required": [
            "task",
            "inputs"
          ]
        },
        {
          "doNotSuggest": false,
          "firstProperty": [
            "task"
          ],
          "properties": {
            "inputs": {
              "additionalProperties": false,
              "description": "Docker CLI installer inputs",
              "properties": {
                "dockerVersion": {
                  "description": "Docker Version",
                  "ignoreCase": "key",
                  "type": "string"
                },
                "releaseType": {
                  "description": "Release type",
                  "enum": [
                    "stable",
                    "edge",
                    "test",
                    "nightly"
                  ],
                  "ignoreCase": "all"
                }
              },
              "required": []
            },
            "task": {
              "description": "Docker CLI installer\n\nInstall Docker CLI on agent machine.",
              "ignoreCase": "value",
              "pattern": "^DockerInstaller@0$"
            }
          },
          "required": [
            "task"
          ]
        }
      ],
      "firstProperty": [
        "task"
      ],
      "properties": {
        "condition": {
          "description": "Evaluate this condition expression to determine whether to run this task",
          "type": "string"
        },
        "continueOnError": {
          "description": "Continue running the parent job even on failure?",
          "type": "boolean"
        },
        "displayName": {
          "description": "Human-readable name for the task",
          "type": "string"
        },
        "enabled": {
          "description": "Run this task when the job runs?",
          "type": "string"
        },
        "env": {
          "description": "Variables to map into the process's environment",
          "type": "object"
        },
        "inputs": {
          "description": "Task-specific inputs",
          "type": "object"
        },
        "name": {
          "description": "ID of the task instance",
          "pattern": "^[_A-Za-z0-9]*$",
          "type": "string"
        },
        "retryCountOnTaskFailure": {
          "description": "Number of retries if the task fails",
          "type": "integer"
        },
        "task": {
          "anyOf": [
            {
              "description": "Power Platform Import Solution",
              "doNotSuggest": false,
              "enum": [
                "PowerPlatformImportSolution@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Run a PowerShell script",
              "doNotSuggest": false,
              "enum": [
                "PowerShell@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Run a PowerShell script on Linux, macOS, or Windows",
              "doNotSuggest": false,
              "enum": [
                "PowerShell@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Power Platform Tool Installer; this task is required before any other PowerPlatform.BuildTools tasks in the job",
              "doNotSuggest": false,
              "enum": [
                "PowerPlatformToolInstaller@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Power Platform Backup Environment",
              "doNotSuggest": false,
              "enum": [
                "PowerPlatformBackupEnvironment@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Run a PowerShell script within an Azure environment",
              "doNotSuggest": false,
              "enum": [
                "AzurePowerShell@4"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Run a PowerShell script within an Azure environment",
              "doNotSuggest": false,
              "enum": [
                "AzurePowerShell@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Run a PowerShell script within an Azure environment",
              "doNotSuggest": false,
              "enum": [
                "AzurePowerShell@5"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Run a PowerShell script within an Azure environment",
              "doNotSuggest": false,
              "enum": [
                "AzurePowerShell@3"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Run a PowerShell script within an Azure environment",
              "doNotSuggest": false,
              "enum": [
                "AzurePowerShell@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Run scripts and make changes to a MySQL Database",
              "doNotSuggest": false,
              "enum": [
                "MysqlDeploymentOnMachineGroup@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Authentication task for the pip client used for installing Python distributions",
              "doNotSuggest": false,
              "enum": [
                "PipAuthenticate@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Authentication task for the pip client used for installing Python distributions",
              "doNotSuggest": false,
              "enum": [
                "PipAuthenticate@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Build, test, and deploy with Apache Maven",
              "doNotSuggest": false,
              "enum": [
                "Maven@4"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Build, test, and deploy with Apache Maven",
              "doNotSuggest": false,
              "enum": [
                "Maven@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Build, test, and deploy with Apache Maven",
              "doNotSuggest": false,
              "enum": [
                "Maven@3"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Build with Apache Maven",
              "doNotSuggest": false,
              "enum": [
                "Maven@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Allows you to run a SQL Stored Procedure",
              "doNotSuggest": false,
              "enum": [
                "RunStoredSqlScript@2"
              ],
              "ignoreCase": "value"
            },
            {
              "deprecationMessage": "DotNetCoreCLI is deprecated - Build, test and publish using dotnet core command-line.",
              "description": "Build, test and publish using dotnet core command-line.",
              "doNotSuggest": true,
              "enum": [
                "DotNetCoreCLI@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Build, test, package, or publish a dotnet application, or run a custom dotnet command",
              "doNotSuggest": false,
              "enum": [
                "DotNetCoreCLI@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Build, test and publish using dotnet core command-line.",
              "doNotSuggest": false,
              "enum": [
                "DotNetCoreCLI@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Installs a TopShelf service using the standard command line options for Topshelf 4.0.",
              "doNotSuggest": false,
              "enum": [
                "InstallTopshelfService@8"
              ],
              "ignoreCase": "value"
            },
            {
              "deprecationMessage": "XamarinComponentRestore is deprecated - This task is deprecated. Use 'NuGet' instead.",
              "description": "This task is deprecated. Use 'NuGet' instead.",
              "doNotSuggest": true,
              "enum": [
                "XamarinComponentRestore@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Deploy to Azure App Service a web, mobile, or API app using Docker, Java, .NET, .NET Core, Node.js, PHP, Python, or Ruby",
              "doNotSuggest": false,
              "enum": [
                "AzureRmWebAppDeployment@4"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Update Azure App Service using Web Deploy / Kudu REST APIs",
              "doNotSuggest": false,
              "enum": [
                "AzureRmWebAppDeployment@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Deploy to Azure App Service a web, mobile, or API app using Docker, Java, .NET, .NET Core, Node.js, PHP, Python, or Ruby",
              "doNotSuggest": false,
              "enum": [
                "AzureRmWebAppDeployment@3"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Execute PowerShell scripts on remote machine(s)",
              "doNotSuggest": false,
              "enum": [
                "PowerShellOnTargetMachines@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Execute PowerShell scripts on remote machines using PSSession and Invoke-Command for remoting",
              "doNotSuggest": false,
              "enum": [
                "PowerShellOnTargetMachines@3"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Execute PowerShell scripts on remote machine(s)",
              "doNotSuggest": false,
              "enum": [
                "PowerShellOnTargetMachines@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Publish any of the code coverage results from a build",
              "doNotSuggest": false,
              "enum": [
                "PublishCodeCoverageResults@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Publish Cobertura or JaCoCo code coverage results from a build",
              "doNotSuggest": false,
              "enum": [
                "PublishCodeCoverageResults@1"
              ],
              "ignoreCase": "value"
            },
            {
              "deprecationMessage": "RunVisualStudioTestsusingTestAgent is deprecated - Deprecated: This task and its companion task (Visual Studio Test Agent Deployment) are deprecated. Use the 'Visual Studio Test' task instead. The VSTest task can run unit as well as functional tests. Run tests on one or more agents using the multi-agent job setting. Use the 'Visual Studio Test Platform' task to run tests without needing Visual Studio on the agent. VSTest task also brings new capabilities such as automatically rerunning failed tests.",
              "description": "Deprecated: This task and its companion task (Visual Studio Test Agent Deployment) are deprecated. Use the 'Visual Studio Test' task instead. The VSTest task can run unit as well as functional tests. Run tests on one or more agents using the multi-agent job setting. Use the 'Visual Studio Test Platform' task to run tests without needing Visual Studio on the agent. VSTest task also brings new capabilities such as automatically rerunning failed tests.",
              "doNotSuggest": true,
              "enum": [
                "RunVisualStudioTestsusingTestAgent@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Deploy single or multiple ispac files to on-premise SSIS catalog and Azure-SSIS IR, or SSISDeploymentManifest files and their associated files to on-premise or Azure file share.",
              "doNotSuggest": false,
              "enum": [
                "SSISDeploy@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Deploy single or multiple ispac files to on-premise SSIS catalog and Azure-SSIS IR, or SSISDeploymentManifest files and their associated files to on-premise or Azure file share.",
              "doNotSuggest": false,
              "enum": [
                "SSISDeploy@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Pause deployment and wait for manual intervention",
              "doNotSuggest": false,
              "enum": [
                "ManualIntervention@8"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Power Platform Apply Solution Upgrade",
              "doNotSuggest": false,
              "enum": [
                "PowerPlatformApplySolutionUpgrade@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Install an Apple provisioning profile required to build on a macOS agent",
              "doNotSuggest": false,
              "enum": [
                "InstallAppleProvisioningProfile@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Install an Apple provisioning profile required to build on a macOS agent machine",
              "doNotSuggest": false,
              "enum": [
                "InstallAppleProvisioningProfile@1"
              ],
              "ignoreCase": "value"
            },
            {
              "deprecationMessage": "SonarQubePostTest is deprecated - [DEPRECATED] Finish the analysis and upload the results to SonarQube",
              "description": "[DEPRECATED] Finish the analysis and upload the results to SonarQube",
              "doNotSuggest": true,
              "enum": [
                "SonarQubePostTest@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Power Platform Copy Environment",
              "doNotSuggest": false,
              "enum": [
                "PowerPlatformCopyEnvironment@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Create and upload an sdist or wheel to a PyPI-compatible index using Twine",
              "doNotSuggest": false,
              "enum": [
                "PyPIPublisher@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Power Platform Create Environment",
              "doNotSuggest": false,
              "enum": [
                "PowerPlatformCreateEnvironment@2"
              ],
              "ignoreCase": "value"
            },
            {
              "deprecationMessage": "ChefKnife is deprecated - Run scripts with Knife commands on your Chef workstation",
              "description": "Run scripts with Knife commands on your Chef workstation",
              "doNotSuggest": true,
              "enum": [
                "ChefKnife@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Replace tokens in files",
              "doNotSuggest": false,
              "enum": [
                "replacetokens@4"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Replace tokens in files",
              "doNotSuggest": false,
              "enum": [
                "replacetokens@3"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Replace tokens in files",
              "doNotSuggest": false,
              "enum": [
                "replacetokens@5"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Find in cache or download a specific version of Go and add it to the PATH",
              "doNotSuggest": false,
              "enum": [
                "GoTool@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Configure folders, projects and environments of SSIS catalog based on a JSON configuration file or inline string.",
              "doNotSuggest": false,
              "enum": [
                "SSISCatalog@0"
              ],
              "ignoreCase": "value"
            },
            {
              "deprecationMessage": "XcodePackageiOS is deprecated - Generate an .ipa file from Xcode build output using xcrun (Xcode 7 or below)",
              "description": "Generate an .ipa file from Xcode build output using xcrun (Xcode 7 or below)",
              "doNotSuggest": true,
              "enum": [
                "XcodePackageiOS@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Get, build, or test a Go application, or run a custom Go command",
              "doNotSuggest": false,
              "enum": [
                "Go@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Execute terraform commands to manage resources on AzureRM, Amazon Web Services(AWS) and Google Cloud Platform(GCP)",
              "doNotSuggest": false,
              "enum": [
                "TerraformTaskV1@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Execute terraform commands to manage resources on AzureRM, Amazon Web Services(AWS) and Google Cloud Platform(GCP)",
              "doNotSuggest": false,
              "enum": [
                "TerraformTaskV3@3"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Execute terraform commands to manage resources on AzureRM, Amazon Web Services(AWS) and Google Cloud Platform(GCP)",
              "doNotSuggest": false,
              "enum": [
                "TerraformTaskV2@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Execute terraform commands to manage resources on AzureRM, Amazon Web Services(AWS) and Google Cloud Platform(GCP)",
              "doNotSuggest": false,
              "enum": [
                "TerraformTaskV4@4"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Publish Pipeline Metadata to Evidence store",
              "doNotSuggest": false,
              "enum": [
                "PublishPipelineMetadata@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Build, tag, push, or run Docker images, or run a Docker command",
              "doNotSuggest": false,
              "enum": [
                "Docker@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Build or push Docker images, login or logout, start or stop containers, or run a Docker command",
              "doNotSuggest": false,
              "enum": [
                "Docker@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Build, tag, push, or run Docker images, or run a Docker command",
              "doNotSuggest": false,
              "enum": [
                "Docker@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Queue a job on a Jenkins server",
              "doNotSuggest": false,
              "enum": [
                "JenkinsQueueJob@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Queue a job on a Jenkins server",
              "doNotSuggest": false,
              "enum": [
                "JenkinsQueueJob@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Upload files using FTP",
              "doNotSuggest": false,
              "enum": [
                "FtpUpload@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Upload files using FTP",
              "doNotSuggest": false,
              "enum": [
                "FtpUpload@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Copy files to remote Windows machines",
              "doNotSuggest": false,
              "enum": [
                "WindowsMachineFileCopy@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Copy files to remote Windows machines",
              "doNotSuggest": false,
              "enum": [
                "WindowsMachineFileCopy@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Find in cache or download a specific version of Terraform and prepend it to the PATH",
              "doNotSuggest": false,
              "enum": [
                "TerraformInstaller@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Find in cache or download a specific version of Terraform and prepend it to the PATH",
              "doNotSuggest": false,
              "enum": [
                "TerraformInstaller@1"
              ],
              "ignoreCase": "value"
            },
            {
              "deprecationMessage": "AndroidBuild is deprecated - [Deprecated]  Use Gradle",
              "description": "[Deprecated]  Use Gradle",
              "doNotSuggest": true,
              "enum": [
                "AndroidBuild@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Authenticate for uploading Python distributions using twine. Add '-r FeedName/EndpointName --config-file $(PYPIRC_PATH)' to your twine upload command. For feeds present in this organization, use the feed name as the repository (-r). Otherwise, use the endpoint name defined in the service connection.",
              "doNotSuggest": false,
              "enum": [
                "TwineAuthenticate@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Authenticate for uploading Python distributions using twine. Add '-r FeedName/EndpointName --config-file $(PYPIRC_PATH)' to your twine upload command. For feeds present in this organization, use the feed name as the repository (-r). Otherwise, use the endpoint name defined in the service connection.",
              "doNotSuggest": false,
              "enum": [
                "TwineAuthenticate@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Deploy a website or web application using Web Deploy",
              "doNotSuggest": false,
              "enum": [
                "IISWebAppDeploymentOnMachineGroup@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Run a Python file or inline script",
              "doNotSuggest": false,
              "enum": [
                "PythonScript@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Install Helm and Kubernetes on an agent machine",
              "doNotSuggest": false,
              "enum": [
                "HelmInstaller@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Install Helm on an agent machine",
              "doNotSuggest": false,
              "enum": [
                "HelmInstaller@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Power Platform Upload PowerPages web site (PAPortal)",
              "doNotSuggest": false,
              "enum": [
                "PowerPlatformUploadPaportal@2"
              ],
              "ignoreCase": "value"
            },
            {
              "deprecationMessage": "XamarinLicense is deprecated - [Deprecated] Upgrade to free version of Xamarin: https://store.xamarin.com",
              "description": "[Deprecated] Upgrade to free version of Xamarin: https://store.xamarin.com",
              "doNotSuggest": true,
              "enum": [
                "XamarinLicense@1"
              ],
              "ignoreCase": "value"
            },
            {
              "deprecationMessage": "NuGetAuthenticate is deprecated - This version of the task is deprecated, use NuGetAuthenticateV1 instead. Configure NuGet tools to authenticate with Azure Artifacts and other NuGet repositories. Requires NuGet >= 4.8.5385, dotnet >= 2.1.400, or MSBuild >= 15.8.166.59604.",
              "description": "This version of the task is deprecated, use NuGetAuthenticateV1 instead. Configure NuGet tools to authenticate with Azure Artifacts and other NuGet repositories. Requires NuGet >= 4.8.5385, dotnet >= 2.1.400, or MSBuild >= 15.8.166.59604.",
              "doNotSuggest": true,
              "enum": [
                "NuGetAuthenticate@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Configure NuGet tools to authenticate with Azure Artifacts and other NuGet repositories. Requires NuGet >= 4.8.5385, dotnet >= 6, or MSBuild >= 15.8.166.59604",
              "doNotSuggest": false,
              "enum": [
                "NuGetAuthenticate@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Allows you to run a SQL Command",
              "doNotSuggest": false,
              "enum": [
                "RunSqlCommand@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Power Platform Set Solution Version",
              "doNotSuggest": false,
              "enum": [
                "PowerPlatformSetSolutionVersion@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Restore your nuget packages using dotnet CLI",
              "doNotSuggest": false,
              "enum": [
                "DownloadGitHubNugetPackage@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Install Power Platform Applications from AppSource",
              "doNotSuggest": false,
              "enum": [
                "PowerPlatformInstallApplication@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Provides credentials for Azure Artifacts feeds and external maven repositories",
              "doNotSuggest": false,
              "enum": [
                "MavenAuthenticate@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Build single or multiple SSIS dtproj files in project deployment model or package deployment model.",
              "doNotSuggest": false,
              "enum": [
                "SSISBuild@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Build single or multiple SSIS dtproj files in project deployment model or package deployment model.",
              "doNotSuggest": false,
              "enum": [
                "SSISBuild@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Use this task under deploy phase provider to create a resource dynamically",
              "doNotSuggest": false,
              "enum": [
                "ReviewApp@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Acquire a specific version of Java from a user-supplied Azure blob or the tool cache and sets JAVA_HOME",
              "doNotSuggest": false,
              "enum": [
                "JavaToolInstaller@0"
              ],
              "ignoreCase": "value"
            },
            {
              "deprecationMessage": "Chef is deprecated - Deploy to Chef environments by editing environment attributes",
              "description": "Deploy to Chef environments by editing environment attributes",
              "doNotSuggest": true,
              "enum": [
                "Chef@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Update a function app with .NET, Python, JavaScript, PowerShell, Java based web applications",
              "doNotSuggest": false,
              "enum": [
                "AzureFunctionApp@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Update a function app with .NET, Python, JavaScript, PowerShell, Java based web applications",
              "doNotSuggest": false,
              "enum": [
                "AzureFunctionApp@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Power Platform Download PowerPages web site (PAPortal)",
              "doNotSuggest": false,
              "enum": [
                "PowerPlatformDownloadPaportal@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Don't use this task if you're also using the npm task. Provides npm credentials to an .npmrc file in your repository for the scope of the build. This enables npm task runners like gulp and Grunt to authenticate with private registries.",
              "doNotSuggest": false,
              "enum": [
                "npmAuthenticate@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Build with MSBuild",
              "doNotSuggest": false,
              "enum": [
                "MSBuild@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Build a machine image using Packer, which may be used for Azure Virtual machine scale set deployment",
              "doNotSuggest": false,
              "enum": [
                "PackerBuild@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Build a machine image using Packer, which may be used for Azure Virtual machine scale set deployment",
              "doNotSuggest": false,
              "enum": [
                "PackerBuild@1"
              ],
              "ignoreCase": "value"
            },
            {
              "deprecationMessage": "NuGetPackager is deprecated - Deprecated: use the NuGet task instead. It works with the new Tool Installer framework so you can easily use new versions of NuGet without waiting for a task update, provides better support for authenticated feeds outside this organization/collection, and uses NuGet 4 by default.",
              "description": "Deprecated: use the NuGet task instead. It works with the new Tool Installer framework so you can easily use new versions of NuGet without waiting for a task update, provides better support for authenticated feeds outside this organization/collection, and uses NuGet 4 by default.",
              "doNotSuggest": true,
              "enum": [
                "NuGetPackager@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Install a specified version of Duffle for installing and managing CNAB bundles",
              "doNotSuggest": false,
              "enum": [
                "DuffleInstaller@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Automatically updates the versions of a packaged Service Fabric application.",
              "doNotSuggest": false,
              "enum": [
                "ServiceFabricUpdateAppVersions@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Automatically update portions of application and service manifests in a packaged Azure Service Fabric application",
              "doNotSuggest": false,
              "enum": [
                "ServiceFabricUpdateManifests@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Observe the configured Azure Monitor rules for active alerts",
              "doNotSuggest": false,
              "enum": [
                "AzureMonitor@1"
              ],
              "ignoreCase": "value"
            },
            {
              "deprecationMessage": "AzureMonitor is deprecated - Observe the configured classic Azure Monitor rules for active alerts",
              "description": "Observe the configured classic Azure Monitor rules for active alerts",
              "doNotSuggest": true,
              "enum": [
                "AzureMonitor@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Connect or disconnect an Azure virtual machine's network interface to a Load Balancer's back end address pool",
              "doNotSuggest": false,
              "enum": [
                "AzureNLBManagement@1"
              ],
              "ignoreCase": "value"
            },
            {
              "deprecationMessage": "ApacheJMeterLoadTest is deprecated - Run an Apache JMeter load test in the cloud",
              "description": "Run an Apache JMeter load test in the cloud",
              "doNotSuggest": true,
              "enum": [
                "ApacheJMeterLoadTest@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Build, push or run multi-container Docker applications. Task can be used with Docker or Azure Container registry.",
              "doNotSuggest": false,
              "enum": [
                "DockerCompose@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Start a windows service.",
              "doNotSuggest": false,
              "enum": [
                "StartWindowsService@8"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Configure alerts on available metrics for an Azure resource (Deprecated)",
              "doNotSuggest": false,
              "enum": [
                "AzureMonitorAlerts@0"
              ],
              "ignoreCase": "value"
            },
            {
              "deprecationMessage": "XamarinTestCloud is deprecated - [Deprecated] Test mobile apps with Xamarin Test Cloud using Xamarin.UITest. Instead, use the 'App Center test' task.",
              "description": "[Deprecated] Test mobile apps with Xamarin Test Cloud using Xamarin.UITest. Instead, use the 'App Center test' task.",
              "doNotSuggest": true,
              "enum": [
                "XamarinTestCloud@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Build SQL Server Analysis Services Project (Multi dimensional only) into .asdatabase file using devenv.com",
              "doNotSuggest": false,
              "enum": [
                "BuildSsas@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Deploy an Azure Service Fabric application to a cluster",
              "doNotSuggest": false,
              "enum": [
                "ServiceFabricDeploy@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Power Platform Publish Customizations",
              "doNotSuggest": false,
              "enum": [
                "PowerPlatformPublishCustomizations@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Build an Xcode workspace on macOS",
              "doNotSuggest": false,
              "enum": [
                "Xcode@3"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Build, test, or archive an Xcode workspace on macOS. Optionally package an app.",
              "doNotSuggest": false,
              "enum": [
                "Xcode@4"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Build an Xcode workspace on Mac OS",
              "doNotSuggest": false,
              "enum": [
                "Xcode@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Build, test, or archive an Xcode workspace on macOS. Optionally package an app.",
              "doNotSuggest": false,
              "enum": [
                "Xcode@5"
              ],
              "ignoreCase": "value"
            },
            {
              "deprecationMessage": "NuGetPublisher is deprecated - Deprecated: use the NuGet task instead. It works with the new Tool Installer framework so you can easily use new versions of NuGet without waiting for a task update, provides better support for authenticated feeds outside this organization/collection, and uses NuGet 4 by default.",
              "description": "Deprecated: use the NuGet task instead. It works with the new Tool Installer framework so you can easily use new versions of NuGet without waiting for a task update, provides better support for authenticated feeds outside this organization/collection, and uses NuGet 4 by default.",
              "doNotSuggest": true,
              "enum": [
                "NuGetPublisher@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Power Platform import data to environment. Requires Windows build agent",
              "doNotSuggest": false,
              "enum": [
                "PowerPlatformImportData@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Execute a work item query and check the number of items returned",
              "doNotSuggest": false,
              "enum": [
                "queryWorkItems@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Run a single SQL Script in SQLCMD mode passing in multiple parameters via a SqlCmdVariables array",
              "doNotSuggest": false,
              "enum": [
                "RunSqlCmdScriptTask@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Deploy containers to Azure App Service",
              "doNotSuggest": false,
              "enum": [
                "AzureWebAppContainer@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Deploy a SQL Server database using DACPAC or SQL scripts",
              "doNotSuggest": false,
              "enum": [
                "SqlDacpacDeploymentOnMachineGroup@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Cache files between runs",
              "doNotSuggest": false,
              "enum": [
                "CacheBeta@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Cache files between runs",
              "doNotSuggest": false,
              "enum": [
                "Cache@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Cache files between runs",
              "doNotSuggest": false,
              "enum": [
                "CacheBeta@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Build with the CMake cross-platform build system",
              "doNotSuggest": false,
              "enum": [
                "CMake@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Test mobile app packages with Visual Studio Mobile Center.",
              "doNotSuggest": false,
              "enum": [
                "VSMobileCenterTest@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Test app packages with Visual Studio App Center",
              "doNotSuggest": false,
              "enum": [
                "AppCenterTest@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Download a secure file to the agent machine",
              "doNotSuggest": false,
              "enum": [
                "DownloadSecureFile@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "An Azure DevOps Task to build and deploy Azure Container Apps.",
              "doNotSuggest": false,
              "enum": [
                "AzureContainerApps@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Sets BuildTools.* variables to provide custom script tasks access to use the Service Connection as a single source of truth.",
              "doNotSuggest": false,
              "enum": [
                "PowerPlatformSetConnectionVariables@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Stops BizTalk360 maintenance mode. Put this task after the deployment has finished.",
              "doNotSuggest": false,
              "enum": [
                "RemoveAlertMaintenance@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Stops BizTalk360 maintenance mode. Put this task after the deployment has finished.",
              "doNotSuggest": false,
              "enum": [
                "RemoveAlertMaintenance@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Use the specified version of Ruby from the tool cache, optionally adding it to the PATH",
              "doNotSuggest": false,
              "enum": [
                "UseRubyVersion@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Run the Grunt JavaScript task runner",
              "doNotSuggest": false,
              "enum": [
                "Grunt@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Deploy an Azure SQL Database using DACPAC or run scripts using SQLCMD",
              "doNotSuggest": false,
              "enum": [
                "SqlAzureDacpacDeployment@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Uses container-structure-test (https://github.com/GoogleContainerTools/container-structure-test) to validate the structure of an image based on four categories of tests - command tests, file existence tests, file content tests and metadata tests",
              "doNotSuggest": false,
              "enum": [
                "ContainerStructureTest@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Install an MSI using the command msiexec.exe /i [msi file]",
              "doNotSuggest": false,
              "enum": [
                "MSIInstall@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Install an MSI using the command msiexec.exe /i [msi file]",
              "doNotSuggest": false,
              "enum": [
                "MSIInstall@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Power Platform Export Solution",
              "doNotSuggest": false,
              "enum": [
                "PowerPlatformExportSolution@2"
              ],
              "ignoreCase": "value"
            },
            {
              "deprecationMessage": "IISWebAppDeployment is deprecated - Deploy using MSDeploy, then create/update websites and app pools",
              "description": "Deploy using MSDeploy, then create/update websites and app pools",
              "doNotSuggest": true,
              "enum": [
                "IISWebAppDeployment@1"
              ],
              "ignoreCase": "value"
            },
            {
              "deprecationMessage": "CloudLoadTest is deprecated - Run a load test in the cloud with Azure Pipelines",
              "description": "Run a load test in the cloud with Azure Pipelines",
              "doNotSuggest": true,
              "enum": [
                "CloudLoadTest@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Install Kubectl on agent machine",
              "doNotSuggest": false,
              "enum": [
                "KubectlInstaller@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Power Platform Deploy Package. Requires Windows build agent",
              "doNotSuggest": false,
              "enum": [
                "PowerPlatformDeployPackage@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Run a command line with arguments",
              "doNotSuggest": false,
              "enum": [
                "CmdLine@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Run a command line script using Bash on Linux and macOS and cmd.exe on Windows",
              "doNotSuggest": false,
              "enum": [
                "CmdLine@2"
              ],
              "ignoreCase": "value"
            },
            {
              "deprecationMessage": "NuGet is deprecated - Deprecated: use the NuGet task instead. It works with the new Tool Installer framework so you can easily use new versions of NuGet without waiting for a task update, provides better support for authenticated feeds outside this organization/collection, and uses NuGet 4 by default.",
              "description": "Deprecated: use the NuGet task instead. It works with the new Tool Installer framework so you can easily use new versions of NuGet without waiting for a task update, provides better support for authenticated feeds outside this organization/collection, and uses NuGet 4 by default.",
              "doNotSuggest": true,
              "enum": [
                "NuGet@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Container Build Task",
              "doNotSuggest": false,
              "enum": [
                "ContainerBuild@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Allows you to run SQL Scripts",
              "doNotSuggest": false,
              "enum": [
                "RunSingleSqlScript@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Restores NuGet packages in preparation for a Visual Studio Build step.",
              "doNotSuggest": false,
              "enum": [
                "NuGetRestore@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Installs or restores missing NuGet packages. Use NuGetAuthenticate@0 task for latest capabilities.",
              "doNotSuggest": false,
              "enum": [
                "NuGetInstaller@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Restore, pack, or push NuGet packages, or run a NuGet command. Supports NuGet.org and authenticated feeds like Azure Artifacts and MyGet. Uses NuGet.exe and works with .NET Framework apps. For .NET Core and .NET Standard apps, use the .NET Core task.",
              "doNotSuggest": false,
              "enum": [
                "NuGetCommand@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Grant logon as a service.",
              "doNotSuggest": false,
              "enum": [
                "GrantLogonAsAServiceRight@8"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Delay further execution of a workflow by a fixed time",
              "doNotSuggest": false,
              "enum": [
                "Delay@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Stop a windows service.",
              "doNotSuggest": false,
              "enum": [
                "StopWindowsService@8"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Assign group to a target Power Platform environment with specified security role",
              "doNotSuggest": false,
              "enum": [
                "PowerPlatformAssignGroup@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Analyze solutions using Power Apps Checker endpoint",
              "doNotSuggest": false,
              "enum": [
                "PowerPlatformChecker@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Build an iOS app with Xamarin on macOS",
              "doNotSuggest": false,
              "enum": [
                "XamariniOS@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Build an iOS app with Xamarin on macOS",
              "doNotSuggest": false,
              "enum": [
                "XamariniOS@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Publish test results to Azure Pipelines",
              "doNotSuggest": false,
              "enum": [
                "PublishTestResults@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Publish test results to Azure Pipelines",
              "doNotSuggest": false,
              "enum": [
                "PublishTestResults@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Copy files to Azure Blob Storage or virtual machines",
              "doNotSuggest": false,
              "enum": [
                "AzureFileCopy@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Copy files to Azure Blob Storage or virtual machines",
              "doNotSuggest": false,
              "enum": [
                "AzureFileCopy@4"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Copy files to Azure Blob Storage or virtual machines",
              "doNotSuggest": false,
              "enum": [
                "AzureFileCopy@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Copy files to Azure Blob Storage or virtual machines",
              "doNotSuggest": false,
              "enum": [
                "AzureFileCopy@5"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Copy files to Azure Blob Storage or virtual machines",
              "doNotSuggest": false,
              "enum": [
                "AzureFileCopy@3"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Deploy SQL Server Analysis Services Project .xmla file using Invoke-ASCmd",
              "doNotSuggest": false,
              "enum": [
                "DeploySsas@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Index your source code and publish symbols to a file share or Azure Artifacts symbol server",
              "doNotSuggest": false,
              "enum": [
                "PublishSymbols@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Index your source code and publish symbols to a file share",
              "doNotSuggest": false,
              "enum": [
                "PublishSymbols@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Copy files or build artifacts to a remote machine over SSH",
              "doNotSuggest": false,
              "enum": [
                "CopyFilesOverSSH@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Uninstall an MSI using the command msiexec.exe /x[InstallGuid]",
              "doNotSuggest": false,
              "enum": [
                "MSIUninstall@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Uninstall an MSI using the command msiexec.exe /x[InstallGuid]",
              "doNotSuggest": false,
              "enum": [
                "MSIUninstall@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Build using a Gradle wrapper script",
              "doNotSuggest": false,
              "enum": [
                "Gradle@3"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Build using a Gradle wrapper script",
              "doNotSuggest": false,
              "enum": [
                "Gradle@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Build using a Gradle wrapper script",
              "doNotSuggest": false,
              "enum": [
                "Gradle@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Run the Microsoft Security DevOps CLI for static analysis.",
              "doNotSuggest": false,
              "enum": [
                "MicrosoftSecurityDevOps@1"
              ],
              "ignoreCase": "value"
            },
            {
              "deprecationMessage": "AppCenterDistribute is deprecated - Distribute app builds to testers and users via Visual Studio App Center",
              "description": "Distribute app builds to testers and users via Visual Studio App Center",
              "doNotSuggest": true,
              "enum": [
                "AppCenterDistribute@2"
              ],
              "ignoreCase": "value"
            },
            {
              "deprecationMessage": "AppCenterDistribute is deprecated - Distribute app builds to testers and users via Visual Studio App Center",
              "description": "Distribute app builds to testers and users via Visual Studio App Center",
              "doNotSuggest": true,
              "enum": [
                "AppCenterDistribute@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Distribute app builds to testers and users via Visual Studio App Center",
              "doNotSuggest": false,
              "enum": [
                "AppCenterDistribute@3"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Distribute app builds to testers and users via App Center",
              "doNotSuggest": false,
              "enum": [
                "AppCenterDistribute@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Power Platform Delete Environment",
              "doNotSuggest": false,
              "enum": [
                "PowerPlatformDeleteEnvironment@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Acquires a specific version of NuGet from the internet or the tools cache and adds it to the PATH. Use this task to change the version of NuGet used in the NuGet tasks.",
              "doNotSuggest": false,
              "enum": [
                "NuGetToolInstaller@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Acquires a specific version of NuGet from the internet or the tools cache and adds it to the PATH. Use this task to change the version of NuGet used in the NuGet tasks.",
              "doNotSuggest": false,
              "enum": [
                "NuGetToolInstaller@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Download artifacts produced by a Jenkins job",
              "doNotSuggest": false,
              "enum": [
                "JenkinsDownloadArtifacts@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Update a function app with a Docker container",
              "doNotSuggest": false,
              "enum": [
                "AzureFunctionAppContainer@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Decrypt a file using OpenSSL",
              "doNotSuggest": false,
              "enum": [
                "DecryptFile@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Deploy, configure, update a Kubernetes cluster in Azure Container Service by running helm commands",
              "doNotSuggest": false,
              "enum": [
                "HelmDeploy@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Install an Apple certificate required to build on a macOS agent machine",
              "doNotSuggest": false,
              "enum": [
                "InstallAppleCertificate@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Install an Apple certificate required to build on a macOS agent",
              "doNotSuggest": false,
              "enum": [
                "InstallAppleCertificate@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Install an Apple certificate required to build on a macOS agent",
              "doNotSuggest": false,
              "enum": [
                "InstallAppleCertificate@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Deployment Framework for BizTalk btdfproj project target: Undeploy",
              "doNotSuggest": false,
              "enum": [
                "BTDFUndeploy@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Deployment Framework for BizTalk btdfproj project target: Undeploy",
              "doNotSuggest": false,
              "enum": [
                "BTDFUndeploy@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Invoke an Azure Function",
              "doNotSuggest": false,
              "enum": [
                "AzureFunction@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Invoke Azure function as a part of your process.",
              "doNotSuggest": false,
              "enum": [
                "AzureFunction@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Downloads a GitHub Release from a repository",
              "doNotSuggest": false,
              "enum": [
                "DownloadGitHubRelease@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Run shell commands or a script on a remote machine using SSH",
              "doNotSuggest": false,
              "enum": [
                "SSH@0"
              ],
              "ignoreCase": "value"
            },
            {
              "deprecationMessage": "PublishPipelineArtifact is deprecated - Publish a local directory or file as a named artifact for the current pipeline",
              "description": "Publish a local directory or file as a named artifact for the current pipeline",
              "doNotSuggest": true,
              "enum": [
                "PublishPipelineArtifact@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Publish (upload) a file or directory as a named artifact for the current run",
              "doNotSuggest": false,
              "enum": [
                "PublishPipelineArtifact@1"
              ],
              "ignoreCase": "value"
            },
            {
              "deprecationMessage": "SonarQubePreBuild is deprecated - [DEPRECATED] Fetch the Quality Profile from SonarQube to configure the analysis",
              "description": "[DEPRECATED] Fetch the Quality Profile from SonarQube to configure the analysis",
              "doNotSuggest": true,
              "enum": [
                "SonarQubePreBuild@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Download artifacts from a file share, like \\\\share\\drop",
              "doNotSuggest": false,
              "enum": [
                "DownloadFileshareArtifacts@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Deploy, configure, update a Kubernetes cluster in Azure Container Service by running kubectl commands",
              "doNotSuggest": false,
              "enum": [
                "Kubernetes@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Deploy, configure, update a Kubernetes cluster in Azure Container Service by running kubectl commands",
              "doNotSuggest": false,
              "enum": [
                "Kubernetes@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Build and deploy an Azure IoT Edge image",
              "doNotSuggest": false,
              "enum": [
                "AzureIoTEdge@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Deploy a Docker Compose application to an Azure Service Fabric cluster",
              "doNotSuggest": false,
              "enum": [
                "ServiceFabricComposeDeploy@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Sign and align Android APK files",
              "doNotSuggest": false,
              "enum": [
                "AndroidSigning@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Sign and align Android APK files",
              "doNotSuggest": false,
              "enum": [
                "AndroidSigning@3"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Sign and align Android APK files",
              "doNotSuggest": false,
              "enum": [
                "AndroidSigning@1"
              ],
              "ignoreCase": "value"
            },
            {
              "deprecationMessage": "DownloadPipelineArtifact is deprecated - Download a named artifact from a pipeline to a local path",
              "description": "Download a named artifact from a pipeline to a local path",
              "doNotSuggest": true,
              "enum": [
                "DownloadPipelineArtifact@1"
              ],
              "ignoreCase": "value"
            },
            {
              "deprecationMessage": "DownloadPipelineArtifact is deprecated - Downloads an artifact associated with a pipeline",
              "description": "Downloads an artifact associated with a pipeline",
              "doNotSuggest": true,
              "enum": [
                "DownloadPipelineArtifact@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Download build and pipeline artifacts",
              "doNotSuggest": false,
              "enum": [
                "DownloadPipelineArtifact@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Power Platform Unpack Solution",
              "doNotSuggest": false,
              "enum": [
                "PowerPlatformUnpackSolution@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Use the specified version of Python from the tool cache, optionally adding it to the PATH",
              "doNotSuggest": false,
              "enum": [
                "UsePythonVersion@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Run a PowerShell script in the context of an Azure Service Fabric cluster connection",
              "doNotSuggest": false,
              "enum": [
                "ServiceFabricPowerShell@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Run tests with Visual Studio test runner",
              "doNotSuggest": false,
              "enum": [
                "VSTest@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Run unit and functional tests (Selenium, Appium, Coded UI test, etc.) using the Visual Studio Test (VsTest) runner. Test frameworks that have a Visual Studio test adapter such as MsTest, xUnit, NUnit, Chutzpah (for JavaScript tests using QUnit, Mocha and Jasmine), etc. can be run. Tests can be distributed on multiple agents using this task (version 2).",
              "doNotSuggest": false,
              "enum": [
                "VSTest@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "[PREVIEW] Pause a pipeline run to wait for manual interaction. Works only with YAML pipelines.",
              "doNotSuggest": false,
              "enum": [
                "ManualValidation@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Build with Apache Ant",
              "doNotSuggest": false,
              "enum": [
                "Ant@1"
              ],
              "ignoreCase": "value"
            },
            {
              "deprecationMessage": "DeployVisualStudioTestAgent is deprecated - Deprecated: Instead, use the 'Visual Studio Test' task to run unit and functional tests",
              "description": "Deprecated: Instead, use the 'Visual Studio Test' task to run unit and functional tests",
              "doNotSuggest": true,
              "enum": [
                "DeployVisualStudioTestAgent@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Deploy and configure Test Agent to run tests on a set of machines",
              "doNotSuggest": false,
              "enum": [
                "DeployVisualStudioTestAgent@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Create and activate a Conda environment",
              "doNotSuggest": false,
              "enum": [
                "CondaEnvironment@0"
              ],
              "ignoreCase": "value"
            },
            {
              "deprecationMessage": "CondaEnvironment is deprecated - This task is deprecated. Use `conda` directly in script to work with Anaconda environments.",
              "description": "This task is deprecated. Use `conda` directly in script to work with Anaconda environments.",
              "doNotSuggest": true,
              "enum": [
                "CondaEnvironment@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Run a Windows command or batch script and optionally allow it to change the environment",
              "doNotSuggest": false,
              "enum": [
                "BatchScript@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Power Platform Pack Solution",
              "doNotSuggest": false,
              "enum": [
                "PowerPlatformPackSolution@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Adds a solution component to the target unmanaged solution in the connected Dataverse environment",
              "doNotSuggest": false,
              "enum": [
                "PowerPlatformAddSolutionComponent@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Install npm packages from GitHub.",
              "doNotSuggest": false,
              "enum": [
                "DownloadGithubNpmPackage@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Power Platform Delete Solution",
              "doNotSuggest": false,
              "enum": [
                "PowerPlatformDeleteSolution@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Power Platform export data from environment with provided schema. Requires Windows build agent",
              "doNotSuggest": false,
              "enum": [
                "PowerPlatformExportData@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Build with MSBuild and set the Visual Studio version property",
              "doNotSuggest": false,
              "enum": [
                "VSBuild@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Download Azure Key Vault secrets",
              "doNotSuggest": false,
              "enum": [
                "AzureKeyVault@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Download Azure Key Vault secrets",
              "doNotSuggest": false,
              "enum": [
                "AzureKeyVault@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Acquires a specific version of the .NET Core SDK from the internet or the local cache and adds it to the PATH. Use this task to change the version of .NET Core used in subsequent tasks. Additionally provides proxy support.",
              "doNotSuggest": false,
              "enum": [
                "UseDotNet@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Acquire a specific version of the .NET Core SDK from the internet or local cache and add it to the PATH",
              "doNotSuggest": false,
              "enum": [
                "DotNetCoreInstaller@0"
              ],
              "ignoreCase": "value"
            },
            {
              "deprecationMessage": "DotNetCoreInstaller is deprecated - Acquire a specific version of the .NET Core SDK from the internet or local cache and add it to the PATH",
              "description": "Acquire a specific version of the .NET Core SDK from the internet or local cache and add it to the PATH",
              "doNotSuggest": true,
              "enum": [
                "DotNetCoreInstaller@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Start, stop, restart, slot swap, slot delete, install site extensions or enable continuous monitoring for an Azure App Service",
              "doNotSuggest": false,
              "enum": [
                "AzureAppServiceManage@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Build task to allow rest call during build or release.",
              "doNotSuggest": false,
              "enum": [
                "restCallBuildTask@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Install Azure Func Core Tools",
              "doNotSuggest": false,
              "enum": [
                "FuncToolsInstaller@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Replace tokens with variable values in XML or JSON configuration files",
              "doNotSuggest": false,
              "enum": [
                "FileTransform@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Replace tokens with variable values in XML or JSON configuration files",
              "doNotSuggest": false,
              "enum": [
                "FileTransform@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Extract a variety of archive and compression files such as .7z, .rar, .tar.gz, and .zip",
              "doNotSuggest": false,
              "enum": [
                "ExtractFiles@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Build an Android app with Xamarin",
              "doNotSuggest": false,
              "enum": [
                "XamarinAndroid@1"
              ],
              "ignoreCase": "value"
            },
            {
              "deprecationMessage": "CopyPublishBuildArtifacts is deprecated - [DEPRECATED] Use the Copy Files task and the Publish Build Artifacts task instead",
              "description": "[DEPRECATED] Use the Copy Files task and the Publish Build Artifacts task instead",
              "doNotSuggest": true,
              "enum": [
                "CopyPublishBuildArtifacts@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Updates the alert mappings",
              "doNotSuggest": false,
              "enum": [
                "UpdateBizTalk360Mappings@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Download a package from a package management feed in Azure Artifacts",
              "doNotSuggest": false,
              "enum": [
                "DownloadPackage@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Download a package from a package management feed in Azure Artifacts",
              "doNotSuggest": false,
              "enum": [
                "DownloadPackage@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Sets BizTalk360 in maintenance mode. Put this task before you start the deployment",
              "doNotSuggest": false,
              "enum": [
                "SetAlertMaintenance@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Sets BizTalk360 in maintenance mode. Put this task before you start the deployment",
              "doNotSuggest": false,
              "enum": [
                "SetAlertMaintenance@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Deploy an Azure Resource Manager (ARM) template to all the deployment scopes",
              "doNotSuggest": false,
              "enum": [
                "AzureResourceManagerTemplateDeployment@3"
              ],
              "ignoreCase": "value"
            },
            {
              "deprecationMessage": "AzureResourceGroupDeployment is deprecated - Deploy, start, stop, delete Azure Resource Groups",
              "description": "Deploy, start, stop, delete Azure Resource Groups",
              "doNotSuggest": true,
              "enum": [
                "AzureResourceGroupDeployment@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Deploy an Azure Resource Manager (ARM) template to a resource group and manage virtual machines",
              "doNotSuggest": false,
              "enum": [
                "AzureResourceGroupDeployment@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Invoke REST API as a part of your process.",
              "doNotSuggest": false,
              "enum": [
                "InvokeRESTAPI@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Invoke a REST API as a part of your pipeline.",
              "doNotSuggest": false,
              "enum": [
                "InvokeRESTAPI@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Archive files using compression formats such as .7z, .rar, .tar.gz, and .zip.",
              "doNotSuggest": false,
              "enum": [
                "ArchiveFiles@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Compress files into .7z, .tar.gz, or .zip",
              "doNotSuggest": false,
              "enum": [
                "ArchiveFiles@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Write a comment to your Github entity i.e. issue or a Pull Request (PR)",
              "doNotSuggest": false,
              "enum": [
                "GitHubComment@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Copy files from source folder to target folder using minimatch patterns (The minimatch patterns will only match file paths, not folder paths)",
              "doNotSuggest": false,
              "enum": [
                "CopyFiles@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Copy files from a source folder to a target folder using patterns matching file paths (not folder paths)",
              "doNotSuggest": false,
              "enum": [
                "CopyFiles@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Run your scripts and make changes to your Azure Database for MySQL",
              "doNotSuggest": false,
              "enum": [
                "AzureMysqlDeployment@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Build and run Dev Containers (https://containers.dev) in Azure DevOps Pipelines",
              "doNotSuggest": false,
              "enum": [
                "DevcontainersCi@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Run an npm command. Use NpmAuthenticate@0 task for latest capabilities.",
              "doNotSuggest": false,
              "enum": [
                "Npm@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Install and publish npm packages, or run an npm command. Supports npmjs.com and authenticated registries like Azure Artifacts.",
              "doNotSuggest": false,
              "enum": [
                "Npm@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Run multiple SQL Scripts in a folder in SqlCmd mode and passing in parameters via a SqlCmdVariables array",
              "doNotSuggest": false,
              "enum": [
                "RunSqlCmdScriptsInFolderTask@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "[PREVIEW] Build and deploy an Azure Static Web App",
              "doNotSuggest": false,
              "enum": [
                "AzureStaticWebApp@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Finds or downloads and caches the specified version spec of Node.js and adds it to the PATH",
              "doNotSuggest": false,
              "enum": [
                "NodeTool@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Set up a Node.js environment and add it to the PATH, additionally providing proxy support",
              "doNotSuggest": false,
              "enum": [
                "UseNode@1"
              ],
              "ignoreCase": "value"
            },
            {
              "deprecationMessage": "SqlServerDacpacDeployment is deprecated - Deploy a SQL Server database using DACPAC",
              "description": "Deploy a SQL Server database using DACPAC",
              "doNotSuggest": true,
              "enum": [
                "SqlServerDacpacDeployment@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Acquire the test platform from nuget.org or the tool cache. Satisfies the vstest demand and can be used for running tests and collecting diagnostic data using the Visual Studio Test task.",
              "doNotSuggest": false,
              "enum": [
                "VisualStudioTestPlatformInstaller@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Sends a message to Azure Service Bus using a service connection (no agent is required)",
              "doNotSuggest": false,
              "enum": [
                "PublishToAzureServiceBus@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Sends a message to azure service bus using a service connection (no agent required).",
              "doNotSuggest": false,
              "enum": [
                "PublishToAzureServiceBus@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Use Kubernetes manifest files to deploy to clusters or even bake the manifest files to be used for deployments using Helm charts",
              "doNotSuggest": false,
              "enum": [
                "KubernetesManifest@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Download files that were saved as artifacts of a completed build",
              "doNotSuggest": false,
              "enum": [
                "DownloadBuildArtifacts@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Download files that were saved as artifacts of a completed build",
              "doNotSuggest": false,
              "enum": [
                "DownloadBuildArtifacts@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Install CocoaPods dependencies for Swift and Objective-C Cocoa projects",
              "doNotSuggest": false,
              "enum": [
                "CocoaPods@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Allows you to run DACPAC packages",
              "doNotSuggest": false,
              "enum": [
                "RunDACPAC@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Terminates suspended service instances and optionally saves the relevant messages and metadata",
              "doNotSuggest": false,
              "enum": [
                "BizTalkTerminateSuspended@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Terminates suspended service instances and optionally saves the relevant messages and metadata",
              "doNotSuggest": false,
              "enum": [
                "BizTalkTerminateSuspended@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Deploy applications to Azure Spring Cloud and manage deployments.",
              "doNotSuggest": false,
              "enum": [
                "AzureSpringCloud@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Who Am I for quick connection testing to Power Platform org/environment instance.",
              "doNotSuggest": false,
              "enum": [
                "PowerPlatformWhoAmi@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Deploy an Azure Web App for Linux or Windows",
              "doNotSuggest": false,
              "enum": [
                "AzureWebApp@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Run Azure CLI commands against an Azure subscription in a Shell script when running on Linux agent or Batch script when running on Windows agent.",
              "doNotSuggest": false,
              "enum": [
                "AzureCLI@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Run a Shell or Batch script with Azure CLI commands against an azure subscription",
              "doNotSuggest": false,
              "enum": [
                "AzureCLI@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Run Azure CLI commands against an Azure subscription in a PowerShell Core/Shell script when running on Linux agent or PowerShell/PowerShell Core/Batch script when running on Windows agent.",
              "doNotSuggest": false,
              "enum": [
                "AzureCLI@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Power Platform Restore Environment",
              "doNotSuggest": false,
              "enum": [
                "PowerPlatformRestoreEnvironment@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Allows you to run SQL Scripts",
              "doNotSuggest": false,
              "enum": [
                "RunSqlScripts@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Create, edit, or delete a GitHub release",
              "doNotSuggest": false,
              "enum": [
                "GitHubRelease@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Create, edit, or delete a GitHub release",
              "doNotSuggest": false,
              "enum": [
                "GitHubRelease@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Use cURL to upload files with FTP, FTPS, SFTP, HTTP, and more.",
              "doNotSuggest": false,
              "enum": [
                "cURLUploader@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Use cURL's supported protocols to upload files",
              "doNotSuggest": false,
              "enum": [
                "cURLUploader@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Update/Add App settings an Azure Web App for Linux or Windows",
              "doNotSuggest": false,
              "enum": [
                "AzureAppServiceSettings@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Power Platform Reset Environment",
              "doNotSuggest": false,
              "enum": [
                "PowerPlatformResetEnvironment@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Download or publish Universal Packages",
              "doNotSuggest": false,
              "enum": [
                "UniversalPackages@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Security and compliance assessment for Azure Policy",
              "doNotSuggest": false,
              "enum": [
                "AzurePolicyCheckGate@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Deploy Azure function to Kubernetes cluster.",
              "doNotSuggest": false,
              "enum": [
                "AzureFunctionOnKubernetes@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Deploy Azure function to Kubernetes cluster.",
              "doNotSuggest": false,
              "enum": [
                "AzureFunctionOnKubernetes@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Deploys a Windows Service to an Agent or a Deployment Group Target using WinRM.",
              "doNotSuggest": false,
              "enum": [
                "WindowsServiceManager@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Deploys a Windows Service to an Agent or a Deployment Group Target using WinRM.",
              "doNotSuggest": false,
              "enum": [
                "WindowsServiceManager@4"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Deploys a Windows Service to an Agent or a Deployment Group Target using WinRM.",
              "doNotSuggest": false,
              "enum": [
                "WindowsServiceManager@3"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Deploys a Windows Service with an Agent or a Deployment Group Target.",
              "doNotSuggest": false,
              "enum": [
                "WindowsServiceManager@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Backup a SQL Server database",
              "doNotSuggest": false,
              "enum": [
                "SqlBackup@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Run a Bash script on macOS, Linux, or Windows",
              "doNotSuggest": false,
              "enum": [
                "Bash@3"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Run a shell script using Bash",
              "doNotSuggest": false,
              "enum": [
                "ShellScript@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Publish build artifacts to Azure Pipelines or a Windows file share",
              "doNotSuggest": false,
              "enum": [
                "PublishBuildArtifacts@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Install an SSH key prior to a build or deployment",
              "doNotSuggest": false,
              "enum": [
                "InstallSSHKey@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Deploy a virtual machine scale set image",
              "doNotSuggest": false,
              "enum": [
                "AzureVmssDeployment@0"
              ],
              "ignoreCase": "value"
            },
            {
              "deprecationMessage": "AzureWebPowerShellDeployment is deprecated - Create or update Azure App Service using Azure PowerShell",
              "description": "Create or update Azure App Service using Azure PowerShell",
              "doNotSuggest": true,
              "enum": [
                "AzureWebPowerShellDeployment@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Deploy an Azure Cloud Service",
              "doNotSuggest": false,
              "enum": [
                "AzureCloudPowerShellDeployment@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Authentication task for the cargo client used for installing Cargo crates distribution",
              "doNotSuggest": false,
              "enum": [
                "CargoAuthenticate@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Deployment Framework for BizTalk btdfproj project target: Deploy",
              "doNotSuggest": false,
              "enum": [
                "BTDFDeploy@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Deployment Framework for BizTalk btdfproj project target: Deploy",
              "doNotSuggest": false,
              "enum": [
                "BTDFDeploy@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Delete folders, or files matching a pattern",
              "doNotSuggest": false,
              "enum": [
                "DeleteFiles@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Assign a user to a target environment with specified security role.",
              "doNotSuggest": false,
              "enum": [
                "PowerPlatformAssignUser@2"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Run the gulp Node.js streaming task-based build system",
              "doNotSuggest": false,
              "enum": [
                "gulp@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Run the gulp Node.js streaming task-based build system",
              "doNotSuggest": false,
              "enum": [
                "gulp@1"
              ],
              "ignoreCase": "value"
            },
            {
              "deprecationMessage": "QuickPerfTest is deprecated - Run a quick web performance test in the cloud with Azure Pipelines",
              "description": "Run a quick web performance test in the cloud with Azure Pipelines",
              "doNotSuggest": true,
              "enum": [
                "QuickPerfTest@1"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Create or update websites, web apps, virtual directories, or application pools",
              "doNotSuggest": false,
              "enum": [
                "IISWebAppManagementOnMachineGroup@0"
              ],
              "ignoreCase": "value"
            },
            {
              "description": "Install Docker CLI on agent machine.",
              "doNotSuggest": false,
              "enum": [
                "DockerInstaller@0"
              ],
              "ignoreCase": "value"
            }
          ]
        },
        "timeoutInMinutes": {
          "description": "Time to wait for this task to complete before the server kills it",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "taskBase": {
      "additionalProperties": false,
      "properties": {
        "condition": {
          "$ref": "#/definitions/string",
          "description": "Evaluate this condition expression to determine whether to run this task"
        },
        "continueOnError": {
          "$ref": "#/definitions/boolean",
          "description": "Continue running even on failure?"
        },
        "displayName": {
          "$ref": "#/definitions/string",
          "description": "Human-readable name for the task"
        },
        "enabled": {
          "$ref": "#/definitions/boolean",
          "description": "Run this task when the job runs?"
        },
        "env": {
          "$ref": "#/definitions/mappingOfStringString",
          "description": "Variables to map into the process's environment"
        },
        "name": {
          "$ref": "#/definitions/referenceName",
          "description": "ID of the step"
        },
        "retryCountOnTaskFailure": {
          "$ref": "#/definitions/string",
          "description": "Number of retries if the task fails"
        },
        "target": {
          "$ref": "#/definitions/stepTarget",
          "description": "Environment in which to run this task"
        },
        "timeoutInMinutes": {
          "$ref": "#/definitions/nonEmptyString",
          "description": "Time to wait for this task to complete before the server kills it"
        }
      },
      "type": "object"
    },
    "tasks": {
      "items": {
        "$ref": "#/definitions/task"
      },
      "type": "array"
    },
    "templateContext": {
      "additionalProperties": true,
      "type": "object"
    },
    "templateParameter": {
      "additionalProperties": false,
      "firstProperty": [
        "name"
      ],
      "properties": {
        "default": {
          "$ref": "#/definitions/any"
        },
        "displayName": {
          "$ref": "#/definitions/string",
          "description": "Human-readable name for the parameter"
        },
        "name": {
          "$ref": "#/definitions/nonEmptyString"
        },
        "type": {
          "$ref": "#/definitions/templateParameterType"
        },
        "values": {
          "$ref": "#/definitions/sequenceOfNonEmptyString"
        }
      },
      "type": "object"
    },
    "templateParameterType": {
      "anyOf": [
        {
          "pattern": "^boolean$",
          "type": "string"
        },
        {
          "pattern": "^container$",
          "type": "string"
        },
        {
          "pattern": "^containerList$",
          "type": "string"
        },
        {
          "pattern": "^deployment$",
          "type": "string"
        },
        {
          "pattern": "^deploymentList$",
          "type": "string"
        },
        {
          "pattern": "^job$",
          "type": "string"
        },
        {
          "pattern": "^jobList$",
          "type": "string"
        },
        {
          "pattern": "^legacyObject$",
          "type": "string"
        },
        {
          "pattern": "^number$",
          "type": "string"
        },
        {
          "pattern": "^object$",
          "type": "string"
        },
        {
          "pattern": "^stage$",
          "type": "string"
        },
        {
          "pattern": "^stageList$",
          "type": "string"
        },
        {
          "pattern": "^step$",
          "type": "string"
        },
        {
          "pattern": "^stepList$",
          "type": "string"
        },
        {
          "pattern": "^string$",
          "type": "string"
        }
      ]
    },
    "templateParameters": {
      "anyOf": [
        {
          "items": {
            "$ref": "#/definitions/templateParameter"
          },
          "type": "array"
        },
        {
          "additionalProperties": true,
          "type": "object"
        }
      ]
    },
    "trigger": {
      "anyOf": [
        {
          "pattern": "^none$",
          "type": "string"
        },
        {
          "items": {
            "$ref": "#/definitions/branchFilter"
          },
          "type": "array"
        },
        {
          "additionalProperties": false,
          "properties": {
            "batch": {
              "$ref": "#/definitions/boolean",
              "description": "Whether to batch changes per branch"
            },
            "branches": {
              "$ref": "#/definitions/includeExcludeFilters"
            },
            "paths": {
              "$ref": "#/definitions/includeExcludeFilters"
            },
            "tags": {
              "$ref": "#/definitions/includeExcludeFilters"
            }
          },
          "type": "object"
        }
      ]
    },
    "triggerBranchFilter": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "exclude": {
              "$ref": "#/definitions/branchFilterArray"
            },
            "include": {
              "$ref": "#/definitions/branchFilterArray"
            }
          },
          "type": "object"
        },
        {
          "items": {
            "$ref": "#/definitions/branchFilter"
          },
          "type": "array"
        }
      ]
    },
    "variable": {
      "anyOf": [
        {
          "additionalProperties": false,
          "firstProperty": [
            "name"
          ],
          "properties": {
            "name": {
              "$ref": "#/definitions/nonEmptyString"
            },
            "readonly": {
              "$ref": "#/definitions/boolean"
            },
            "value": {
              "$ref": "#/definitions/string"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "firstProperty": [
            "group"
          ],
          "properties": {
            "group": {
              "$ref": "#/definitions/nonEmptyString"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "firstProperty": [
            "template"
          ],
          "properties": {
            "parameters": {
              "$ref": "#/definitions/mapping"
            },
            "template": {
              "$ref": "#/definitions/nonEmptyString"
            }
          },
          "type": "object"
        }
      ]
    },
    "variableRestrictions": {
      "anyOf": [
        {
          "ignoreCase": "value",
          "pattern": "^none$",
          "type": "string"
        },
        {
          "items": {
            "$ref": "#/definitions/nonEmptyString"
          },
          "type": "array"
        }
      ]
    },
    "variables": {
      "anyOf": [
        {
          "additionalProperties": true,
          "type": "object"
        },
        {
          "items": {
            "$ref": "#/definitions/variable"
          },
          "type": "array"
        }
      ]
    },
    "variablesTemplate": {
      "additionalProperties": false,
      "properties": {
        "parameters": {
          "$ref": "#/definitions/templateParameters"
        },
        "variables": {
          "$ref": "#/definitions/variables"
        }
      },
      "type": "object"
    },
    "webhookFilter": {
      "additionalProperties": false,
      "firstProperty": [
        "path"
      ],
      "properties": {
        "path": {
          "$ref": "#/definitions/nonEmptyString",
          "description": "json path to select data from event payload"
        },
        "value": {
          "$ref": "#/definitions/nonEmptyString",
          "description": "Expected value for the filter to match"
        }
      },
      "required": [
        "path",
        "value"
      ],
      "type": "object"
    },
    "webhookFilters": {
      "items": {
        "$ref": "#/definitions/webhookFilter"
      },
      "type": "array"
    },
    "webhookResource": {
      "additionalProperties": false,
      "firstProperty": [
        "webhook"
      ],
      "properties": {
        "connection": {
          "$ref": "#/definitions/nonEmptyString",
          "description": "Name of the connection. In case of offline webhook this will be the type of Incoming Webhook otherwise it will be the type of the webhook extension."
        },
        "filters": {
          "$ref": "#/definitions/webhookFilters",
          "description": "List of trigger filters."
        },
        "type": {
          "$ref": "#/definitions/nonEmptyString",
          "description": "Name of the webhook extension. leave this empty if its offline webhook."
        },
        "webhook": {
          "$ref": "#/definitions/referenceName",
          "description": "Name of the webhook"
        }
      },
      "required": [
        "webhook",
        "connection"
      ],
      "type": "object"
    },
    "webhookResources": {
      "items": {
        "$ref": "#/definitions/webhookResource"
      },
      "type": "array"
    }
  },
  "description": "A pipeline definition",
  "oneOf": [
    {
      "$ref": "#/definitions/pipeline"
    },
    {
      "pattern": "^$",
      "type": "string"
    }
  ],
  "title": "Pipeline schema"
}
